<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mavericreate.Blog</title>
  
  <subtitle>if(Coding == Happiness &amp;&amp; Happiness == Life)</subtitle>
  <link href="/Zh-Blog/atom.xml" rel="self"/>
  
  <link href="https://github.com/MaverickTang/Zh-Blog/"/>
  <updated>2021-02-15T05:43:33.038Z</updated>
  <id>https://github.com/MaverickTang/Zh-Blog/</id>
  
  <author>
    <name>唐浩天</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>苏菲的世界——哲学史整理</title>
    <link href="https://github.com/MaverickTang/Zh-Blog/2021/02/12/Sophie/"/>
    <id>https://github.com/MaverickTang/Zh-Blog/2021/02/12/Sophie/</id>
    <published>2021-02-12T01:03:40.000Z</published>
    <updated>2021-02-15T05:43:33.038Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看哲学发展史其实也是在看人类认知的深度，毕竟哲学家走在认知的前沿</p><p>在《苏菲的世界》中，贾德运用了大量的比喻与举例，使哲学变得简单易懂</p><p>并且插入了许多历史知识的补充，涉及面广大</p><p>但是这种方法不适合于我想要的笔记整理，不够精简</p><p><del>两万字的整理真TM精简</del>（2.14回首）</p><p>所以根据自己的理解大概写了一些笔记</p><a id="more"></a><p><code>（*用这个代表我的见解）</code></p><h1 id="哲学初谈"><a href="#哲学初谈" class="headerlink" title="哲学初谈"></a>哲学初谈</h1><p>贾德在前三章将读者引入哲学世界，提出了最基础的哲学问题以及学习哲学应该具有的态度</p><h2 id="最重要的哲学问题"><a href="#最重要的哲学问题" class="headerlink" title="最重要的哲学问题"></a>最重要的哲学问题</h2><blockquote><p>在某个时刻事物必然从无到有</p></blockquote><ul><li>我是谁？</li><li>世界从何而来？</li></ul><blockquote><p> 在历史上，人们对每一个问题提出了不同的答案。因此，提出哲学问题要比回答这些问题更容易。 即使是在今天，每个人仍然必须各自寻求他对这些问题的答案。虽然我们要得出自己的答案，但观看别人的答案可以帮助我们建立自己对这些事物的理解</p></blockquote><p><strong>我的答案</strong></p><ul><li>名字不足以定义我，贴标签毫无意义，但是就<strong>现阶段</strong>而言，我是一个<strong>以为自己与众不同</strong>的芸芸大众。</li><li>宇宙大爆炸产生了整个世界，这是科学界的说法，我也是这样相信的，但是在大爆炸之前存在着什么？我相信这是人们给上帝留下的空间</li></ul><h2 id="做一只好奇的猫"><a href="#做一只好奇的猫" class="headerlink" title="做一只好奇的猫"></a>做一只好奇的猫</h2><blockquote><p>成为一个优秀哲学家的唯一条件是要有<strong>好奇心</strong></p></blockquote><p>世界本来就是奇怪的，你习惯了世界，你就认为正常了</p><blockquote><p>世上本无路，只是走的人多了，也就成了路</p></blockquote><p>一个小孩认为世界的一切新鲜而惊奇,一个成年人将这个世界视为理所当然。一个哲学家从来不会<strong>过分</strong>习惯这个世界，他们需要一直像小孩一样敏感，<strong>不接受世界的不合理</strong>。</p><blockquote><p>当我们成长时，不仅习惯了有地心引力这回事，同时也很快地习惯了世上的一切。我们在成长的过程当中，似乎失去了对这世界的好奇心。也正因此，我们丧失了某种极为重要的能力（这也是一种哲学家们想要使人们恢复的能力）。</p></blockquote><p>学习哲学需要我们跳出自己的舒适圈，我们要关注琐事，但是不能被琐事困住，需要探索未知需要勇气，坚毅，与智慧。</p><h2 id="创始之初（神话）"><a href="#创始之初（神话）" class="headerlink" title="创始之初（神话）"></a>创始之初（神话）</h2><blockquote><p>善与恶之间脆弱的平衡</p></blockquote><p>哲学：耶稣基督降生前六百年左右，在希腊演进的一种崭新的思考方式。</p><blockquote><p>人们在各种宗教中找到了他们心中问题的答案。这些宗教上的解释透过神话的形式代代流传下来。所谓神话就是有关诸神的故事，其目的在解释为何生命是这番面貌。</p></blockquote><p>拓展阅读：北欧神话（挖坑）</p><p>公元前七百年左右，有一大部分希腊神话被荷马与贺西欧德以文字记录下来，从此开始了对神话的讨论</p><p>赞诺芬尼司质疑神话实为人类编造</p><p>原因： <strong>社会发展</strong><br>1.世界的扩大，让人们接触到了更多的事物<br>2.时间闲暇，让人们有了思考的时间与能力</p><blockquote><p>在这样的城市环境中，人的思考方式开始变得与以前大不相同。任何人都可以发言质疑社会的组成方式，也可无须借助古代神话而提出一些哲学性的问题。 我们称这样的现象为“从神话的思考模式发展到以经验与理性为基础的思考模式”。早期希腊哲学家的目标乃是为大自然的变化寻找自然的——而非超自然的——解释。 </p></blockquote><h1 id="哲学史"><a href="#哲学史" class="headerlink" title="哲学史"></a>哲学史</h1><blockquote><p>   在这堂课里，我将大略描述从古希腊时期到现代，人们对哲学的观念</p></blockquote><h2 id="自然派哲学家"><a href="#自然派哲学家" class="headerlink" title="自然派哲学家"></a>自然派哲学家</h2><blockquote><p>没有一件事物可以来自空无</p></blockquote><p>哲学家们试图用神话以外的观点(自然法则)来解释自然现象，这使他们脱离了神话，朝科学推理迈出了第一步，成为后代科学的先驱</p><blockquote><p>最早的希腊哲学家有时被称为“自然派哲学家”，因为他们关切的主题是大自然与它的循环与变化。</p></blockquote><p>关心问题：</p><ul><li>自然的本质</li></ul><h3 id="米雷特斯的三位哲学家"><a href="#米雷特斯的三位哲学家" class="headerlink" title="米雷特斯的三位哲学家"></a>米雷特斯的三位哲学家</h3><p>泰利斯</p><ul><li>水是万物之源</li><li>万物中皆有神在</li></ul><p>安纳克西曼德</p><ul><li>我们的世界只是他所谓的“无限定者”（注：世界由无限定者元素所构成）中无数个生生灭灭的世界之一</li></ul><p>安那西梅尼斯</p><ul><li>认为万物之源必定是“空气”或“气体”</li></ul><p>三位米雷特斯的哲学家都相信，宇宙间有一种基本物质是所有事物的源头，没有任何事物会来自虚无</p><h3 id="变化的问题"><a href="#变化的问题" class="headerlink" title="变化的问题"></a>变化的问题</h3><p><strong>理性主义</strong>：100%相信人类的理智是世间所有知识源泉</p><p>帕梅尼德斯： </p><ul><li>没有任何事物会改变 </li><li>感官认知是不可靠的</li></ul><p>赫拉克里特斯： </p><ul><li>万物都会改变（“一切事物都是流动的”）</li></ul><blockquote><p>人不能两次踏进同一条河流</p></blockquote><ul><li>感官认知是可靠的</li><li>好坏与善恶都不可或缺</li><li>神是涵盖整个世界的事物</li><li>万物之源是“上帝”或者“理性”，他们都具有一致性</li></ul><p>我：</p><ul><li>万物都会改变</li><li>感官认知是不可靠的</li></ul><h3 id="万物中皆含有各物的一部分"><a href="#万物中皆含有各物的一部分" class="headerlink" title="万物中皆含有各物的一部分"></a>万物中皆含有各物的一部分</h3><p>恩培窦可里斯：</p><ul><li>没有任何事物会改变</li><li>感官认知是可靠的</li><li>四种元素组成世界： 土气水火，世间发生的事是这些元素的分合聚散</li><li>“爱”使得事物聚合，”恨“使得事物分散</li><li>‘物质’与‘力’应该分开</li></ul><p>安纳萨哥拉斯：</p><ul><li>大自然是由无数肉眼看不见的微小粒子所组成，而所有事物都可以被分割成更小的部分</li><li>“秩序”是一种力量，可以创造生命，他称之为“心灵”或“睿智”</li></ul><h3 id="原子理论"><a href="#原子理论" class="headerlink" title="原子理论"></a>原子理论</h3><blockquote><p>世界上最巧妙的玩具</p></blockquote><p>德谟克里特斯（约公元前四六〇～公元前三七○年），来自爱琴海北部海岸一个叫阿布德拉的小镇</p><ul><li>物质由不可分割，永恒不变的原子组成</li><li>自然界的一切都在流动，不过在流动的事物之后，存在这永恒不变的原子</li></ul><p><strong>唯物论</strong>：只相信物质的东西</p><h3 id="命运"><a href="#命运" class="headerlink" title="命运"></a>命运</h3><blockquote><p>算命者试图预测某些事实上极不可测的事物</p></blockquote><p>宿命论：相信所有发生的事都是命中注定的</p><blockquote><p>在戴尔菲神庙的入口处上方有一行著名的铭文:“认识你自己!”意思是人类绝不可自以为不朽，同时也没有人可以逃避命运。</p></blockquote><p>古希腊人相信</p><ul><li>人们可以透过著名的戴尔菲(Delphi)神论知道自己的命运</li><li>命运不仅操纵个人的生活，也左右世界的历史。 他们并且相信战争的结局可能因诸神的介入而改变</li><li>疾病可能是神降的灾祸，也相信只要人以适当 的方式向神献祭，神就可能使生病的人痊愈</li></ul><p>希波克拉底的誓言</p><blockquote><p>我将依照自身的能力与判断，采用对病人有利的疗法与处方,绝不施以有害或有毒之物。无论应何人之请，我也绝不给予致命药物或做此类之建议，也绝不协助妇女堕胎。进入病家访视时，我 将以病人的福祉为念，不做任何贪渎害人之事，不受男女奴仆之引 诱。我在执业时之所见所闻，凡不应泄漏者，我将严予保密。若我遵行此一誓言 ,不懈不怠 ，愿上苍使我乐享生命、精进 医事并受世人敬重。若我违反誓言，愿我遭相反之命运。</p></blockquote><h2 id="古典派哲学家"><a href="#古典派哲学家" class="headerlink" title="古典派哲学家"></a>古典派哲学家</h2><h3 id="苏格拉底"><a href="#苏格拉底" class="headerlink" title="苏格拉底"></a>苏格拉底</h3><blockquote><p>最聪明的是明白自己无知的人</p></blockquote><p>关心的问题：</p><ul><li>世间的一些标准是放诸四海皆准的</li><li>个人在社会中的位置</li><li>人如何能够过着良好的生活</li></ul><h4 id="历史背景"><a href="#历史背景" class="headerlink" title="历史背景"></a>历史背景</h4><blockquote><p>当时，一个拥有人民议会与法庭等机构的民主制度正在雅典逐渐成形。为了使民主能够运作，人民必须接受足够的教育以参与民主 的进程。在现代，我们也看到新兴的民主国家如何需要开启民智。 当时的雅典人认为，最重要的事就是要精通演说术，也就是说要能够用令人信服的方式来表达自己的看法。这时，有一群四处游历的教师与哲学家从希腊各殖民地来到了雅典 。他们自 称为哲士或智者(Sophist)。这个字原来指的是一个有智慧而且博学的人(按:一般贬称为诡辩学家)。这些诡辩学家在雅典以教导市民为生。这批游历四方的诡辩学家宣称，世间没有绝对的是非标准，这种说法在雅典造成激烈的争议。相反的，苏格拉底则试图证明此类的规范事实上不容置疑，而且是放诸四海皆准的。</p></blockquote><p>诡辩学派（<strong>怀疑论</strong>）：虽然哲学问题或许有答案，但人类永远不可能揭开大自然及宇宙之谜</p><blockquote><p>人是衡量一切的尺度                         —普罗塔哥拉斯</p></blockquote><p> 一件事情是对是错、是好是坏，完全要看它与人类的需求有何关系而定</p><p><strong>不可知论</strong>：无法确定世上是否有神 </p><h4 id="人物介绍"><a href="#人物介绍" class="headerlink" title="人物介绍"></a>人物介绍</h4><p>苏格拉底(公元前四七零~ 公元前三九九年)：从未留下任何文字，但却是对欧洲思想影响巨大。生于雅典，有生之年大半时间都在市中 心广场与市场等地与他遇见的人闲谈。苏格拉底长得很丑。 他肚大、眼凸，有个狮子鼻，但据说他的性情“极为和蔼可亲”。我们之所以能够得知苏格拉底的生平，主要是透过柏拉图的《对话录》。（好像孔子）不过苏格拉底本身不重要，因为近两千五百年来对西方思想家产生启发作用的，事实上是柏拉图描绘出来的苏格拉底。</p><p><strong>哲学家=爱好智慧的人</strong></p><blockquote><p>唯有出自内心的知识，才能使人拥有真正的智慧。</p></blockquote><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>通过<strong>谈话</strong>，引导来揭露人们思想上的弱点</p><p>重视<strong>良心与真理</strong>更甚于生命</p><p>敢于<strong>承认自己的无知</strong>，人类的有限</p><blockquote><p>我只知道一件事，就是我一无所知。</p></blockquote><p><strong>正确的见解导致正确的行动</strong></p><ul><li><p>辨别是非的能力就存在于人的理性中，而不存在于社会中</p></li><li><p>人如果违反自己的理性就不会快乐。而那些知 道如何找到快乐的人就会遵照自己的理性行事。因此，明白是非者必然不会为恶。因为世间哪有人会想要成为一个不快乐的人?</p></li><li><blockquote><p>知善者必能行善</p></blockquote></li></ul><h3 id="柏拉图"><a href="#柏拉图" class="headerlink" title="柏拉图"></a>柏拉图</h3><blockquote><p>回归灵魂世界的渴望</p></blockquote><p>关心的问题：</p><ul><li>有关个人永恒不变的真理</li></ul><p>对柏拉图而言，苏格拉底之死证明了当时社会与理想社会之间的<strong>冲突</strong>。在柏拉图成为哲学家之后，他不仅写书记录苏格拉底的言论，而且创立了<strong>柏拉图学园</strong></p><h4 id="理型的世界"><a href="#理型的世界" class="headerlink" title="理型的世界"></a>理型的世界</h4><p>永恒不变的东西并非一种“基本物质”，而是形成各种事物模样的精神模式或抽象模式。</p><blockquote><p>世间有所谓永恒、绝对的是非观念存在</p><p>物质世界的背后，必定有一个实在存在（*完美的存在，我们脑中完美事物的想象）。他称这个实在为‘理型的世界’，其中包含存在于自然界各种现象背后、永恒不变的模式。（柏拉图的理型论）</p></blockquote><p><strong>为什么哲学家努力追求永恒不变的事物</strong></p><ul><li>未深入研究前，事物就消散了</li><li>研究这样的题材难找到同僚与市场</li></ul><p>柏拉图认为</p><ul><li><blockquote><p>我们对于那些不断改变的事物不可能会有真正的认识，因为我们对其只有模糊、不精确的观念，我们对于那些属于感官世界的具体事物只能有意见或看法。我们能够真正认识的，只有那些我们可以运用理智来了解的事物。</p></blockquote></li><li><blockquote><p>人是一种具有双重性质的生物。我们的身体是“流动”的，与感官的世界不可分割，并且其命运与世界上其他每一件事物(如肥皂泡)都相同。我们所有的感官都是以身体为基础，因此是不可靠的。但我们同时也有一个不朽的灵魂，而这个灵魂则是理性的天下。由于灵魂不是物质，因此可以探索理型的世界。</p></blockquote></li></ul><p>理想中的生命历程</p><ul><li><p>灵魂先于实体存在，但它在躯体中醒来时，他会忘记所有的、完美的理型，当他观察世界，他是在回忆，并且会涌起一股回到它本来领域的“渴望”，称之为eros（“爱”）。</p><blockquote><p>此时，灵魂 体验到“一种回归本源的欲望”。从此以后，肉体与整个感官世界 对它而言，都是不完美而且微不足道的。灵魂渴望乘着爱的翅膀回“家”，回到理型的世界。它渴望从“肉体的枷锁”中挣脱。</p></blockquote></li></ul><p>*不完美也是必要的，物种在进化中慢慢改变，没有永恒的事物，柏拉图的理型的世界还是被限制在神学下（神学认为世界从创世之初就没变过</p><h4 id="洞穴神话"><a href="#洞穴神话" class="headerlink" title="洞穴神话"></a>洞穴神话</h4><blockquote><p>假设有些人住在地下的洞穴中。他们背向洞口，坐在地上，手脚都被绑着，因此他们只能看到洞穴的后壁。后壁上是外界事物的投影。他们自出生以来就像 这样坐着，因此他们认为世间唯一存在的便只有这些影子了。再假设有一个穴居人设法挣脱了他的锁链，他转向背后，这将是他生平第一次看到色彩与清楚的形体。他看到了真正的动物与花朵，而不是洞穴里那些贫乏的影子。他原本大可以从此奔向乡间，为自己新获的自由而欢欣雀跃，但他却想到那些仍然留在洞里的人。于是他回到洞中，试图说服其他的穴居人，使他们相信洞壁上那些影子只不过是“真实”事物的闪烁影像罢了。然而他们不相信他，并指着洞壁说除了他们所见的影子之外，世间再也没有其他事物了。最后，他们把那个人杀了。</p></blockquote><p>*解读方向：</p><ul><li>哲学家探索<strong>更真实</strong>的世界，追寻自然界所有现象背后的真实概念，但当他们想唤醒大众时，却在试图照亮他们追寻真知的道路上遭到杀害（如苏格拉底）</li><li>黑暗洞穴与外在世界的关系就像是自然世界的形式与理型世界的关系，自然世界与鲜明清楚的理型世界相比下显得黑暗而平淡</li></ul><blockquote><p>同样的，一张漂亮女孩的照片也不是单调无趣的，但再怎么说它也 只是一张照片而已。</p></blockquote><p>*PS：我知道你（zxy）会看，多给我发点你的照片呗，如果你没发的话，就说明看得不认真哦</p><h4 id="理想国"><a href="#理想国" class="headerlink" title="理想国"></a>理想国</h4><p>乌托邦就是理想国，柏拉图认为这个国度应该由哲学家来治理，他用人体的构造来解释这个国家，惟有人体三部分协调运作时，个人才能达到“和谐”或“美德”的境界</p><div class="table-container"><table><thead><tr><th style="text-align:center">身体</th><th style="text-align:center">灵魂</th><th style="text-align:center">美德</th><th style="text-align:center">国家</th></tr></thead><tbody><tr><td style="text-align:center">头部</td><td style="text-align:center">理性</td><td style="text-align:center">智慧</td><td style="text-align:center">统治者</td></tr><tr><td style="text-align:center">胸部</td><td style="text-align:center">意志</td><td style="text-align:center">勇气</td><td style="text-align:center">战士</td></tr><tr><td style="text-align:center">腹部</td><td style="text-align:center">欲望</td><td style="text-align:center">自制</td><td style="text-align:center">工匠</td></tr></tbody></table></div><p>女人只要受到和男人一样的训练，而且毋需生育、持家的话，也会拥有和男人不相上下的理性思考能力</p><p>*进步性很大，超越时代的想法！</p><h3 id="亚里士多德"><a href="#亚里士多德" class="headerlink" title="亚里士多德"></a>亚里士多德</h3><blockquote><p>一位希望澄清我们观念的严谨的逻辑学家</p></blockquote><p>在这里，亚里士多德要与柏拉图形成对照</p><div class="table-container"><table><thead><tr><th style="text-align:center">亚里士多德</th><th style="text-align:center">柏拉图</th></tr></thead><tbody><tr><td style="text-align:center">使用理性与感官</td><td style="text-align:center">只使用理性</td></tr><tr><td style="text-align:center">“理型”就是事物的特征，是我们自己的概念</td><td style="text-align:center">“理型”构建事物，存在于另一个世界</td></tr><tr><td style="text-align:center">真实世界中最高层次的事物是用<strong>感官察觉</strong>的事物</td><td style="text-align:center">现实世界中最高层次的事物是用<strong>理性思索</strong>的事物</td></tr><tr><td style="text-align:center">人类灵魂中存在的事物纯粹只是自然事物的影子</td><td style="text-align:center">一切事物纯粹只是更高层次的概念世界(以及灵魂)中那些事物的影子</td></tr><tr><td style="text-align:center">自己感官未曾经验过的事物就不可能有意识</td><td style="text-align:center">不先存在于理型世界中的事物就不可能出现在自然界中</td></tr></tbody></table></div><p>亚里士多德认为</p><ul><li>我们所拥有的每一种想法与意念都是透过 我们看到、听到的事物而进入我们的意识。不过我们也具有与生俱来的理性，因此天生就能够组织所有的感官印象，并且将它们加以整理与分类</li><li>具有理性正是人最大的特征，不过在我们的感官经验到各种事物之前，我们的理性是完全真空的。因此人并没有天生的“观念”</li><li>实在界是由各种本身的<strong>形式</strong>与<strong>质料</strong>和谐一致的事物所组成的。“质料”是事物组成的材料，“形式”则是每一件事物的个别特征</li><li>自然界的每一件事物都可能实现或达成某一个特定的“形式”</li><li>一件事物的“形式”不但说明了这件事物的潜能，也说明了它的极限</li></ul><h4 id="目的因"><a href="#目的因" class="headerlink" title="目的因"></a>目的因</h4><p>自然界发生的事情有四种原因：</p><ul><li>质料因</li><li>主动因</li><li>形式因</li><li>目的因</li></ul><p>这里只有引用例子了</p><p>天为什么会下雨?</p><p>“质料因”：在空气冷却时湿气(云层)正好在那儿</p><p>“主动因”：湿气冷却</p><p>“形式因”：水的“形式”(或天性)会降落地面</p><p>“目的因”：植物和动物需要雨水才能生长</p><h4 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h4><p>人类如何区别世间事物时，强调了“形式”与 “质料”的差别</p><h4 id="自然的层级"><a href="#自然的层级" class="headerlink" title="自然的层级"></a>自然的层级</h4><p>亚理斯多德猜想地球上所有的活动乃是受到各星球运转的影响。不过，这些星球必定是受到某种力量的操控才能运转,这就是上帝的位置，他不动，但却是宇宙各星球乃至自然界各种活动的“目的因”</p><p><img data-src="https://s3.ax1x.com/2021/02/14/yyZv6J.jpg" alt="1"></p><h4 id="伦理学"><a href="#伦理学" class="headerlink" title="伦理学"></a>伦理学</h4><p>快乐的三种形式</p><ul><li>过享乐的生活</li><li>做一个自由而负责的公民</li><li>做一个思想家与哲学家</li></ul><p>人要同时达到这三个标准才能找到幸福与满足，任何一种形式的不平衡都是令人无法接受的。</p><h4 id="政治学"><a href="#政治学" class="headerlink" title="政治学"></a>政治学</h4><p>三种良好的政治制度</p><ul><li>君主制</li><li>贵族政治</li><li>民主政治</li></ul><h4 id="对女人的看法（错误看法）"><a href="#对女人的看法（错误看法）" class="headerlink" title="对女人的看法（错误看法）"></a>对女人的看法（错误看法）</h4><p>女性时“未完成的男人”</p><p>男人提供“形式”，而女人则仅贡献“质料”</p><p><strong>启示</strong>：</p><ul><li>亚理士多德对妇女与儿童的生活大概没有多少实际的经验</li><li>如果我们任由男人主宰哲学与科学的领域的话，可能发生何等的错误</li></ul><h2 id="希腊文化"><a href="#希腊文化" class="headerlink" title="希腊文化"></a>希腊文化</h2><blockquote><p>一丝火花</p></blockquote><p>希腊文化：亚历山大（公元前三五六 ~ 公元前三二三年）打赢了 对波斯人的最后一场决定性的战役，更重要的是，他征服各地的 结果使得埃及、东方(远至印度)的文明与希腊的文明得以结合在 一起。在人类的历史上，这是一个新纪元的开始。一个新文明诞生了。在这个文明中，希腊的文化与希腊的语言扮演了主导的角色。 这段时期维持了大约三百年，被称为“希腊文化”</p><p>特点：</p><ul><li>国与国、文化与文化之间的界线泯灭</li><li>人生哲学影响的地区与 范围已经比过去扩大许多</li><li>众多古国原有宗教信仰的交互 影响之下，新的宗教兴起</li><li>充满了宗教质疑、文化解体与悲观主义</li></ul><p>关心问题：</p><ul><li>何谓真正的幸福以及如何获致这种幸福</li><li>人的伦理与道德</li><li>找寻人类最佳的生、死之道</li></ul><h4 id="四个学派"><a href="#四个学派" class="headerlink" title="四个学派"></a>四个学派</h4><h5 id="犬儒学派（木桶哲学家）"><a href="#犬儒学派（木桶哲学家）" class="headerlink" title="犬儒学派（木桶哲学家）"></a>犬儒学派（木桶哲学家）</h5><blockquote><p>这些东西中有太多是我根本不需要的啊!</p></blockquote><p>他们相信：</p><ul><li>真正的幸福不是建立在外在环境的优势上,真正幸福的人不依赖这些稍纵即逝的东西。同时，由于幸福不是由这类福祉构成的，因此每一个人都可以获致幸福，更重要的是， 一旦获得了这种幸福，就不可能失去它 </li><li>人们毋需担心自己的健康，不应该因生老病死 而苦恼，也不必担心别人的痛苦而让自己活受罪</li></ul><p>今天的犬儒主义：对人类真诚的轻蔑不信，暗含对别人的痛苦无动于衷的态度与行为</p><h5 id="斯多葛学派"><a href="#斯多葛学派" class="headerlink" title="斯多葛学派"></a>斯多葛学派</h5><blockquote><p>人不能沉溺于物质上的享受 </p></blockquote><p>犬儒学派促进了斯多葛学派的发展。后者在公元三百年左右兴起于雅典。 它的创始人是季诺</p><p>他们相信：</p><ul><li>每一个人都是宇宙常识的一小部分，每一个人都像是一个“小宇宙”，乃是“大宇宙”的缩影。</li><li>宇宙间有公理存在，亦即所谓“神明的律法”。 由于此一神明律法是建立在亘古长存的人类理性与宇宙理性之上，因此不会随时空而改变</li><li>全体人类(包括奴隶在内)都受到神明律法的管辖。在他们眼中，当时各国的法律条文只不过是模仿大自然法则的一些不完美法条罢了</li><li>否认个人与宇宙有别，不认为“精神” 与“物质”之间有任何冲突</li><li>“民胞物与”的精神，关心政治</li><li>所有的自然现象，如生病与死亡，都只是遵守大自然不变的法则罢了，因此人必须学习接受自己的命运</li></ul><p>一元论：宇宙间只有一个大自然</p><p>二元论：柏拉图的理型的世界</p><p>人本主义：主张以个人为人类生活重心的哲学</p><blockquote><p>对人类而言，人是神圣的</p></blockquote><p>斯多葛式的冷静：不会感情用事</p><h5 id="伊比鸠鲁学派（花园哲学家）"><a href="#伊比鸠鲁学派（花园哲学家）" class="headerlink" title="伊比鸠鲁学派（花园哲学家）"></a>伊比鸠鲁学派（花园哲学家）</h5><blockquote><p>人生至善之事乃是享乐,至恶之事乃是受苦</p></blockquote><p>他们相信：</p><ul><li>考量一个行动是否有乐趣时，必须同时斟酌它可能带来的副作用</li><li>在追求较短暂的快乐时，必须考虑是否另 有其他方式可以获致更大、更持久或更强烈的快乐</li><li>“乐趣”并不一定指感官上的快乐，若要活得快乐，必须遵守古希腊人自我规范、节制与平和等原则</li></ul><p>四种药草</p><ul><li>神不足惧</li><li>死不足忧</li><li>祸苦易忍</li><li>福乐易求</li></ul><p>拓展音乐：《仙儿》——二手玫瑰</p><p>今天的伊壁鸠鲁：已具有贬意，被人们用来形容那些专门追求享乐的人</p><h5 id="新柏拉图派"><a href="#新柏拉图派" class="headerlink" title="新柏拉图派"></a>新柏拉图派</h5><blockquote><p>宇宙间万事万物都是一 体，因为上帝存在于万事万物之中</p></blockquote><p>代表人物：普罗汀</p><p>他们相信：</p><ul><li>灵魂受到“上帝”的神圣之光的照耀，而物质则位于并不真正存在的黑暗世界，至于自然界的形式则微微受到神圣之光的照射</li><li>万物一体</li></ul><blockquote><p>真实世界就像这样一堆野火。发出熊熊火光的是 “上帝”，火光照射不到的黑暗之处则是构成人与动物的冷冷的物质。最接近上帝的是那些永恒的观念。它们是所有造物据以做成的根本形式。而人的灵魂则是那飞散的“火花”。大自然的每一 处或多或少都受到这神圣之光的照耀。我们在所有的生物中都可 以见到这种光，就连一朵玫瑰或一株风铃草也不例外。离上帝最远的则是那些泥土、水与石头。</p></blockquote><h5 id="神秘主义"><a href="#神秘主义" class="headerlink" title="神秘主义"></a>神秘主义</h5><p>神秘经验：一种与上帝或“天地之心”合而为一的体验</p><blockquote><p>过去，当我的自我存在时，我感觉不到上帝。如今我感觉到上帝的存在，自我就消失了</p><p>每一滴水流入海洋后，就成为海洋。同样的，当灵魂终于上升时，则成为上帝</p></blockquote><p>神秘主义者也许必须透过“净化与启蒙”才能与上帝交流。其方式包括过着简朴的生活以及练习静坐。之后，也许有一天他们可以达到目 标，并宣称:“我就是上帝。”</p><h2 id="历史补习"><a href="#历史补习" class="headerlink" title="历史补习"></a>历史补习</h2><h3 id="基督教"><a href="#基督教" class="headerlink" title="基督教"></a>基督教</h3><h4 id="两种文化"><a href="#两种文化" class="headerlink" title="两种文化"></a>两种文化</h4><blockquote><p>避免在真空中漂浮的唯一方式</p></blockquote><p>在这一章，贾德介绍了新教的历史，并且强调了历史的重要性</p><blockquote><p>不能汲取三千年历史经验的人没有未来可言</p></blockquote><h5 id="印欧民族"><a href="#印欧民族" class="headerlink" title="印欧民族"></a>印欧民族</h5><p>印欧民族：所有使用印欧语言的民族与文化，包括所有的欧洲国家，除了那些讲菲诺攸格里克语族语言(包括斯堪地那维亚半岛最北端的拉普兰语、芬兰语、爱沙尼 亚语和匈牙利语)或巴斯克语的民族之外。除此之外，印度和伊朗地区的大多数语言也属于印欧语系</p><p>特点：</p><ul><li>多神论：相信宇宙间有许多天神</li><li>各分支有相近的思想模式</li><li>希望能够“洞察”世界的历史</li><li>视觉是最重要的感官</li><li><strong>循环</strong>的思想</li></ul><blockquote><p>历史是循环的<br>有“灵魂转生”或“生命轮回”的观念</p></blockquote><h5 id="闪族文化"><a href="#闪族文化" class="headerlink" title="闪族文化"></a>闪族文化</h5><p>闪族人源自阿拉伯半岛，不 过他们后来同样也迁徙到世界各地。两千多年来，这些犹太人一 直过着离乡背井的生活。透过基督教与回教，闪族文化(历史与宗教)的影响遍及各地。</p><p>特点：</p><ul><li>一神论：相信宇宙只有一个神</li><li>强调上帝在历史过程中扮演的角色</li><li>听觉是最重要器官</li><li>禁止制作神的雕像</li><li>强调上帝与造物之间的距离</li><li><strong>直线</strong>似的思想</li></ul><blockquote><p>历史是一条直线<br>偏重祈祷，布道与研究圣经</p></blockquote><p>耶路撒冷是犹太教，基督教，与伊斯兰教共同的重要宗教中心</p><h4 id="以色列"><a href="#以色列" class="headerlink" title="以色列"></a>以色列</h4><blockquote><p>人类对上帝的反抗是贯穿整部圣经的主题</p></blockquote><p>圣经的两种结局<br>末日预言：上帝已因以色列不守约而发怒，总有一天最后的审判会降临<br>救赎预言：上帝将拯救少数的子民，让他们过上繁荣的生活</p><h4 id="耶稣"><a href="#耶稣" class="headerlink" title="耶稣"></a>耶稣</h4><blockquote><p>赋予一个古老的战争口号崭新而宽广的意义</p></blockquote><p>耶稣宣称每个人都可以得到上帝的拯救与赦免，他传道时经常提到“天国”，但意义更加宽广</p><blockquote><p>“天国”就是爱你的邻居、同情病弱穷困者，并宽恕犯错之人</p></blockquote><p>耶稣还指出，没有人能获得上帝的怜悯，人们不能拯救自己。他要求人们遵守的严格的道德规范不仅显示上帝的旨意，也显示在上帝眼中，没有人是正直的，主的恩典无涯，但唯有祈祷，才能得到宽恕</p><h4 id="保罗"><a href="#保罗" class="headerlink" title="保罗"></a>保罗</h4><blockquote><p>若死人不复活，我们就吃吃喝喝吧！因为明天要死了。(哥林多前书 15:32)</p></blockquote><p>秉持着这种信念，早期的基督徒开始传扬相信耶稣基督即可得救的“福音”。他们宣称，在耶稣居间努力之下，“天国”即将实现。他们想使全世界归于基督的名下。 保罗到访雅典，引起了希腊文化与基督教救赎的教义的冲突。他四处传教，在许多重要的希腊罗马城市成立了基督教会，在之后，整个希腊文化地区都成为基督教的世界</p><p>保罗对基督教的贡献不仅是做一个传教士而已，他对基督教的教会也有很大的影响。因为当时的教徒普遍需要灵性上的指引。</p><h4 id="教义"><a href="#教义" class="headerlink" title="教义"></a>教义</h4><p>上帝与以色列订的“旧约”已经由耶稣代表上帝与人类订的“新约”所取代</p><p>为了显示与其他宗教有别，也为了防止教会内部分裂，基督教会认为有必要提出一套简明扼要的教义。因此他们写成了第一部《使徒信经》，总结基督徒教义的中心“信条”或主要教义</p><blockquote><p>耶稣是完全的人，完全的神</p></blockquote><p>上帝已经变成了人，耶稣不是一位“半人半神”（当时希腊与地中海东岸的许多宗教都相信宇宙有此类“半人半神”的存在），教会宣称耶稣乃是“完全的神，完全的人”</p><h2 id="中世纪"><a href="#中世纪" class="headerlink" title="中世纪"></a>中世纪</h2><blockquote><p>当哲学与神学交融</p></blockquote><p>中世纪指的是界于两个时代之间的一个时期。这个名词是在文艺复兴时期出现的,这个时期又被称为‘黑暗时代’，因为它是古代与文艺复兴时期之间笼罩欧洲的漫长的‘一千年的夜晚’</p><p>现在的中世纪（medievel）： 过度权威、缺乏弹性的事物，具有贬意 </p><p>影响</p><ul><li>各项体制萌芽成长的时期（学校建立）</li><li>许多民族在这段时间内相继建国，拥有自己的城市、公民、民俗音乐与民俗故事</li><li>基督教与古代北欧风俗结合</li><li>以基督教文化来统一欧洲</li><li>在大多数时间，罗马一直是基督教的首府</li><li>//坏的一面</li><li>人性本恶深入人心</li><li>上帝是一切事物的出发点</li><li>过度迷信理性思考的重要性</li></ul><p>古罗马帝国却逐渐分裂成三种不同的文化</p><ul><li>西边的罗马天主教文化:在西欧的拉丁式的基督文化，以罗马为首都，新柏拉图派哲学</li><li>东边的东罗马帝国文化:东欧是希腊式的基督文化，以君士坦丁堡（拜占庭）为首都，柏拉图哲学</li><li>南边的阿拉伯文化：伊斯兰教将麦加、麦地那、耶路撒冷与巴格达视为‘圣城’，亚里士多德的哲学</li></ul><p>探讨问题：</p><p>我们是否一定要相信基督教的启示?</p><p>我们能否借助理性来探索基督教的真理?</p><p>希腊哲学家与圣经的记载有何关系?</p><p>圣经与理性之间有抵触吗?</p><p>信仰与知识是可以相容的?</p><h3 id="圣奥古斯丁"><a href="#圣奥古斯丁" class="headerlink" title="圣奥古斯丁"></a>圣奥古斯丁</h3><blockquote><p>一位信奉新柏拉图派哲学的主教</p></blockquote><p>他生于公元三五四年的一个北非小镇 。他死于四三零年。在他的一生中我们可以看到古代末期到中世纪初期的变迁</p><p>圣奥古斯丁将柏拉图‘基督教化’</p><p><strong>基督教化</strong>：将哲学家的观念，用一种不至于对基督教教义造成威胁的方式加以诠释</p><p>他有一段时间信摩尼教</p><blockquote><p>那是古代末期很典型的一个教派，一半是宗教，一半是哲学。他们宣称宇宙由善与恶、光与暗、精 神与物质等二元的事物所组成。人类可运用精神来超脱于物质世 界之上，并借此为灵魂的救赎做好准备</p></blockquote><p>他全心思考着恶从何而来。有一段时间 他受到斯多葛派哲学的影响。斯多葛派认为，善与恶之间并没有明显的分界。他成为基督徒在先，但他更倾向于新柏拉图派的哲学，他在其间发现了神圣的大自然整体存在的概念</p><p>基督教与理型的冲突：</p><p>理型的世界永远存在，无始无终，基督教义则是上帝创造了世界</p><p>圣奥古斯丁的解释：</p><p>上帝创造世界之前，“理型就在神的心中”</p><p>思想</p><ul><li>与其他许多教会领袖是努力将希腊与犹太思想融合在一起</li><li>邪恶是来自于人类的不服从</li></ul><blockquote><p>善的意念是上帝的事功，恶的意念是远离上帝的 事功</p></blockquote><ul><li>主张上帝与世界之间有一道不可跨越的距离</li><li>上帝将决定一切，救赎或是受罚</li><li>为了使人类获得启蒙，也为了摧毁邪恶，历史是有必要存在的 </li></ul><blockquote><p>神以其先知先觉导引人类的历史，从亚当一直到世界末日。历史就像 一个人从童年逐渐成长、衰老的故事</p></blockquote><h3 id="间隔的四百年"><a href="#间隔的四百年" class="headerlink" title="间隔的四百年"></a>间隔的四百年</h3><p>公元八百年，学校开始成立了。</p><p>第十世纪，修道院所办的学校垄断了所有教育工作。</p><p>第十二世纪，最早的几所大学出现，几座宏伟的歌德式大教堂在此时建成。西班牙的阿拉伯人在整个中世纪期间维系了亚里士多德的传统。从十二世纪末起，阿拉伯学者陆续在各王公贵族的邀请下抵达意大利北部。许多亚理斯多德的著作因此传扬开来，并且被人从希腊文与阿拉伯文译成拉丁文。此举使得人们对于自然 科学重新燃起兴趣，并为基督教教义与希腊哲学的关系注入了新 生命。在科学方面，亚理斯多德的理论此时显然又再度受到重视</p><h3 id="圣多玛斯"><a href="#圣多玛斯" class="headerlink" title="圣多玛斯"></a>圣多玛斯</h3><blockquote><p>对了一部分并不等于错</p></blockquote><p>一位神学家，当时，哲学与神学并没有明显的区分。</p><p>将亚里士多德加以‘基督教化’</p><p>思想：</p><ul><li>哲学、理性这两者和基督教的启示与信仰之间并不一定有冲突</li><li>两条接近上帝的途径</li><li><ul><li>信仰和基督的启示</li><li>理性和感官</li></ul></li><li>人们可以透过理性的思考与感官的证据推知一部分的真理（两个理论可能不会冲突）</li><li>女人只有在身体的构造上比不上男人,但在灵魂上则与男人相当 </li></ul><p>苏菲亚’或‘苏菲’（智慧）：上帝女性化的那一面‘</p><p>席德佳（1098-1179）：住在莱茵河的修女，虽为女人，却身兼传教士，作家，医生，植物学家，与博学者等几种头衔。她算是中世纪妇女比男人实际，有科学头脑现象的一个代表，她并没有关于女权的详细看法，不过她曾宣称，在幻象中看到了衣着华贵的苏菲亚——上帝的母性形象——而且她的身份就是一种女权的证明</p><h2 id="文艺复兴"><a href="#文艺复兴" class="headerlink" title="文艺复兴"></a>文艺复兴</h2><blockquote><p>啊！藏在凡俗身躯的神明子孙哪</p></blockquote><p>重新发现了人与大自然的价值</p><p>在圣多玛斯的时代过后不久，原本团结一致的天主教文化开始出现分裂的现象。哲学与科学逐渐脱离教会的神学，使得宗教生活与理性思考之间的关系变得比较自由，新的科学方法 与新的宗教狂热于是逐渐产生</p><blockquote><p>我们不能让自己被历史的浪潮冲走，总得有人收拾河岸边 留下来的东西</p><p>生命本来就是悲伤而严肃的。我们来到这个美好的世界里，彼此相逢，彼此问候，并结伴同游一段短暂的时间。 然后我们就失去了对方，并且莫名其妙就消失了，就像我们突然莫名其妙的来到世上一般</p></blockquote><p>文艺复兴：十四世纪末期起文化蓬勃发展的现象，他也有“重生”的意思，指的是古代艺术与文化的再生，它也是 ‘人道主义的复兴’，一切又重新以人为中心</p><p>背景：</p><ul><li>罗盘、火器与印刷术</li><li>自给自足式的经济逐渐转型为货币经济体系</li><li>文艺复兴时期的中产阶级开始脱离封建贵族与教会的势力</li><li>改变了大家对人类的看法。 文艺复兴时期的人文主义精神使得大家对人本身和人的价值重新产生了信心</li><li>人们开始认为一定要受教育才可以成为一个人</li></ul><blockquote><p>马生下来就是马，但人要做为一个人，还需要靠后天慢慢的培养</p></blockquote><h3 id="人文主义"><a href="#人文主义" class="headerlink" title="人文主义"></a>人文主义</h3><p>人文主义以人为出发点，文艺复兴时期的人文主义更强调个人主义</p><blockquote><p>我们不仅是人，更是独一无二的个体</p></blockquote><p>阶段目标：打破所有的藩篱与禁忌（与早期宁静、中庸与节制不同）</p><p>特点：</p><ul><li>泛神论流行</li></ul><blockquote><p>上帝也存在于他所创造的事物中</p></blockquote><ul><li>大自然是神圣的</li><li>视重建罗马为文化责任</li><li>研究大自然现象必须以观察、经验与实验为基础（实证法）</li><li>把科学观察所得的结果用准确的数学辞汇表达出来</li></ul><blockquote><p>大自然这本书是用数学的语言写的</p></blockquote><ul><li>人们开始认真干预大自然并加以控制（注意科技的两面性！）</li></ul><blockquote><p>人类就不再只是创造物的一部分，而开始干预自然，并按照自己的心意来改造大自然</p></blockquote><h3 id="新世界观"><a href="#新世界观" class="headerlink" title="新世界观"></a>新世界观</h3><blockquote><p>我们将上帝放在那里呢？</p></blockquote><p>新世界观使人类失去他们在造物中的一部分特殊地位，于是遭遇到教会的强大阻力</p><p>人对自我的观念受到巨大冲击</p><blockquote><p>随着新世界观的产生，我们每一个人所处的地位也变得比以前更加重要</p></blockquote><h4 id="伽利略"><a href="#伽利略" class="headerlink" title="伽利略"></a>伽利略</h4><p>惯性定律</p><p>力是改变问题运动的原因</p><p>伽利略行星定律</p><h4 id="牛顿"><a href="#牛顿" class="headerlink" title="牛顿"></a>牛顿</h4><p>自然法则的存在正足以证明宇宙间确有一位伟大、万能的上帝</p><p>万有引力定律</p><p>行星轨道定律</p><p>牛顿三定律</p><h3 id="宗教改革"><a href="#宗教改革" class="headerlink" title="宗教改革"></a>宗教改革</h3><p>马丁路德</p><p>人们并不需要教会或教士居中代祷才能获得上帝的赦免</p><p>摒斥了教会中许多从中世纪起就形成 的宗教习惯与教条</p><p>应该让每一个人都读得懂圣经，成为自己的教士</p><blockquote><p>人只能透过信仰得救，这是‘无法用金钱交换的</p></blockquote><p>唯有透过上帝的恩典，人类才能免于罪孽。因为罪恶的代价就是死亡</p><h2 id="巴洛克时期"><a href="#巴洛克时期" class="headerlink" title="巴洛克时期"></a>巴洛克时期</h2><blockquote><p>宛如梦中的事物</p></blockquote><p>巴洛克：形状不规则的珍珠</p><p>特色：在各种相互矛盾的对比中呈现的张力</p><blockquote><p>Carpediem:把握今天</p><p>Mementomori:不要忘记你将会死亡</p></blockquote><h3 id="艺术"><a href="#艺术" class="headerlink" title="艺术"></a>艺术</h3><p>浮华而矫饰，很多人意识到世事无常，明白我们周遭的美好事物终有一天会消殒凋零</p><p>达斯:</p><p>一方面着意描写人世间的现实生活，另一方面则强调唯有上帝才是永恒不变的</p><blockquote><p>上帝仍为上帝，即便天地尽荒<br>上帝仍为上帝，纵使人人皆亡</p></blockquote><h3 id="戏剧"><a href="#戏剧" class="headerlink" title="戏剧"></a>戏剧</h3><p>莎士比亚：</p><p>演戏的人在舞台上创造一种假象，最终目的就是要显示舞台上的戏剧不过是一 种假象而已，戏剧因此成为整个人生的缩影</p><blockquote><p>All the world’s a stage,<br>And all the men and women merely players;<br>They have their exits and their entrances;<br>And one man in his time plays many parts.</p></blockquote><p>周遭的美好事物终有一天会消殒凋零</p><blockquote><p>Life’s but a walking shadow,<br>a poor player,<br>that struts and frets his hour upon the stage,<br>and then is heard no more;<br>it is a tale told by an idiot,full of sound and fury,signifying nothing</p></blockquote><p>我们的本质原来也和梦一般， 短短的一生就在睡梦中度过</p><blockquote><p><em>to</em> <em>be</em> <em>or</em> <em>not</em> <em>to</em> <em>be,that’s</em> <em>a</em> <strong>question</strong></p></blockquote><h3 id="哲学"><a href="#哲学" class="headerlink" title="哲学"></a>哲学</h3><p><strong>理想主义</strong>：生命基本上具有一种崇高的特质</p><p><strong>唯物主义</strong>：相信生命中所有的自然现象都是从肉体感官而来</p><p>受到各种新科学的影响，唯物主义日益盛行，牛顿成就了机械论</p><p><strong>机械论</strong>:在理论上，所有自然界的变化都可以用数学精确地计算</p><p><strong>决定论</strong>：所有事情都命中注定</p><p>拉普拉斯的极端机械论：</p><blockquote><p>如果某些神祇在某个时刻能知道所有物质分子的位置，则没有任何事情是他们所不知道的， 同时他们也能够看到所有过去及未来的事情</p></blockquote><p>世间没有所谓自由意志，因为一切事物都是机械过程的产物</p><p>莱布尼兹：</p><blockquote><p>物质与精神不同的地方在于物质可以不断被分割成更小的单位，但灵魂却连分割成一半也不可能</p></blockquote><h3 id="笛卡尔"><a href="#笛卡尔" class="headerlink" title="笛卡尔"></a>笛卡尔</h3><blockquote><p>他希望清除工地所有的瓦砾</p></blockquote><p>现代哲学之父</p><p>像苏格拉底一样，相信唯有透过理性才能获得确实的知识</p><p>不能完全相信古籍的记载，也不能完全信任感官的知觉</p><p><strong>理性主义</strong>：相信理性是通往知识的唯一途径</p><p>哲学体系：一套从基础开始创立，企图为所有重要的哲学性问题寻求解释的哲学</p><p>《方法论》：哲学家必须使用特定的方法来解决哲学问题</p><p>目标：在生命的本质这个问题上获得某种确定的答案</p><p>思想：</p><ul><li>‘精神’与‘物质’有明显的不同</li><li>除非能够清楚分明地知道某件事情是真实的，否则不能够认为它为真</li><li>哲学应该从最简单的到最复杂的</li><li>用‘数学方法’来进行哲学性的思考</li><li>在建构自己的哲学体系之前，必须先挣脱前人理论的影响</li><li>人的怀疑必定是真实的，因为怀疑必然是在思考，而由于思考，那么这个个体必定是个会思考的存在者</li></ul><blockquote><p>我思故我在</p><p>Cogito ergosum</p></blockquote><p>总结：</p><ul><li>人是会思考的生物</li><li>上帝是存在的</li><li>宇宙有一个外在的真实世界</li></ul><h4 id="完美的实体"><a href="#完美的实体" class="headerlink" title="完美的实体"></a>完美的实体</h4><p>包含它必然存在的事实</p><p>完美实体的概念不可能来自一个本身并不完美的人，所以它必定来自那个完美实体本身，也就是上帝</p><h4 id="二元论"><a href="#二元论" class="headerlink" title="二元论"></a>二元论</h4><p>宇宙间共有两种不同形式的真实世界(或‘实体’)，本体都来自上帝，因为唯有上帝本身是独立存在的，不隶属任何事物</p><p>思想或‘灵魂’：灵魂纯粹是属于意识，不占空间，因此也不能再分解为更小的单位</p><p>‘扩延’或物质：物质则纯粹是扩延，会占空间，因 此可以一再被分解为更小的单位，但却没有意识</p><p>灵魂存在于身体内一天，它就与会透过“松果腺”与人脑连结</p><p>‘灵魂’与‘物质’就在松果腺内时时相互作用。因此，灵魂可能会时常受到与身体需要有关的种种感觉与冲动的影响。不过，灵魂也能够挣脱这种‘原始’冲动的控制， 而独立于身体之运作。它的目标是使理性获得掌控权</p><p>对笛卡尔而言，理性就是灵魂（即使身体残缺，1+1=2不会改变）。诸如欲望、憎恨 等原始的冲动与感情与身体功能关系较为密切，所以与扩延的真实世界的关系也较为密切</p><h3 id="斯宾诺莎"><a href="#斯宾诺莎" class="headerlink" title="斯宾诺莎"></a>斯宾诺莎</h3><blockquote><p>上帝不是一个傀儡戏师傅</p></blockquote><p>思想：</p><ul><li>基督教与犹太教之所以流传至今完全是透过严格的教条与外在的仪式</li></ul><blockquote><p>否认整本圣经都是受到上帝启示的结果，人们需要对圣经进行批判性阅读</p></blockquote><ul><li>大力鼓吹言论自由与宗教上的宽容精神</li><li>用永恒的观点看待世界</li><li>泛神论者</li><li>用伦理学来显示人类的生命乃是遵守大自然普遍的法则，人们唯有挣脱自我的感觉与冲动的束缚才能获得满足与快乐</li></ul><h4 id="一元论"><a href="#一元论" class="headerlink" title="一元论"></a>一元论</h4><p>既存的每样事物都可以被分解、简化成一个 ‘实体’</p><p>所有的物质和发生的事物都是上帝或自然的表现方式，人们的每一种思绪也都是上帝或自然的的思绪，因为万事万物都是一体的。宇宙间只有一个 上帝、一个自然或一个实体</p><h4 id="自然法则"><a href="#自然法则" class="headerlink" title="自然法则"></a>自然法则</h4><p>上帝是透过自然法则来主宰世界。因此上帝(或自然)是每一件事情的‘内在原因’。这表示物质世界中发生的每一 件事情都有其必要性。史宾诺莎对物质(或自然)世界采取决定论者的观点（类似斯多葛学派）</p><p>人们无法获得自由是因为受到内在潜能与外在机会的左右</p><p>唯有上帝或自然可以表现自由、‘非偶然’的过程。人可以争取自由，以便去除外在的束缚，但他永远不可能获得‘自由意志’</p><p>每一件事的发生都有其必然性，都有关联，都是一体的。人们应该以一种全然接纳的观点来理解世间的事物。只有这样，人们才能获得真正的幸福与满足</p><h2 id="经验主义"><a href="#经验主义" class="headerlink" title="经验主义"></a>经验主义</h2><p>理性主义思想是十七世纪哲学的特征，这种思想早在中世纪时就打下了深厚的基础。柏拉图与苏格拉底也有这种倾向。但在十八世纪时，理性主义思想受到的批判日益严格。 </p><p>经验主义：如果不是透过感官的体验，人们的心中将一无所有，经验主义者从感官的经验获取一切关于世界的知识</p><blockquote><p>我们的心灵中所有的事物都是 先透过感官而来的</p></blockquote><p>人们在看到这个世界之前对它并没有任何固有的概念或观念，如果人们有一个观念或概念是和人们所经验的事实完全不相关的，则它将是一个虚假的观念，现在需要把所有空洞不实的观念淘汰</p><h3 id="洛克"><a href="#洛克" class="headerlink" title="洛克"></a>洛克</h3><blockquote><p>赤裸、空虚一如教师来到教室前的黑板</p></blockquote><p>经验主义与理性主义的结合</p><p>两个问题：</p><ul><li>概念从何而来? </li><li>是否可以信赖感官的经验?</li></ul><p>思想：</p><ul><li>人们所有的思想和观念都反映人们曾看过、听过的事物，在接受事物前，人们的心灵就像一个透明的板（Tabularasa）</li><li>人们不应该接受无法回溯到一种单一感觉的知识</li><li>感官的性质分为‘主要’与‘次要’</li></ul><blockquote><p>‘主要性质’：扩延世界的特质，如重量、运动和数量。可以确定感官已经将它们加以客观地再现。</p><p>‘次要性质’：因人而异的性质</p></blockquote><ul><li>人类凭理性就自然而然可以知道上帝的存在</li><li>倡导‘政权分立’原则（人民所选出的代表握有立法权，法院握有司法权，政府握有 行政权）</li><li>女人服从男人的现象是受到男人操纵的结果，因此是可以加以改变的（两性平等支持者）</li></ul><p>复合概念：将人们的许多感觉叠在一起的概念（色声香味触法）</p><h3 id="休谟"><a href="#休谟" class="headerlink" title="休谟"></a>休谟</h3><blockquote><p>将它付之一炬</p></blockquote><p>思想：</p><ul><li><p>研究哲学应该以以日常生活为起点</p></li><li><p>人应回到对世界有自发性感觉的状态</p></li></ul><h4 id="不可知论"><a href="#不可知论" class="headerlink" title="不可知论"></a>不可知论</h4><p>人有一个变化的自我</p><blockquote><p>世间复合之物必然衰朽，应勤勉修持以求己身之解脱</p></blockquote><p>用人类的理性来证明宗教信仰是不可能的</p><p>休谟只接受他用感官所认知的事物，因为除此之外，一切事情都有待证实。基督教或奇迹都属于信仰的范畴，与知识或理性无关。在休姆哲学的影响下，信仰与知识的关系终于被切断了</p><h4 id="习惯性期待"><a href="#习惯性期待" class="headerlink" title="习惯性期待"></a>习惯性期待</h4><blockquote><p>一 件事情发生后另外一件事情也会发生’的想法，只是人们心中的一种期待，并不是事物的本质，而期待心理乃是与习惯有关</p></blockquote><p>推介故事：</p><p>罗素的火鸡科学家</p><blockquote><p>农场主理论：一个农场里有一群火鸡，农场主每天中午十一点来给它们喂食。火鸡中的一名科学家观察这个现象，一直观察了近一年都没有例外，于是它也发现了自己宇宙中的伟大定律：“每天上午十一点，就有食物降临。”它在感恩节早晨向火鸡们公布了这个定律，但这天上午十一点食物没有降临，农场主进来把它们都捉去杀了。</p></blockquote><p>假设我们所处的世界是鸡的世界，我们生存在农场里，那么我们所有的一切的理论都是不复存在的。</p><blockquote><p>最无情、最冷血的决定，有时是经过最冷静的筹划的</p></blockquote><h3 id="柏克莱"><a href="#柏克莱" class="headerlink" title="柏克莱"></a>柏克莱</h3><blockquote><p>宛如燃烧的恒星旁一颗眩晕的行星</p></blockquote><p>世间的事物的确是像人们所感知的那样，但它们并非事物</p><p>人有‘灵’。他认为我们所有的观念都有一个我 们意识不到的成因。但这个成因不是物质的，而是精神性的。</p><p>世间只有另外一个意志或灵可能形成造就这个‘形体’世界的诸般概念。这个灵是‘万物中的万物’的成因，也是‘所有事物存在之处’</p><p>人们对于时间与空间的认知可能只是由人们的心灵所虚构的产物而已</p><h2 id="启蒙"><a href="#启蒙" class="headerlink" title="启蒙"></a>启蒙</h2><blockquote><p>从指针的技术到铸造大炮的方法</p></blockquote><p>思想</p><ul><li>反抗权威</li></ul><p>哲学家受到英国自然科学（牛顿），英国哲学（洛克）的 启 发 。导致他们对于传统的权威愈来愈不能认同，认为有必要对前人所谓的真理抱持怀疑的态度。</p><blockquote><p>每一个人都必须自行找寻问题的答案</p></blockquote><ul><li>理性主义</li></ul><p>理性时代：大多数启蒙时期的哲学家和苏格拉底及斯多葛学派等古代的人文主义者一样，坚决相信人的理性。哲学家们相信他们也有责任依据人不变的理性为道德、宗教、伦理奠定基础</p><ul><li>启蒙运动</li></ul><p>一旦人的理性发达、知识普及之后， 人性就会有很大的进步，所有非理性的行为与无知的做法迟早都 会被‘文明’的人性取代</p><ul><li><p>文化上的乐观态度</p></li><li><p>回归自然</p></li></ul><p>自然=理性，人如果能处于‘自然’的状态就是好的，可惜他们却往往受到文明的败坏。</p><p>宗教也必须与‘自然’的理性和谐共存</p><ul><li>自然宗教</li></ul><p>宗教上所有不合理的教条或教义都有必要去除</p><p>自然神论：相信上帝在万古之前创造了世界，但从此以后就没有再现身。上帝成了一个‘至高的存在’，只透过大 自然与自然法则向人类显现，绝不会透过任何‘超自然’的方式现身（亚里士多德，上帝是‘目的因’或‘最初的推动者’）</p><ul><li>人权</li></ul><p>个人在宗教、道德与政治方面的思想与言论自由有待争取。积极提倡 废除奴隶制度并以更合乎人性的方式对待罪犯</p><p>反对言论管制、争取新闻自由</p><p>女权：</p><p>妇女也和男人一样有‘自 然权利’</p><p>妇女团体除了要求和男人享有一样的参政权之外，也要求修改婚姻法，并提高妇女的社会地位</p><p>女权问题最终只是当时政治斗争的一个工具</p><h3 id="康德"><a href="#康德" class="headerlink" title="康德"></a>康德</h3><blockquote><p>头上闪烁的星空与心中的道德规范</p></blockquote><p>世上有两种哲学家。一种是不断找寻他对哲学问题的答案 的人。另一种则是精通哲学史，但并不一定曾建立自己的哲学理论的人，而康德两者都是</p><p>人们对于世界的观念会受到人类心灵中某些状况的影响</p><p>人们被时间与空间所限制，它们是人类感知的方式，但它们并不是物质世界的属性，在这种情况下，心灵影响了人类理解世界</p><h4 id="因果律"><a href="#因果律" class="headerlink" title="因果律"></a>因果律</h4><p>不仅心灵会顺应事物的形状，事物也会顺应心灵</p><p>休谟：人们无法证明因果律（我们只是因为受到习惯的驱策，才会以 为各种自然现象之间有所关联）</p><p>康德：正因为人类的理性可以感知事物的因果， 因此因果律是绝对的，而且永恒不变的</p><p>‘<strong>事物本身</strong>’(Das Ding an sich)与‘<strong>我眼中的事物</strong>’（Das Ding für mich）是不一样的</p><h4 id="信仰"><a href="#信仰" class="headerlink" title="信仰"></a>信仰</h4><p>无论理性或经验都无法确实证明上帝的存在，只有信仰才能填补这个空缺</p><h3 id="伦理学-1"><a href="#伦理学-1" class="headerlink" title="伦理学"></a>伦理学</h3><p>是与非、对与错之间是有分别的</p><p>辨别是非的能力就像理性的其他特质一样是与生俱来的</p><p>‘无上命令’：每个人内心与生俱来的道德法则，告诉你在所有的情况下你应该有的行为</p><blockquote><p>尊重每一个人的本身，而不要将他当成达成某种外在目的的手段</p></blockquote><p>只有当人们确知自己纯粹是为了遵守道德法则而行动时，这样的行为才是自由的</p><blockquote><p>我们可能会成为各种事物的奴隶，我们甚至可能成为我们的自我中心思想的奴隶。独立与自由正是我们超脱自我的欲望与恶念的方法</p></blockquote><p>康德指引了一条道路，使哲学走出了理性主义与经验主义之间的僵局</p><blockquote><p>有两件事物我愈是思考愈觉神奇，心中也愈充 满敬畏，那就是我头顶上的星空与我内心的道德准则。它们向我 印证:上帝在我头顶，亦在我心中</p></blockquote><h2 id="浪漫主义"><a href="#浪漫主义" class="headerlink" title="浪漫主义"></a>浪漫主义</h2><blockquote><p>神秘之路通向内心</p></blockquote><p>从十八世纪末开始，一直持续到十九世纪中期</p><p>浪漫主义是欧洲人士最后一次对生命的‘共同进路’</p><p>艺术家可以随心所欲地运用他的认知能力使自己更接近那‘无以言喻’的经验（上帝）</p><p>特征：</p><ul><li>渴望遥不可及的事物的心态</li></ul><blockquote><p>万一你睡着了呢?万一你在睡眠时做梦了呢?万一你在梦 中到了天堂，在那儿采下了一朵奇异而美丽的花?万一你醒来时， 花儿正在手中?啊，那时你要如何呢?</p></blockquote><ul><li>向往大自然和大自然的神秘</li></ul><p>浪漫主义骨子里是古老宇宙意识的一种复兴（将大自然看作一个整体）</p><p>浪漫主义主要兴盛于都市地区。十九世纪的前半在德国等 许多欧洲地区，都可见到兴盛蓬勃的都市文化。最典型的浪漫主义者都是年轻人，他们有一种明显的反中产阶级的生活态度</p><blockquote><p>闲散是天才的理想，懒惰是浪漫主义者的美德</p></blockquote><p>拜伦式的英雄:无论在生活上还是艺术上都特立独行、多愁善感、叛逆成性的人</p><h3 id="谢林"><a href="#谢林" class="headerlink" title="谢林"></a>谢林</h3><blockquote><p>心灵与物质合而为一</p></blockquote><p>大自然的全部（人的灵魂与物质世界）都是一个‘绝对存在’（或世界精神)的表现</p><p>自然与精神事实上都是同一事物的显现</p><blockquote><p>物质乃是沉睡中的智性</p></blockquote><p>人们无论在大自然中或自我的心灵中都可发现世界精神(大自然都存在于人的心中，如果人能进入自己的心中，将可以接近世界的神秘)</p><blockquote><p>神秘之路通往内心</p></blockquote><p>须认同别的文化才能理解这些文化</p><p>‘普世性的浪漫主义‘：满脑子自然、世界灵魂与艺术天才的浪漫主义者</p><p>‘民族浪漫主义’，关注‘民族’的历史、‘民族’的 语言和‘民族’的文化。他们将发展视为一个不断开展它的内在潜能的有机体，就像自然与历史一样</p><blockquote><p>告诉我你住哪里，我就可以告诉你你是谁</p></blockquote><h3 id="艺术-1"><a href="#艺术-1" class="headerlink" title="艺术"></a>艺术</h3><p>有机体将‘普世性的浪漫主义‘与‘民族浪漫主义’相连</p><blockquote><p>浪漫主义者把植物和国家都当成活生生的有机体。因此一首诗也是一个有生命的有机体，语言也是一个有机体，甚至整个物质世界都 被看成有机体</p></blockquote><p> ‘世界灵魂’是成是一个‘自我’,而这个自我在梦般的情境下创造了世间的一切，正如作家创造自己世界中的各种角色</p><blockquote><p>没有人会在第五幕演到一半的时候死掉</p></blockquote><h2 id="黑格尔"><a href="#黑格尔" class="headerlink" title="黑格尔"></a>黑格尔</h2><blockquote><p>可以站得住脚的就是有道理的</p></blockquote><p>黑格尔几乎统一了所有曾在浪漫主义时期出现的理念，并且加以发展</p><p>‘世界精神’或‘世界理性’:人类理念的总和，因为惟独人类有‘精神’可言（人类的生命、思想与文化）</p><p>人类的理性之外没有任何‘真理’存在。所有的知识都是人类的知识</p><p>因为人类认知的基础代代不同 ，因此世间并没有‘永恒的真理’，没有‘永久的理性’，哲学唯一可以确切掌握的一个定点就是历史</p><p>不过事情的对错由历史的情况而定</p><p>理性是动态的 ，是一种过程</p><p>由于新的事物总是后来才加上去的，因此理性是‘渐进的’ （人类的知识不断在扩张，在进步）</p><p>‘世界精神’正朝着愈来愈了解自己的方向发展</p><h3 id="辩证过程"><a href="#辩证过程" class="headerlink" title="辩证过程"></a>辩证过程</h3><p>正反合：</p><p>每一种新思想通常以前人的旧思想为基础，另外一种和它抵触的思想在新思想之后出现产生一种紧张状态，但另外一种融合了两种思想长处的思想会消除这种紧张状态</p><div class="table-container"><table><thead><tr><th style="text-align:center">正</th><th style="text-align:center">反</th><th style="text-align:center">合</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><p>黑格尔的‘理性’有一种动态的逻辑。既然‘事实’的特性就是会有相反的事物，因此要描述事实就必须同样描述与事实相反的事物</p><p>不是个人造就语言，而是语言造就个人</p><p>个人不能发现自我，只有世界精神能够发现自我</p><p>世界精神意识到自我的<strong>三个阶段</strong>：</p><p>主观精神：世界精神意识到自我在个人中的存在</p><p>客观精神：在家庭、社会与国家之中达到更高的意识</p><p>在‘绝对的精神’中达到最高形式的自我实现。这 个‘绝对的精神’就是艺术、宗教和哲学。其中又以哲学为最高形式的知识，因为，在哲学中，世界精神思考它对历史的冲击，因此世界精神是最先在哲学中发现了它的自我。</p><blockquote><p>哲学是世界精神的镜子。”</p></blockquote><h3 id="男女观念"><a href="#男女观念" class="headerlink" title="男女观念"></a>男女观念</h3><p>男女之不同犹如植物与动物之不同。动物具有较多的男人性格，而植物则较具女人性格，因为女人的发展基本上是属于静态的。在本质上她是一个犹豫不决的感情体系。</p><p>女人主要是透过生活(而非读书)吸收思想，借此获得某种教育 </p><p>男人必须勤练技能、苦心研读才能在社会上争取一席之地</p><h2 id="存在哲学与行动哲学"><a href="#存在哲学与行动哲学" class="headerlink" title="存在哲学与行动哲学"></a>存在哲学与行动哲学</h2><blockquote><p>直到现在为止，哲学家只诠释了世界，可是重点在于他们应该去改变这个世界</p></blockquote><h3 id="祁克果"><a href="#祁克果" class="headerlink" title="祁克果"></a>祁克果</h3><blockquote><p>欧洲正迈向破产的地步</p></blockquote><p>个人主义：与其找寻那唯一的真理，不如去找寻那些对个人生命具有意义的真理</p><p>在与宗教有关的问题上，信仰是最重要的因素</p><blockquote><p>如果我能客观地抓住上帝，我就不会相信他了。但正因为我无法如此，所以我必须信他。如果我希望保守我的信心，我必须时时紧握住客观的不确定性，以便让我即使在七万吋深的海上，仍能保有我的信心</p></blockquote><p>*逻辑悖论</p><blockquote><p>真理永远是少数</p></blockquote><p>假设80%的人认为真理掌握在少数人手中。如果真理确实掌握在少数人手中，那另外20%是对的，真理不掌握在少数人手中；</p><p>假设真理掌握在多数人手中，那么那80%是对的，真理掌握在少数人手中。所以在这个前提下，真理是否掌握在少数人手中是无法回答的。</p><h4 id="人生三阶段"><a href="#人生三阶段" class="headerlink" title="人生三阶段"></a>人生三阶段</h4><p><strong>美感阶段</strong></p><p>只是为了现在而活，会抓住每个享乐的机会。只要是美的、令人满足的、令人愉快的，就是好的。 是自己的欲望与情绪的奴隶</p><p>很容易有焦虑或恐怖和空虚的感受（通往下一阶段的表现）</p><p>是否要从美感阶段跃升到道德阶段或宗教阶段， 必须是发自个人内心的决定</p><p><strong>道德阶段</strong></p><p>对生命抱持认真的态度，并且始终一贯的做一些符合道德的抉择</p><p><strong>宗教阶段</strong></p><blockquote><p>跳进上帝张开的双臂</p></blockquote><h3 id="马克思"><a href="#马克思" class="headerlink" title="马克思"></a>马克思</h3><blockquote><p>在欧洲游荡的幽灵</p></blockquote><p>共产主义</p><p>历史唯物主义者</p><p>物质的变化才是推动历史的力量</p><blockquote><p>‘精神关系’不会造成物质的改变,而是物质的改变造成了新的‘精神关系’</p></blockquote><p>促成改变并因此把历史向前推进的，其实是一个社会的经济力量</p><h4 id="社会的基础"><a href="#社会的基础" class="headerlink" title="社会的基础"></a>社会的基础</h4><p>物质、经济和社会方面的条件</p><p>与它上层结构之间有一种互动关系</p><p>三个阶层：</p><p>最‘根本’ ：‘生产条件’（可以利用的自然条件与资源）</p><p>‘生产工具’：设备、工具和机器</p><p>‘生产关系‘：分工的方式和财产的分配</p><p>一个社会的政治情况与意识形态是由它的生产模式决定的</p><p><strong>支撑</strong></p><p>‘物质条件’支持着一个社会里的每一种思想和看法</p><p>一个社会的是非标准主要由社会里的统治阶级来决定的</p><p><strong>上层构造</strong></p><p>社会思想、政治制度、法律规章、宗教、道德、艺术、哲学和科学等</p><h4 id="阶级斗争"><a href="#阶级斗争" class="headerlink" title="阶级斗争"></a>阶级斗争</h4><p>在历史的各个阶段，社会的两个主要阶级之间都会有冲突存在</p><p>工作方式与心灵互相影响</p><blockquote><p>在资本主义制度下，工人是为别人工作。因此他的劳动对 他而言是外在的事物，是不属于他的。工人与作的工作之间有了 隔阂，同时与自我也有了隔阂。他与他自己的现实脱节了。马克思用黑格尔的话来说，就是工人被疏离了</p></blockquote><p>共产主义者不屑隐藏他们的看法与目标。他们公开宣称他们的目标只能透过强行推翻现有的社会情况而达成</p><blockquote><p>让统治阶级因共产主义革命而颤抖吧!无产阶级身上只有锁链，因此无惧任何损失，却可借此赢得全世界。各国的劳动工人们，团结起来吧!</p></blockquote><p>销售价值-生产成本=剩余价值（利润）</p><p>资本主义的生产方式本身有若干内在的矛盾</p><blockquote><p>资本主义私有财产制的丧钟已经响了</p></blockquote><p>马克思称此为无产阶级专政。但在这段过渡期后， 无产阶级专政会被一个‘不分阶段的社会’所取代。在这个社会 当中，生产工具是由‘众人’，也就是人民所拥有。在这种社会中， 国家的政策是‘各尽其才，各取所需’。这时劳动成果属于劳工， 资本主义的疏离现象也就到此终止</p><h2 id="自然主义"><a href="#自然主义" class="headerlink" title="自然主义"></a>自然主义</h2><p>除了大自然和感官世界之外，别无其他真实事物</p><p>上文的马克思也属于自然主义</p><h3 id="达尔文"><a href="#达尔文" class="headerlink" title="达尔文"></a>达尔文</h3><blockquote><p>满载基因航行过生命的一艘小船</p></blockquote><p>呃，生物课自己去看</p><p>进化论</p><p>物竞天择</p><p>遗传与突变</p><p>生命源起</p><h2 id="弗洛伊德"><a href="#弗洛伊德" class="headerlink" title="弗洛伊德"></a>弗洛伊德</h2><blockquote><p>他内心出现那股令人讨厌的自大的冲动</p></blockquote><p>精神分析：描述一般人的内心，并治疗神经和心理失调现象</p><p>人和环境之间不断有一种紧张关系存在。这种紧张关系(也就是冲突)尤其存在于他的驱策力、需要和社会的要求之间</p><p>不理性的冲动可能反映基本需求</p><p>本我：婴儿直接而毫不感到羞耻的方式来满足我们身体与心灵的需求</p><p>自我：调整自己的需求以适应环境（ 调整‘快乐原则’以迁就‘现实原则’）</p><p>超我：世界的道德规范</p><h3 id="潜意识"><a href="#潜意识" class="headerlink" title="潜意识"></a>潜意识</h3><p>人类的意识只是他的心灵中的一小部分</p><p>‘潜意识：被‘压抑’的经验或想法 （通常因为超我）</p><p>‘压抑’：意识将潜意识阻挡的行为</p><p>‘合理化’：自己不愿意承认，也不愿意告诉别人做某事的真正动机，因为这个动机是让人无法接受的</p><p>‘投射’：把内心试图压抑的特点转移到别人身上</p><p>让意识与潜意识之间的门半遮半掩</p><h3 id="解梦"><a href="#解梦" class="headerlink" title="解梦"></a>解梦</h3><p>洞悉潜意识的最佳途径就是透过梦境</p><p>做梦并不是偶然，是潜意识试图透过梦和意识沟通</p><p>梦境是以伪装的方式满足人被压抑的愿望</p><p>超现实主义</p><blockquote><p>艺术应该来自潜意识，艺术家应该从他的梦境中自由撷取灵感，并努力迈向‘超越现实’的境界，以跨越梦与现实之间的界限。同时艺术家也有必要挣脱意识的管制，尽情挥洒文字和意象</p></blockquote><p>对艺术，不要让理性或思维压制潜意识的表达是很重要的</p><h2 id="存在主义"><a href="#存在主义" class="headerlink" title="存在主义"></a>存在主义</h2><blockquote><p>上帝已死</p></blockquote><p>存在主义就是人文主义（存在主义者以人类为出发点）</p><p>一个东西只是在己而人类却是为己，因此人的存在并不等于东西的存在</p><p>存在先于本质（人并没有这种天生的‘本性’，因此人必须创造自我。他必须创造自己的本性或‘本质’，因为他的本性并非是一生下来就固定的）</p><p>人的自由是一种诅咒</p><blockquote><p>人是注定要受自由之苦的。因为他并没有创造自己，但却是自由的。因为一旦被扔进这个世界里来，他就必须为他所做的每一件事负责</p></blockquote><p>虚无主义:没有一件事情有意义，怎样都可以</p><p>存在主义：生命应该有意义，存在的意义就是要创造自己的生命</p><p>推介作品：《进击的巨人》，《局外人》</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;看哲学发展史其实也是在看人类认知的深度，毕竟哲学家走在认知的前沿&lt;/p&gt;
&lt;p&gt;在《苏菲的世界》中，贾德运用了大量的比喻与举例，使哲学变得简单易懂&lt;/p&gt;
&lt;p&gt;并且插入了许多历史知识的补充，涉及面广大&lt;/p&gt;
&lt;p&gt;但是这种方法不适合于我想要的笔记整理，不够精简&lt;/p&gt;
&lt;p&gt;&lt;del&gt;两万字的整理真TM精简&lt;/del&gt;（2.14回首）&lt;/p&gt;
&lt;p&gt;所以根据自己的理解大概写了一些笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/MaverickTang/Zh-Blog/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="哲学" scheme="https://github.com/MaverickTang/Zh-Blog/tags/%E5%93%B2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>摄影术</title>
    <link href="https://github.com/MaverickTang/Zh-Blog/2021/02/08/Photography/"/>
    <id>https://github.com/MaverickTang/Zh-Blog/2021/02/08/Photography/</id>
    <published>2021-02-08T15:59:30.000Z</published>
    <updated>2021-02-09T03:10:08.382Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h1><ul><li>笔记</li><li>相机</li><li>咖啡？？？</li></ul><a id="more"></a><h1 id="相机结构"><a href="#相机结构" class="headerlink" title="相机结构"></a>相机结构</h1><p>较为枯燥，建议看完摄影原理后跳到曝光版块</p><h2 id="摄影原理"><a href="#摄影原理" class="headerlink" title="摄影原理"></a>摄影原理</h2><p>摄影的<strong>核心</strong>在于<strong>捕捉光线</strong></p><p><img data-src="https://s3.ax1x.com/2021/02/09/ya6GY4.jpg" alt="1"></p><h2 id="相机结构-1"><a href="#相机结构-1" class="headerlink" title="相机结构"></a>相机结构</h2><p>机身由 外壳、按键、屏幕&取景器、处理芯片以及传感器 CMOS（CCD） 等组成</p><p><img data-src="https://s3.ax1x.com/2021/02/09/ya6ste.jpg" alt="15"></p><p>外壳的作用：保护支撑、舒服握持、美观设计等</p><p>按键和屏幕触控则是控制相机、调整参数、更换模式等作用</p><p>取景器和屏幕就是能让使用者看到要拍摄的画面、参数等信息</p><p>而说到传感器，目前最多采用的传感器是 CMOS，全称是</p><blockquote><p>Complementary Metal-Oxide Semiconductor</p></blockquote><p>中文翻译过来就是<strong>【互补金属氧化物半导体】</strong>，但是半导体接受光照产生的电流太微弱不足进行模数转换，所以要通过放大才能进行 ADC 转换，转换完成后再储存到内存卡里，就成了照片（视频）。</p><p>镜头主要包括多个镜片、对焦马达、光圈叶片以及对焦环和变焦环，此外还有像开关、接口、卡口、标识、镜头防抖呀、UV镜呀…</p><p><strong>像素</strong>决定了<strong>相机分辨率的最大值</strong>，约等于相机最大拍摄分辨率的乘积，那么分辨率又是什么呢分辨率就是图片的纵向像素点 X 横向像素点，通俗说 就是<strong>图像的大小尺寸</strong>。</p><p><strong>色深</strong>：全名色位深度，是用bit数表示的色彩数目单位，一般来说色深值越大，能表现的色彩就越多（分层更多）。</p><p><strong>感光度</strong>：这是一个很重要的参数，感光度源于以前胶片相机的胶片的感光度，数码相机的感光度也是一个意思，就是CMOS对光的感知强度（敏感度），但数码相机 ISO 提高的是信噪比，将整张照片提亮。</p><h1 id="曝光Exposure"><a href="#曝光Exposure" class="headerlink" title="曝光Exposure"></a>曝光Exposure</h1><h2 id="Defination"><a href="#Defination" class="headerlink" title="Defination"></a>Defination</h2><p><strong>曝光（Exposure）</strong>：图像的明亮程度。</p><p>照片太暗：曝光不足（underexpose）</p><p>照片太亮：过度曝光（OverExposed）</p><h2 id="曝光的调整"><a href="#曝光的调整" class="headerlink" title="曝光的调整"></a>曝光的调整</h2><h3 id="光圈-Aperture"><a href="#光圈-Aperture" class="headerlink" title="光圈 Aperture"></a>光圈 Aperture</h3><h4 id="Defination-1"><a href="#Defination-1" class="headerlink" title="Defination"></a>Defination</h4><p>光圈（通光孔径IRIS）：相机里让光线进入的孔</p><p>增大光圈，图像更亮（较暗环境下使用）</p><p>缩小光圈，图像更暗（较亮环境下使用）</p><h4 id="调整方法"><a href="#调整方法" class="headerlink" title="调整方法"></a>调整方法</h4><p>光圈档位/光圈值：表示光圈大小程度</p><p>F-Stop Scale</p><p><img data-src="https://s3.ax1x.com/2021/02/09/ya6JfJ.jpg" alt="3"></p><ul><li><p>F后数值越小=光圈越大</p></li><li><p>不是所有镜头都能调节成任意光圈大小</p><p>景深：照片里有多少是成像清晰的</p><p>大光圈有更浅的景深（更小范围的图像是清晰的）</p><p>背景虚化：增大光圈（降低F值）</p></li></ul><h3 id="快门速度-Shutter-Speed"><a href="#快门速度-Shutter-Speed" class="headerlink" title="快门速度 Shutter Speed"></a>快门速度 Shutter Speed</h3><p>快门阻挡相机调整器受到光线照射</p><p>数值形式：</p><p>1/100S，1/30S等</p><p>快门速度越快（数值越小），光线进入越少，照片更暗</p><p>运动模糊：快门速度调快来应对</p><p>相机抖动：举起相机时手部的抖动引起（超过1/80（新手</p><h3 id="感光度ISO"><a href="#感光度ISO" class="headerlink" title="感光度ISO"></a>感光度ISO</h3><p>ISO：相机传感器对光的灵敏度</p><p>ISO通过数码方法增加或减少曝光</p><p>增加IOS增加曝光</p><p>减少ISO减少曝光</p><p><strong>ISO越高，噪点与颗粒越多（建议调低）</strong></p><h3 id="曝光三角"><a href="#曝光三角" class="headerlink" title="曝光三角"></a>曝光三角</h3><h3 id><a href="#" class="headerlink" title></a><img data-src="https://s3.ax1x.com/2021/02/09/ya68kF.jpg" alt="2"></h3><p>TIP：</p><p>从基础感光度100开始，调节光圈档位，然后调节快门速度“F-STOP”来补偿曝光</p><p>曝光在模特面部使得背景过亮/过曝</p><p>不能用调大光圈增加通光量时再调高ISO</p><h1 id="进阶技巧（摄影）"><a href="#进阶技巧（摄影）" class="headerlink" title="进阶技巧（摄影）"></a>进阶技巧（摄影）</h1><h2 id="测光计曝光"><a href="#测光计曝光" class="headerlink" title="测光计曝光"></a>测光计曝光</h2><p>调整使曝光计指向零（不强求</p><p><img data-src="https://s3.ax1x.com/2021/02/09/ya6tp9.jpg" alt="4"></p><h3 id="三种测光模式："><a href="#三种测光模式：" class="headerlink" title="三种测光模式："></a>三种测光模式：</h3><p>点测光：只对一个焦点的光进行测量（通常是取景器的中心点，拍摄<strong>大场景中高对比的小物体</strong>时使用</p><p>中心测光：读取画幅中点与周围环境的曝光值（忽略远角与焦点，当<strong>主题在取景器中心</strong>（如肖像）时</p><p>矩阵测光（综合评价测光）：照相机会从取景器的所有区域中读取曝光（在<strong>多样化照明情况</strong>下使用</p><h2 id="曝光补偿"><a href="#曝光补偿" class="headerlink" title="曝光补偿"></a>曝光补偿</h2><p>曝光模式</p><p>自动：调整以适应正常曝光，自动设置ISO，快门，光圈，闪光灯（LOW ONE</p><p>MODE：</p><p>PASM（Program， Aperture Priority，Shutter Priority，Manual Priority）</p><p>P 程序模式：基于选择的测光类型选择最佳的快门与光圈（半自动模式，调整一个，自动调整另一个）</p><p>A 光圈优先模式：曝光补偿会改变快门速度（选择光圈，调整快门，确切知道要用的<strong>光圈档位</strong>时使用）</p><p>S 快门优先模式：曝光补偿会改变光圈大小（选择快门与ISO，调整光圈，拍摄<strong>运动</strong>或需要<strong>特定快门</strong>时）</p><p>M 手动模式：自己调整（调整曝光补偿值（过曝（变亮）向上调）</p><h2 id="动态范围"><a href="#动态范围" class="headerlink" title="动态范围"></a>动态范围</h2><p>照片中暗光与亮光间的比值</p><p><strong>低动态范围=低对比度</strong></p><p>相机传感器越好，动态范围越高</p><p>用RAW模式拍摄以取得更多信息和动态范围</p><h2 id="HDR与包围曝光"><a href="#HDR与包围曝光" class="headerlink" title="HDR与包围曝光"></a>HDR与包围曝光</h2><p>HDR（高动态范围拍摄）：拍摄同一事物的不同曝光度然后合成一张照片</p><p>用HDR或多重曝光时借助三脚架使构图一致</p><p>TIP：拍两张或多张照片，包括亮点曝光与隐形曝光</p><h2 id="直方图-HISTOGRAM"><a href="#直方图-HISTOGRAM" class="headerlink" title="直方图 HISTOGRAM"></a>直方图 HISTOGRAM</h2><p>能显示画面各部分曝光水平的图表</p><p><img data-src="https://s3.ax1x.com/2021/02/09/ya6NlR.jpg" alt="5"></p><p>左侧：阴影</p><p>右侧：高光</p><p>柱的高低表程度</p><p>目标：中间部分基本均匀</p><h2 id="曝光档位"><a href="#曝光档位" class="headerlink" title="曝光档位"></a>曝光档位</h2><p>光的档位时衡量进入相机的光线的一种方式</p><p>增加一档=光线加倍</p><p>降低一档=光线减少一半</p><p>Ex.</p><p> F/2 to F/2.8 = -1 Stop</p><p>1/30 to 1/15 = +1 Stop</p><p>400 ISO to 200 ISO = -1 Stop</p><h1 id="构图-Composition"><a href="#构图-Composition" class="headerlink" title="构图 Composition"></a>构图 Composition</h1><p>照片画面里的内容</p><h2 id="三分法"><a href="#三分法" class="headerlink" title="三分法"></a>三分法</h2><p><img data-src="https://s3.ax1x.com/2021/02/09/ya6aOx.jpg" alt="6"></p><p>近空高度：头顶到上边边框的距离</p><p>把拍摄物放在取景框中部靠左或靠右（辅助线）</p><p>Ex. 将地平线放在上下横线处</p><h2 id="负空间"><a href="#负空间" class="headerlink" title="负空间"></a>负空间</h2><p>拍摄物体时没有过多的干扰物（通常在画面中<strong>很小</strong>）</p><p>正空间：被主体占据的空间</p><p>使用负空间可以使摄影主题看上去很渺小甚至更突出</p><p><img data-src="https://s3.ax1x.com/2021/02/09/ya6wm6.jpg" alt="7"></p><h2 id="引导线"><a href="#引导线" class="headerlink" title="引导线"></a>引导线</h2><p>将观众注意力集中到主要拍摄对象上</p><p>引导线：能吸引观众注意力的线条</p><p>在框架内取景</p><p>将主体放在窗户，门内，或通过这些事物拍摄远处的东西</p><p><img data-src="https://s3.ax1x.com/2021/02/09/ya600K.jpg" alt="8"></p><p><img data-src="https://s3.ax1x.com/2021/02/09/ya6rkD.jpg" alt="9"></p><p><img data-src="https://s3.ax1x.com/2021/02/09/ya6U61.jpg" alt="9"></p><h2 id="对称与平衡"><a href="#对称与平衡" class="headerlink" title="对称与平衡"></a>对称与平衡</h2><p><strong>平衡</strong>：可以指视觉上水平，画面里物体数量和大小的平衡</p><p>达到平衡使人宁静</p><p>拍出线条倾斜又扭曲，物体大小不一可以使画面更有动态感</p><p><strong>对称</strong>：照片的顶，底部或左右两边看上去都很相似</p><p>比如湖面等</p><h2 id="透视与视角"><a href="#透视与视角" class="headerlink" title="透视与视角"></a>透视与视角</h2><p><strong>焦距</strong>：相机传感器到镜头光学中心（光线聚集处）之间的距离</p><p><strong>焦距越小=镜头越宽</strong></p><p>小于35mm的镜头属于广角镜头</p><p>大于70mm的镜头属于远摄镜头</p><p>70-300mm=普通远摄镜头</p><p>300+mm超级远摄镜头</p><p>远摄镜头可以是定焦或变焦</p><p><strong>广角</strong>镜头适合<strong>广阔区域与风景</strong></p><p><strong>远摄</strong>镜头适合<strong>细节与特写</strong></p><p><strong>透视</strong>：远小近大</p><p>夸大透视：特写物体显得比远处物体更大</p><p><img data-src="https://s3.ax1x.com/2021/02/09/ya6yfH.jpg" alt="12"></p><p>远摄镜头可以<strong>压缩透视感</strong>，让物体显得挨得更近（显得更大）</p><p>变换<strong>视角</strong>，不要总是将相机举到齐眼处拍摄</p><p>让人看起来更有力量感：仰视</p><p>让人看起来更亲和：俯视</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>当主体是重点时，尽量清除背景中的干扰因素</p><h3 id="检查项目"><a href="#检查项目" class="headerlink" title="检查项目"></a>检查项目</h3><ul><li>检查背景中是否有干扰性的光点或者亮色</li><li>检查是否有线条从主体延伸出来</li><li>关注地平线（不要把地平线安排在人物头部所在位置）</li><li>用空间与焦距区分主体与背景</li><li>Ex. 背景虚化：减少背景中的干扰，强调拍摄主题</li><li>注意背景对主体叙事上的作用</li></ul><h1 id="进阶技巧（构图）"><a href="#进阶技巧（构图）" class="headerlink" title="进阶技巧（构图）"></a>进阶技巧（构图）</h1><h2 id="聚焦与景深"><a href="#聚焦与景深" class="headerlink" title="聚焦与景深"></a>聚焦与景深</h2><h3 id="景深-Depth-of-the-field"><a href="#景深-Depth-of-the-field" class="headerlink" title="景深 Depth of the field"></a>景深 Depth of the field</h3><p>景深：照片中具有可接受的清晰度或焦点的区域</p><p>浅景深：背景虚化</p><p><strong>景深较浅=呈现空间较小</strong></p><p>深景深在大的范围内聚焦</p><h4 id="影响景深的三件事"><a href="#影响景深的三件事" class="headerlink" title="影响景深的三件事"></a>影响景深的三件事</h4><p>光圈：光圈越大（数值越小） = 景深越浅</p><p>拍摄物距离：物体越近 = 景深越浅</p><p>镜头焦距：长焦镜头越长 = 景深越浅</p><h3 id="聚焦-Focus"><a href="#聚焦-Focus" class="headerlink" title="聚焦 Focus"></a>聚焦 Focus</h3><p>自动对焦：在多数情况下使用（旅行，活动</p><p>手动对焦：特定聚焦点，光线昏暗环境</p><p><img data-src="https://s3.ax1x.com/2021/02/09/ya6g1A.png" alt="13"></p><p>TIP：</p><p>拍人物时，聚焦于眼睛</p><p>调小光圈以更容易地对焦清晰</p><h3 id="对焦点-amp-自动对焦模式"><a href="#对焦点-amp-自动对焦模式" class="headerlink" title="对焦点&自动对焦模式"></a>对焦点&自动对焦模式</h3><p>对焦点：相机取景器中的小点，相机用它选择要对焦的对象</p><p>对焦点越多，对焦过程越快越方便</p><p>TIPS：</p><ul><li>半按快门按钮，相机开始自动对焦</li><li>相机越好，对焦点越多</li><li>很多现代相机可以面部识别确定对焦点</li></ul><p>单词自动对焦（人工智能伺服模式）：半按快门锁焦，合焦位置固定</p><p>拍背景模糊的运动照片</p><p>相机与主体同步运动，因为背景运动更快，蓑衣虚华效果会很好</p><h2 id="散景"><a href="#散景" class="headerlink" title="散景"></a>散景</h2><p>散景：模糊或模糊特性</p><p>有更多圆形叶片的光圈会产生圆形散景</p><p><img data-src="https://s3.ax1x.com/2021/02/09/ya6cpd.jpg" alt="14"></p><h2 id="取景器对焦"><a href="#取景器对焦" class="headerlink" title="取景器对焦"></a>取景器对焦</h2><p>屈光度可以调整取景器中的焦点</p><p>调节方法：</p><p>1.将相机放在三脚架或稳定平面</p><p>2.打开自动对焦模式</p><p>3.按下快门释放按钮对相机进行聚焦</p><p>4.调整屈光度直到取景器中图像正确对焦</p><h1 id="摄影风格与类型"><a href="#摄影风格与类型" class="headerlink" title="摄影风格与类型"></a>摄影风格与类型</h1><p>只选取了一些我比较感兴趣的内容，</p><h2 id="人像拍摄"><a href="#人像拍摄" class="headerlink" title="人像拍摄"></a>人像拍摄</h2><p>PS：希望有女朋友之后用得着</p><ul><li>在黄金时段拍摄（光线，尽量逆光，可以创造漂亮的微光效果</li><li>变幻构图</li><li>清理背景</li><li>准备一些姿势</li><li>拍摄严肃表情</li></ul><h2 id="长曝光"><a href="#长曝光" class="headerlink" title="长曝光"></a>长曝光</h2><ul><li>使用三脚架</li><li>购置快门遥控器</li><li>先构图</li><li>寻找动态</li><li>使用ND滤镜中灰密度镜（减少通光量，在白天摄延时</li></ul><p>白天长曝光拍摄动作很棒</p><p>夜间长曝光：</p><p>佩戴红光前照灯不会影响夜视效果，比如白光</p><p>长时间曝光时，关闭所有光源</p><p>长时间曝光后，相机需要时间处理照片</p><h2 id="弱光摄影"><a href="#弱光摄影" class="headerlink" title="弱光摄影"></a>弱光摄影</h2><p>PS：成都这种天气不好的地方可能经常用吧😂</p><p>场景：黄昏，夜晚，室内</p><ul><li>了解相机ISO最大值</li><li>了解快门速度最小值</li><li>光圈完全打开拍摄</li><li>手抖对焦</li><li>使用相机防抖功能</li></ul><h2 id="风景摄影"><a href="#风景摄影" class="headerlink" title="风景摄影"></a>风景摄影</h2><ul><li>增加景深（缩小光圈）</li><li>寻找好的焦点</li><li>选择合适镜头（11 to 35mm广角镜头）</li><li>合适时间</li><li>将地平线变直</li></ul><h2 id="运动摄影"><a href="#运动摄影" class="headerlink" title="运动摄影"></a>运动摄影</h2><ul><li>用长镜头拍摄</li><li>提高快门速度</li><li>多拍（连拍模式</li><li>站好位置</li><li>拍正面</li></ul><h2 id="微距摄影"><a href="#微距摄影" class="headerlink" title="微距摄影"></a>微距摄影</h2><p>拍摄小物品</p><p>拍摄对象在相机感光元件上看起来比其实际大小大</p><p>越靠近，越大</p><ul><li>使用微距镜头（50mm+，没有可以使用接写环来增加镜头长度</li><li>选择焦点（手动调节</li><li>使用散光灯</li><li>使用三脚架</li></ul><h2 id="街头与建筑摄影"><a href="#街头与建筑摄影" class="headerlink" title="街头与建筑摄影"></a>街头与建筑摄影</h2><ul><li>注意周围（防小偷</li><li>固定焦距</li><li>选择自己的风格（偷拍与征得同意）</li><li>寻找线条</li><li>讲故事</li></ul><h2 id="航拍摄影"><a href="#航拍摄影" class="headerlink" title="航拍摄影"></a>航拍摄影</h2><ul><li>记住基本设置与规则</li><li>选择合适位置（合法，安全，好看）</li><li>充分准备</li><li>做计划</li><li>寻找对称构图与图案构图</li><li>寻找阴影</li></ul><h2 id="夜间摄影"><a href="#夜间摄影" class="headerlink" title="夜间摄影"></a>夜间摄影</h2><ul><li>以RAW模式拍摄</li><li>三脚架</li><li>增加景深（缩小光圈）</li><li>带上手电筒</li><li>慎用高ISO</li></ul><h2 id="延时摄影"><a href="#延时摄影" class="headerlink" title="延时摄影"></a>延时摄影</h2><ul><li>一些相机装有计时器可进行内设的缩时摄影</li><li>如果没有就使用缩时定时器</li><li>三脚架</li><li>预先计算拍摄张数，摄影间隔</li><li>增加曝光时间</li><li>使用自动曝光模式</li><li>咖啡？？？</li></ul><p>时间间隔表：</p><p>1 s = 快速活动 如汽车，快速漂浮的云</p><p>1-3 s = 人流涌动 日落 日出 慢速漂浮的云</p><p>15-30 s = 星星的轨迹太阳一天的行进</p><p>30+ s = 植物生长，建筑工地 </p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>写了三天的笔记就在这了</p><p>关于后期调节照片的话可能就没有笔记了</p><p><del>因为我前期足够好</del></p><hr></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;准备材料&quot;&gt;&lt;a href=&quot;#准备材料&quot; class=&quot;headerlink&quot; title=&quot;准备材料&quot;&gt;&lt;/a&gt;准备材料&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;笔记&lt;/li&gt;
&lt;li&gt;相机&lt;/li&gt;
&lt;li&gt;咖啡？？？&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/MaverickTang/Zh-Blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="摄影" scheme="https://github.com/MaverickTang/Zh-Blog/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>寒假计划</title>
    <link href="https://github.com/MaverickTang/Zh-Blog/2021/01/28/winter-plan/"/>
    <id>https://github.com/MaverickTang/Zh-Blog/2021/01/28/winter-plan/</id>
    <published>2021-01-28T06:39:52.000Z</published>
    <updated>2021-02-10T07:59:05.657Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>寒假是时候提升自己了！！！</p><p>十八岁之前的最后一个寒假</p><p>必须要做一点成年前不做就会后悔的挑战了</p><p>本次计划分为三部分</p><p>总-段-日</p><p><del>表示已完成</del></p><a id="more"></a><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><h2 id="课内"><a href="#课内" class="headerlink" title="课内"></a>课内</h2><h3 id="语文"><a href="#语文" class="headerlink" title="语文"></a>语文</h3><p>文言文实词，虚词</p><p>素材积累</p><p>好句摘抄</p><p>阅读题练习</p><p>练字</p><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>选题题定时练</p><h4 id="大题专题训练"><a href="#大题专题训练" class="headerlink" title="大题专题训练"></a>大题专题训练</h4><p><del>三角函数的二级结论</del></p><p><del>数列的求法，求和</del></p><p>圆锥曲线（参数方程的使用）</p><p>导数的各种二级结论&方法</p><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>5篇NCE文章</p><p>练字</p><h3 id="物理"><a href="#物理" class="headerlink" title="物理"></a>物理</h3><p>知识点扫盲</p><p>实验题整理</p><h3 id="化学"><a href="#化学" class="headerlink" title="化学"></a>化学</h3><p>课堂新坐标（练习）</p><h4 id="大题专题训练-1"><a href="#大题专题训练-1" class="headerlink" title="大题专题训练"></a>大题专题训练</h4><p>工业流程</p><p>有机推断</p><h3 id="生物"><a href="#生物" class="headerlink" title="生物"></a>生物</h3><p>知识点扫盲</p><p>实验题整理</p><h2 id="课外"><a href="#课外" class="headerlink" title="课外"></a>课外</h2><h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><p>网页的微信小程序</p><p>（包括小工具（计算器，单位转换，时区计算）</p><p>微积分与机器学习基础</p><p>IOS程序开发（系统学习）</p><h3 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h3><p>花式足球</p><p>空翻</p><h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><p>血酬定理</p><p>苏菲的世界（哲学史梳理）</p><p>死亡代言人（英语）</p><h3 id="艺术（大雾"><a href="#艺术（大雾" class="headerlink" title="艺术（大雾"></a>艺术（大雾</h3><p>音乐史（自己整理</p><p>卡宏鼓</p><p><del>摄影入门</del></p><h1 id="段"><a href="#段" class="headerlink" title="段"></a>段</h1><div class="table-container"><table><thead><tr><th style="text-align:center">TIME</th><th style="text-align:center">Activity（main）</th></tr></thead><tbody><tr><td style="text-align:center">1.28—1.31</td><td style="text-align:center">数英物生作业完成+语文素材积累准备</td></tr><tr><td style="text-align:center">2.1-2.4</td><td style="text-align:center">系统学习IOS开发+微信小程序</td></tr><tr><td style="text-align:center">2.5—2.10</td><td style="text-align:center">数学物理专题整理+微积分学习</td></tr><tr><td style="text-align:center">2.11—2.12</td><td style="text-align:center">苏菲的世界+金属乐历史整理</td></tr><tr><td style="text-align:center">2.13—2.20</td><td style="text-align:center">数学化学专题整理+数学选填题定时练</td></tr><tr><td style="text-align:center">2.20—2.28</td><td style="text-align:center">留空时间</td></tr></tbody></table></div><h1 id="日"><a href="#日" class="headerlink" title="日"></a>日</h1><div class="table-container"><table><thead><tr><th style="text-align:center">TIME</th><th style="text-align:center">Activity</th></tr></thead><tbody><tr><td style="text-align:center">7:30—8:00（0.5hr）</td><td style="text-align:center">知识点巩固（主要是语文与生物</td></tr><tr><td style="text-align:center">8:30—12:30（4hr）</td><td style="text-align:center">做练习（专题），记忆知识点</td></tr><tr><td style="text-align:center">13:00—14:30（1hr30min）</td><td style="text-align:center">读书</td></tr><tr><td style="text-align:center">14:30—17:20（2hr40min）</td><td style="text-align:center">主要活动时间</td></tr><tr><td style="text-align:center">17:20—18:20</td><td style="text-align:center">锻炼/踢足球</td></tr><tr><td style="text-align:center">19:30—22:30（3hr）</td><td style="text-align:center">学习（以编程，课外学习为主）</td></tr></tbody></table></div></body></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;寒假是时候提升自己了！！！&lt;/p&gt;
&lt;p&gt;十八岁之前的最后一个寒假&lt;/p&gt;
&lt;p&gt;必须要做一点成年前不做就会后悔的挑战了&lt;/p&gt;
&lt;p&gt;本次计划分为三部分&lt;/p&gt;
&lt;p&gt;总-段-日&lt;/p&gt;
&lt;p&gt;&lt;del&gt;表示已完成&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/MaverickTang/Zh-Blog/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="-Flag" scheme="https://github.com/MaverickTang/Zh-Blog/tags/Flag/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg</title>
    <link href="https://github.com/MaverickTang/Zh-Blog/2021/01/02/ffmpeg/"/>
    <id>https://github.com/MaverickTang/Zh-Blog/2021/01/02/ffmpeg/</id>
    <published>2021-01-02T04:01:01.000Z</published>
    <updated>2021-02-08T00:01:48.808Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>2021年开年第一个博客</p><p>正好剪这个<a href="https://www.bilibili.com/video/BV1ni4y1F79U" target="_blank" rel="noopener">视频</a>的时候</p><p>需要转码（从mkv到mov）</p><p>在网上找了好多解决方案，最后就选择了这个最“程序员的”</p><p>写一篇关于这个ffmpeg小工具的吧</p><a id="more"></a><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><h2 id="PRO"><a href="#PRO" class="headerlink" title="PRO"></a>PRO</h2><p><strong>FFmpeg：Fast Forward Moving Picture Experts Group</strong></p><p><code>FFmpeg</code>是一套可以用来<code>记录</code>、<code>转换数字音频</code>、<code>视频</code>，并能将其转化为<code>流</code>的开源计算机<code>程序</code>。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多codec都是从头开发的。 ffmpeg项目由以下几部分组成: 1.ffmpeg 视频文件转换命令行工具,也支持经过实时电视卡抓取和编码成视频文件. 2.ffserver 基于HTTP、RTSP用于实时广播的多媒体服务器.也支持时间平移 3.ffplay 用 SDL和FFmpeg库开发的一个简单的媒体播放器 4.libavcodec 一个包含了所有FFmpeg音视频编解码器的库.为了保证最优性能和高可复用性,大多数编解码器从头开发的. 5.libavformat 一个包含了所有的普通音视格式的解析器和产生器的库</p><!--more--><h2 id="说人话："><a href="#说人话：" class="headerlink" title="说人话："></a>说人话：</h2><p>一个完整的，跨平台的音视频记录，转换，流传输的解决方案</p><p>具体就是帮你转换<strong>媒体的格式</strong>，<strong>播放视频</strong>，<strong>拼接视频</strong>，<strong>转换gif</strong>等</p><p>太多了不一一枚举</p><p>详细的可以跳到功能实践去看</p><p><img data-src="https://s3.ax1x.com/2021/01/02/sSGdlF.md.png" alt="ffmpeg1"></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>这里以Macos系统为主进行介绍</p><p>点击上面图片的Download<img data-src="https://s3.ax1x.com/2021/01/02/sSGwy4.png" alt="ffmpeg2"></p><p>找到苹果的图标，下载这个Static builds for macOS 64-bit（Source Code我们用不着</p><p>下载下来减压后是一个exe文件</p><p>点击运行后会打开终端，然后自行就安装完了</p><p><img data-src="https://s3.ax1x.com/2021/01/02/sSG0OJ.png" alt="ffmpeg3"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><del>不要听我瞎逼逼</del>，英语好的建议直接去<a href="https://ffmpeg.org/ffmpeg.html#toc-Synopsis" target="_blank" rel="noopener">官网</a></p><p>在前面我会介绍案例让程序员之外的人能够理解，后面就是程序内容了</p><p>希望大家各取所需</p><h2 id="大纲（Synopsis"><a href="#大纲（Synopsis" class="headerlink" title="大纲（Synopsis)"></a>大纲（Synopsis)</h2><p>ffmpeg [global_options] {[input_file_options] -i input_url} … {[output_file_options] output_url} …</p><h2 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h2><h3 id="主要参数，不必强记，结合后面的示例理解"><a href="#主要参数，不必强记，结合后面的示例理解" class="headerlink" title="主要参数，不必强记，结合后面的示例理解"></a>主要参数，不必强记，结合后面的示例理解</h3><p><code>-i</code>——设置输入档名。<br><code>-f</code>——设置输出格式。<br><code>-y</code>——若输出文件已存在时则覆盖文件。<br><code>-fs</code>——超过指定的文件大小时则结束转换。<br> <code>-ss</code>——从指定时间开始转换。<br> <code>-t</code>从-ss时间开始转换（如-ss 00:00:01.00 -t 00:00:10.00即从00:00:01.00开始到00:00:11.00）。<br><code>-title</code>——设置标题。<br><code>-timestamp</code>——设置时间戳。<br> <code>-vsync</code>——增减Frame使影音同步。</p><h3 id="视频参数"><a href="#视频参数" class="headerlink" title="视频参数"></a>视频参数</h3><p> <code>-b:v</code>——设置视频流量，默认为200Kbit/秒。（单位请引用下方注意事项）<br> <code>-r</code>——设置帧率值，默认为25。<br> <code>-s</code>——设置画面的宽与高。<br> <code>-aspect</code>——设置画面的比例。<br><code>-vn</code>——不处理视频，于仅针对声音做处理时使用。<br> <code>-vcodec( -c:v )</code>——设置视频视频编解码器，未设置时则使用与输入文件相同之编解码器。</p><h3 id="声音参数"><a href="#声音参数" class="headerlink" title="声音参数"></a>声音参数</h3><p> <code>-b:a</code>——设置每Channel（最近的SVN版为所有Channel的总合）的流量。（单位请引用下方注意事项）<br><code>-ar</code>——设置采样率。<br> <code>-ac</code>——设置声音的Channel数。<br><code>-acodec ( -c:a )</code>——设置声音编解码器，未设置时与视频相同，使用与输入文件相同之编解码器。<br> <code>-an</code>——不处理声音，于仅针对视频做处理时使用。<br> <code>-vol</code>——设置音量大小，256为标准音量。（要设置成两倍音量时则输入512，依此类推。）</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p> 以-b:v及-b:a首选项流量时，根据使用的ffmpeg版本，须注意单位会有kbits/sec与bits/sec的不同。（可用ffmpeg -h显示说明来确认单位。）<br> 例如，单位为bits/sec的情况时，欲指定流量64kbps时需输入 -b:a 64k；单位为kbits/sec的情况时则需输入 -b:a 64。<br> 以-acodec及-vcodec所指定的编解码器名称，会根据使用的ffmpeg版本而有所不同。例如使用AAC编解码器时，会有输入aac与libfaac的情况。此外，编解码器有分为仅供解码时使用与仅供编码时使用，因此一定要利用ffmpeg -formats确认输入的编解码器是否能运作。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>在这里假设输入文件都为 input.avi，并且默认路径已经在要转换的文件上</p><h3 id="直接转换视频格式"><a href="#直接转换视频格式" class="headerlink" title="直接转换视频格式"></a>直接转换视频格式</h3><p>这里直接在后面写转化后的格式以及名字就好</p><p>可以通过这个将视频转化为gif</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.avi output.mp4</span><br></pre></td></tr></tbody></table></figure><h3 id="将视频中一部分转化为gif"><a href="#将视频中一部分转化为gif" class="headerlink" title="将视频中一部分转化为gif"></a>将视频中一部分转化为gif</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 从视频中第二秒开始，截取时长为3秒的片段转化为 gif</span><br><span class="line">ffmpeg -t 3 -ss 00:00:02 -i small.mp4 small-clip.gif</span><br><span class="line">// 默认转化是中等质量模式，若要转化出高质量的 gif，可以修改比特率</span><br><span class="line">ffmpeg -i small.mp4 -b 2048k small.gif</span><br></pre></td></tr></tbody></table></figure><h3 id="加倍速播放视频"><a href="#加倍速播放视频" class="headerlink" title="加倍速播放视频"></a>加倍速播放视频</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mov -filter:v "setpts=0.5*PTS" output.mov</span><br><span class="line">//慢速就是2.0</span><br></pre></td></tr></tbody></table></figure><h3 id="定义帧率-16fps"><a href="#定义帧率-16fps" class="headerlink" title="定义帧率 16fps:"></a>定义帧率 16fps:</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mov -r 16 -filter:v "setpts=0.125*PTS" -an output.mov</span><br></pre></td></tr></tbody></table></figure><h3 id="静音视频（移除视频中的音频）"><a href="#静音视频（移除视频中的音频）" class="headerlink" title="静音视频（移除视频中的音频）"></a>静音视频（移除视频中的音频）</h3><p>-an 就是禁止音频输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mov -an mute-output.mov</span><br></pre></td></tr></tbody></table></figure><h3 id="视频提取帧"><a href="#视频提取帧" class="headerlink" title="视频提取帧"></a>视频提取帧</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将视频提取10帧</span></span><br><span class="line">ffmpeg -i index.mp4 -r <span class="number">10</span> %<span class="number">03</span>d.jpg;</span><br></pre></td></tr></tbody></table></figure><h3 id="将输出文件的视频比特率设置为64-kbit-s"><a href="#将输出文件的视频比特率设置为64-kbit-s" class="headerlink" title="将输出文件的视频比特率设置为64 kbit / s:"></a>将输出文件的视频比特率设置为64 kbit / s:</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.avi -b:v 64k -bufsize 64k output.avi</span><br></pre></td></tr></tbody></table></figure><h3 id="将输出文件的帧速率强制为24-fps"><a href="#将输出文件的帧速率强制为24-fps" class="headerlink" title="将输出文件的帧速率强制为24 fps:"></a>将输出文件的帧速率强制为24 fps:</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.avi -r 24 output.avi</span><br></pre></td></tr></tbody></table></figure><h3 id="将输入文件的帧速率（仅对原始格式有效）强制为1-fps，将输出文件的帧速率强制为24-fps"><a href="#将输入文件的帧速率（仅对原始格式有效）强制为1-fps，将输出文件的帧速率强制为24-fps" class="headerlink" title="将输入文件的帧速率（仅对原始格式有效）强制为1 fps，将输出文件的帧速率强制为24 fps:"></a>将输入文件的帧速率（仅对原始格式有效）强制为1 fps，将输出文件的帧速率强制为24 fps:</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -r 1 -i input.m2v -r 24 output.avi</span><br></pre></td></tr></tbody></table></figure><h3 id="两路-多路视频拼接，同时播放"><a href="#两路-多路视频拼接，同时播放" class="headerlink" title="两路/多路视频拼接，同时播放"></a>两路/多路视频拼接，同时播放</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input1.avi -i input2.avi -filter_complex "[0:v]pad=iw*2:ih[a];[a][1:v]overlay=w:0" -pix_fmt yuv420p -y output_result.mp4</span><br></pre></td></tr></tbody></table></figure><p><code>-filter_complex "[0:v]pad=iw*2:ih[a];[a][1:v]overlay=w:0"</code>指的是复杂滤波器的设置。其中<code>[0:v] [1:v]</code>表示输入的第一个和第二个编号。<code>pad</code>用于边界扩充，iw/ih分别是输入视频的宽度和高度。<code>[0:v]pad=iw*2:ih[a]</code>表示将第一个输入视频边界扩充，并将扩充好的命名为 [a]，方便后续操作。<code>[a][1:v]overlay=w*1</code> 中的<code>[a][1:v]</code>表示将 [1:v] 叠加到 [a] 上去，并且位置从 w 开始，默认是 <code>width=w</code> 处，h 未写表示 0。</p><h3 id="从输入视频中裁剪一部分输出"><a href="#从输入视频中裁剪一部分输出" class="headerlink" title="从输入视频中裁剪一部分输出"></a>从输入视频中裁剪一部分输出</h3><p>利用 ffmpeg 中的 video filter功能，设置指定的裁剪开始位置和裁剪的宽度和高度即可</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i ffmpeg_test.mp4 -vf "crop=w:h:x:y" -y ffmpeg_test_out.mp4</span><br></pre></td></tr></tbody></table></figure><p>其中 -i 指定输入视频数据</p><p><code>-vf</code> 是<code>-filter:v</code>的缩略形式告诉 ffmpeg 使用视频滤波器进行次操作</p><p><code>crop=w:h:x:y</code> 中 <code>w</code> 是输出视频的宽，<code>h</code>是输出视频的高，<code>x</code>和<code>y</code>是裁剪开始的坐标值，以左上为坐标原点，向右为 x 方向，向下为 y 方向</p><h3 id="在给定视频指定位置添加水印"><a href="#在给定视频指定位置添加水印" class="headerlink" title="在给定视频指定位置添加水印"></a>在给定视频指定位置添加水印</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i ctest.mp4 -vf "drawtext=fontfile=simhei.ttf: text='Original':x=620:y=500:fontsize=72:fontcolor=blue:shadowy=2" -y test_dst.mp4</span><br></pre></td></tr></tbody></table></figure><p>其中：</p><p><code>fontfile</code>表示字体类型，要确保存在对应的字体库</p><p><code>text</code>表示要添加的字符串形式的文字内容</p><p><code>fontsize</code>用来设置字体大小，默认大小为 16</p><p><code>fontcolor</code>用来设置字体颜色，默认为 Black</p><p><code>x=620:y=1920</code> 表示文字水印放置的位置</p><p>效果如下</p><p><img data-src="https://s3.ax1x.com/2021/01/02/sSU0aj.gif" alt="show"></p><h3 id="将视频拆分成图像序列"><a href="#将视频拆分成图像序列" class="headerlink" title="将视频拆分成图像序列"></a>将视频拆分成图像序列</h3><p>直接输入需要分解的视频名，并指定输出图像的格式即可</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i video.mpg image%d.jpg</span><br><span class="line">ffmpeg -i scene2frame1.mov frame%d.png</span><br><span class="line">ffmpeg -i src.mp4 -vframes 200 bmp_images/camera_01/%04d.bmp</span><br><span class="line">ffmpeg -i src.mp4 -vf scale=1920:1080 -vframes 200 bmp_resize/camera_01/%04d.bmp</span><br><span class="line">//vframes 用于设置提取的帧数。</span><br><span class="line">//vf scale 用于设置提取帧之后输出的分辨率，可用于对提取帧进行 resize 处理。</span><br></pre></td></tr></tbody></table></figure><h1 id="源码结构"><a href="#源码结构" class="headerlink" title="源码结构"></a>源码结构</h1><h2 id="主要组成"><a href="#主要组成" class="headerlink" title="主要组成"></a>主要组成</h2><p>这部分直接引用自雷神的博客：<a href="https://blog.csdn.net/leixiaohua1020/article/details/11693997" target="_blank" rel="noopener">FFMPEG中最关键的结构体之间的关系</a></p><p>FFMPEG中结构体很多。最关键的结构体可以分成以下几类：</p><p>a) 解协议（http,rtsp,rtmp,mms）</p><p>AVIOContext，URLProtocol，URLContext主要存储视音频使用的协议的类型以及状态。URLProtocol存储输入视音频使用的封装格式。每种协议都对应一个URLProtocol结构。（注意：FFMPEG中文件也被当做一种协议“file”）</p><p>b) 解封装（flv,avi,rmvb,mp4）</p><p>AVFormatContext主要存储视音频封装格式中包含的信息；AVInputFormat存储输入视音频使用的封装格式。每种视音频封装格式都对应一个AVInputFormat 结构。</p><p>c) 解码（h264,mpeg2,aac,mp3）</p><p>每个AVStream存储一个视频/音频流的相关数据；每个AVStream对应一个AVCodecContext，存储该视频/音频流使用解码方式的相关数据；每个AVCodecContext中对应一个AVCodec，包含该视频/音频对应的解码器。每种解码器都对应一个AVCodec结构。</p><p>d) 存数据</p><p>视频的话，一般每个 AVPacket 是一帧；音频可能有好几帧</p><p>解码前数据：AVPacket(h264, aac)<br>解码后数据：AVFrame(yuv, pcm)</p><h2 id="模块简介"><a href="#模块简介" class="headerlink" title="模块简介"></a>模块简介</h2><p>AVUtil：核心工具库，最基础的模块之一，其它模块经常依赖该库做一些基本的音视频处理操作，比如 av_image_fill_arrays（填充原始图像数据到 AVFrame）、av_image_get_buffer_size（根据图像宽高、格式获取填充该图像需要的字节数）、av_get_pix_fmt_name（获取像素格式的名称） 等等。</p><p>AVFormat：文件格式和协议库，最重要的模块之一，封装了 Protocol 层和 Demuxer、Muxer 层。常用于读写文件及文件信息，比如 avformat_write_header（写文件头）、av_write_trailer（写文件尾）、av_read_frame （从文件中读取一帧编码后的图像/音频数据）、av_write_frame（往文件中写一帧编码后的图像/音频数据）、av_seek_frame（给定一个时间戳，移动读指针到对应位置）等等。</p><p>AVCodec：编解码库，最重要的模块之一。FFmpeg 默认不会添加 libx264、FDK-AAC 等库，但 FFmpeg 可以像一个平台一样，将其它第三方的 Codec 以插件的形式添加进来，并为开发者提供统一的接口。编解码需要用到的函数基本都在该库中，比如 avcodec_find_decoder（找到对应的第三方解码器）、avcodec_decode_video2（使用对应的解码器解码一帧图像/音频数据）。</p><p>AVFilter：滤镜库。该模块提供了包括音频特效和视频特效的处理，比如把 “drawbox=10:20:200:60:red@0.5” 这条命令，传递给函数 avfilter_graph_parse() 解析，并传递原始图像数据到该 filter 中，就能在图像坐标为 (10, 20) 的点上生成一个宽高为 (200, 60) 、透明度为 0.5 的红色矩形。</p><p>以上是 FFmpeg 最常用的四个库，此外还有 AVDevice（输入输出设备库）、SwrResample（音频重采样，可转换音频的声道数、数据格式、采样率等格式）、SWScale（可用于处理像素格式转换的库）等就不一一介绍了，实际上，到对应的 FFmpeg 源代码对应的头文件看看都提供了什么函数，就大致能了解该库的作用了。</p><p>在 FFmpeg 中，还有一个类型的 filter 为 bit stream filter，顾名思义，该 filter 处理的是流数据，主要用于某些格式的封装转换行为。比如 AAC 编码，常见的有两种封装格式，一种是 ADTS 的流，一种是封装在 MPEG4 里面的格式，这种格式会在每一帧前面拼接一个由声道、采样率等信息组成的头，该 filter 中的一个类型，名为 aac_adtstoasc，可以很方便地把 ADTS 转换为另一种格式，常用于编码过程中。与之相对应的，H264 也有两种封装格式，一种是 MP4 封装的格式，一种是裸的 H264 格式（一般称为 annexb 封装格式），用于转换的 filter 名为 h264_mp4toannexb。若要使用这两个 filter，需要在编译 ffmpeg 的时候开启：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--enable-bsf=aac_adtstoasc</span><br><span class="line">--enable-bsf=h264_mp4toannexb</span><br><span class="line">12</span><br></pre></td></tr></tbody></table></figure><h2 id="常用-API-分析"><a href="#常用-API-分析" class="headerlink" title="常用 API 分析"></a>常用 API 分析</h2><h3 id="通用-API"><a href="#通用-API" class="headerlink" title="通用 API"></a>通用 API</h3><ol><li>av_register_all</li></ol><p>编译配置（–enable、–disable） FFmpeg 的时候，会生成两个文件：<a href="http://config.mk/" target="_blank" rel="noopener">config.mk</a>、config.h。<a href="http://config.mk/" target="_blank" rel="noopener">config.mk</a> 会实际上就是 makefile 文件需要包含进去的子模块，会作用在编译阶段，帮助开发者编译出正确的库；而 config.h 是作用在运行阶段，这一阶段将确保需要注册哪些容器以及编解码格式到 FFmpeg 框架中。所以该函数的内部实现会先调用 avcodec_register_all 来注册所有 config.h 里面开放的编解码器，然后会注册所有的 Muxer 和 Demuxer，最后注册所有的 Protocol。如此，在 config 的过程中，enable、disable 的选项就作用到了运行时，该函数的源码分析涉及的源文件包括 url.c、alformats.c、mux.c、format.c 等文件。</p><ol><li>av_find_codec</li></ol><p>在 avcodec_register_all 函数里面已经把编码器和解码器都存放到了一个链表中，因此都是从该链表进行遍历查找</p><ol><li>avcodec_open2 分析</li></ol><p>打开编解码其的时候就会用到该函数，参数有三个，第一个是 AVCodecContext，如果想要传入私有参数，比如 preset、tune、profile，则可以为设置到 priv_data 参数中。具体到函数实现时，它会找到对应的实现文件，比如，如果打开的是 libx264 编码器，那么实际上的 Codec 为 libx264.c 中的 ff_libx264_encoder，Codec 的生命周期方法就会委托给该结构体对应的函数指针所指向的函数。open 对应的就是 init 函数指针所指向的函数，该函数会调用具体的编码库的 API，并以对应的 AVCodecContext 中的 priv_data 来填充对应第三方库所需要的私有参数。</p><ol><li>av_codec_close 分析</li></ol><p>和 open 类似，找到对应的实现文件中的 close 函数指针所指向的函数，然后该函数会调用对应第三方库的 API 来关闭掉对应编码库。</p><p>其实 FFmpeg 所做的事情就是透明化所有的编码库，用自己的封装来为开发者提供统一的接口，开发者只需要在打开编解码库时指定编解码器的 ID 即可，之后编码、解码、关闭资源都会找到对应的实现文件去做具体的事情。</p><h3 id="解码时用到的-API"><a href="#解码时用到的-API" class="headerlink" title="解码时用到的 API"></a>解码时用到的 API</h3><ol><li>avformat_open_input</li></ol><p>该函数会根据提供的的文件路径判断文件的格式，继而决定使用哪一个 Demuxer。比如，如果是 flv 文件，那么 Demuxer 就会使用对应的 ff_flv_demuxer，之后关键的生命周期方法 read_header、read_packet、read_seek、read_close 都会使用 ff_flv_demuxer 中函数指针指定的函数。read_header 函数会将 AVStream 结构体构造好。</p><ol><li>avformat_find_stream_info</li></ol><p>这个函数非常重要，该方法的作用是将所有 Stream 的 MetaData 信息填充好，方法内部会先查找对应的解码器，并打开，紧接着利用 Demuxer 中的 read_packet 函数读取一段数据进行解码，解码数据越多，分析出的流数据就会越准确，本地资源会比较快，网络资源则较慢。该函数提供了几个参数可以控制读取数据的长度，分别为：probe_size、max_analyze、fps_probe_size，这几个参数的值越小，读取速度越快，信息则相对不够准确。</p><ol><li>av_read_frame</li></ol><p>该方法读取出来的数据是 AVPacket，该函数的实现首先会委托到 Demuxer 的 read_packet 方法，然后在该函数中把未处理完的压缩数据进行缓存处理。</p><ol><li>avcodec_decode</li></ol><p>如果要解码 H264，会找到 ff_h264_decoder，其中最重要的三个声明周期方法为 init、decode、close。</p><h3 id="编码时用到的-API"><a href="#编码时用到的-API" class="headerlink" title="编码时用到的 API"></a>编码时用到的 API</h3><ol><li>avformat_alloc_output_context</li></ol><p>和 avformat_open_input 类似，该函数最终会找到对应的格式复制给 AVFormatContext 中的 oformat。</p><ol><li>avio_open2</li></ol><p>该方法首先调用函数 ffurl_open，构造除 URLContext，这个结构体包含了 URLProtocol，接着调用 avio_alloc_context 方法，分配除 AVIOContext 结构体，并将上一步构造出来的 URLProtocol 传递进来，然后复制给 AVFormatContext 的属性。</p><p>编码步骤其实是解码的一个逆过程，解码过程中的 av_find_stream_info 对应到编码就是 avformat_new_stream 和 av_format_write_header，该步骤会将音频流或视频流的信息填充好，分配出 AVStream 结构体。read_header 则对应于 av_write_header，再之后是 av_write_frame、av_write_tailer，注意，av_write_header 和 av_write_tailer 必须成对出现。avcodec_encode 等函数就不一一介绍了。</p><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><ol><li>PTS 和 DTS</li></ol><p>DTS（Decoding Time Stamp）：解码时间戳，这个时间戳的意义在于告诉播放器该在什么时候解码这一帧图像</p><p>PTS（Presentation Time Stamp）：显示时间戳，这个时间戳用来告诉播放器该在什么时候显示这一帧图像</p><p>DTS、PTS 是在编码的时候由编码器生成的，当视频流中没有 B 帧时，通常 DTS 和 PTS 的顺序一致。但如果有 B 帧时，解码顺序和播放顺序就有区别了。</p><p>比如一个视频中，帧的显示顺序是：I B B P，现在我们需要在解码 B 帧时知道 P 帧中信息，因此这几帧在视频流中的顺序可能是：I P B B，这时候就体现出 DTS 和 PTS 的作用了。DTS 告诉我们该按什么顺序解码这几帧图像，PTS 告诉我们该按什么顺序显示这几帧图像。顺序大概如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PTS: 1 4 2 3</span><br><span class="line">DTS: 1 2 3 4</span><br><span class="line">Stream: I P B B</span><br><span class="line">123</span><br></pre></td></tr></tbody></table></figure><ol><li>time_base</li></ol><p>时间单位，比如帧率为 30帧/s 的视频，time_base 就等于 1/30，此时 pts * time_base 就等于当前帧显示的时间</p><ol><li>音视频的同步</li></ol><p>音频也有 DTS、PTS 的概念，但是音频没有 B 帧，不需要双向预测，所以音频帧的 DTS、PTS 顺序是一致的。</p><p>音视频同步的方式一般有三种：同步视频到音频、同步音频到视频、同步音频和视频到外部时钟。 因为音频帧的 DTS、PTS 顺序一致，因此一般情况下，都采用同步视频到音频的方式。</p><ol><li>gop</li></ol><p>group of picture，可以认为是两个 I 帧之间的间隔，通常设置为帧率的两倍即可</p><ol><li>参考帧</li></ol><p>最多可以设置为 16 个， 通常，该值越大，压缩率越高，但大于6后对压缩率的贡献很低，推荐默认值 6。</p><ol><li>align</li></ol><p>很多图像相关的函数中都有这个参数，是 YUV 通道对齐时的字节单位，如果不确定，可以设为 1，但效率可能不太高。</p><p>参考：<a href="https://stackoverflow.com/questions/35678041/what-is-linesize-alignment-meaning" target="_blank" rel="noopener">what is ‘linesize alignment’ meaning?</a></p><h2 id="码率控制"><a href="#码率控制" class="headerlink" title="码率控制"></a>码率控制</h2><p>主要参考：<a href="https://trac.ffmpeg.org/wiki/Encode/H.264" target="_blank" rel="noopener">H.264 Video Encoding Guide</a></p><p>在 x264 中，码率控制方式主要有（通常只推荐 CRF、Two-Pass ABR 两种）：</p><ol><li>CQP（Constant Quantization Parameter ）。值越大，压缩率越大，质量越低。使用方法（虽然这里使用的是命令行的形式，但在编写代码时也有参考价值）：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <input> -c:v libx264 -qp 23 <output></span><br><span class="line">ffmpeg -i <input> -c:v libx265 -x265-params qp=23 <output></span><br><span class="line">12</span><br></pre></td></tr></tbody></table></figure><p>仅适用于视频编码研究，除非确切知道自己在做什么，否则不要使用这种模式。</p><ol><li>ABR（Average Bitrate）。使用方法：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fmpeg -i <input> -c:v libx264 -b:v 1M <output></span><br><span class="line">ffmpeg -i <input> -c:v libx265 -b:v 1M <output></span><br><span class="line">ffmpeg -i <input> -c:v libvpx-vp9 -b:v 1M <output></span><br><span class="line">123</span><br></pre></td></tr></tbody></table></figure><p>避免使用这种模式！x264 开发者甚至说永远不要用它，因为质量不可控。</p><ol><li>CBR（Constant BitRate）。</li></ol><p>使用：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <input> -c:v libx264 -x264-params "nal-hrd=cbr:force-cfr=1" -b:v 1M -minrate 1M -maxrate 1M -bufsize 2M <output></span><br><span class="line">// VP9</span><br><span class="line">ffmpeg -i <input> -c:v libvpx-vp9 -b:v 1M -maxrate 1M -minrate 1M <output></span><br><span class="line">123</span><br></pre></td></tr></tbody></table></figure><p>输出文件需要是 .ts 文件，因为 MP4 不支持 NAL 填充，如果输入文件易于编码，使用这种方式会浪费带宽，适用于视频直播。</p><ol><li>CRF（Constant Rate Factor）。</li></ol><p>使用方法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <input> -c:v libx264 -crf 23 <output></span><br><span class="line">ffmpeg -i <input> -c:v libx265 -crf 28 <output></span><br><span class="line">ffmpeg -i <input> -c:v libvpx-vp9 -crf 30 -b:v 0 <output></span><br><span class="line">123</span><br></pre></td></tr></tbody></table></figure><p>x264 默认值是 23（推荐 17 ~ 28），x265 是28（推荐 24 ~ 34），可用值是 0 到 51。值越小编码质量越好，码率越高（每 -6，比特率加倍），值等于 0 时则为无损编码。注意：如果不是基于 ffmpeg 的播放器，可能无法解码无损压缩的视频。</p><p>很方便，但比特率、文件大小不好控制 ，适用于文件存储或需要实现最好的质量的场景；不适用于流媒体。</p><p>在代码中使用时，通过 av_dict_set 设置到 AVDictionary 中，并作为参数传递给 avcodec_open2 即可</p><ol><li>Two-Pass ABR</li></ol><p>用于限制输出文件的大小，比如预期视频文件有 10min(600s)，200 MB：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">200 * 8192 / 600 = ~2730 Kb</span><br><span class="line">2730 - 128(音频常用的比特率) = 2602 kb</span><br><span class="line">12</span><br></pre></td></tr></tbody></table></figure><p>那么：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -y -i input -c:v libx264 -b:v 2600k -pass 1 -c:a aac -b:a 128k -f mp4 /dev/null && \</span><br><span class="line">ffmpeg -i input -c:v libx264 -b:v 2600k -pass 2 -c:a aac -b:a 128k output.mp4</span><br><span class="line">12</span><br></pre></td></tr></tbody></table></figure><p>如果是 Windows 环境， /dev/null 换为 NUL，\ 换为 ^</p><p>但我一直不知道在代码中应该怎么使用这种模式，如果有了解的请指教。</p><ol><li>VBV（Video Buffer Verifier）</li></ol><p>可以确保最大码率限制在一个范围里，对于流式传输非常有用，可以配合到 （2-Pass）ABR 或 CRF 模式一起使用，使用方法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// crf & vbv</span><br><span class="line">ffmpeg -i <input> -c:v libx264 -crf 23 -maxrate 1M -bufsize 2M <output></span><br><span class="line">ffmpeg -i <input> -c:v libx265 -crf 28 -x265-params vbv-maxrate=1000:vbv-bufsize=2000 <output></span><br><span class="line"></span><br><span class="line">ffmpeg -i <input> -c:v libvpx-vp9 -crf 30 -b:v 2M <output></span><br><span class="line"></span><br><span class="line">// 2-pass abr & vbv</span><br><span class="line">ffmpeg -i <input> -c:v libx264 -b:v 1M -maxrate 1M -bufsize 2M -pass 1 -f mp4 /dev/null</span><br><span class="line">ffmpeg -i <input> -c:v libx264 -b:v 1M -maxrate 1M -bufsize 2M -pass 2 <output></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ffmpeg -i <input> -c:v libx265 -b:v 1M -x265-params pass=1:vbv-maxrate=1000:vbv-bufsize=2000 -f mp4 /dev/null</span><br><span class="line">ffmpeg -i <input> -c:v libx265 -b:v 1M -x265-params pass=2:vbv-maxrate=1000:vbv-bufsize=2000 <output></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ffmpeg -i <input> -c:v libvpx-vp9 -b:v 1M -maxrate 1M -bufsize 2M -pass 1 -f webm /dev/null</span><br><span class="line">ffmpeg -i <input> -c:v libvpx-vp9 -b:v 1M -maxrate 1M -bufsize 2M -pass 2 <output></span><br><span class="line">123456789101112131415161718</span><br></pre></td></tr></tbody></table></figure><p>编写代码的话，指定 AVCodecContext 的 rc_max_rate 和 rc_buffer_size 即可。bufsize 根据你希望比特率获得多大的可变性而设置，默认为 maxrate 的两倍，如果想限制流的比特率，可以设置为 maxrate 的一半。</p><p>配合 CRF 模式使用的时候，如果设置的 crf 值过低，视频码率可能超出 -maxrate 的时候，编码器会自动调整 crf，避免出现较大的码率波动。然而，x264 不会严格控制你指定的最大码率，除非使用 2 pass 模式。</p><ol><li>preset、tune</li></ol><p>如果参数的设置有些复杂，可以使用 preset、tune 参数（编写代码时可以通过 av_dict_set 设置），preset 是一个用于控制编码速度压缩比的选项集合，编码速度越慢，压缩率越高。可选值有：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ultrafast</span><br><span class="line">superfast</span><br><span class="line">veryfast</span><br><span class="line">faster</span><br><span class="line">fast</span><br><span class="line">medium – default preset</span><br><span class="line">slow</span><br><span class="line">slower</span><br><span class="line">veryslow</span><br><span class="line">123456789</span><br></pre></td></tr></tbody></table></figure><p>编码速度对比：</p><p><img data-src="https://s3.ax1x.com/2021/01/02/sStw6S.png" alt="preset 编码速度对比"></p><p>tune 可根据输入情况（不同的视频类型等）调整设置（比如对画面作出一些优化），可选值有：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">film        – use for high quality movie content; lowers deblocking</span><br><span class="line">animation   – good for cartoons; uses higher deblocking and more reference frames</span><br><span class="line">grain       – preserves the grain structure in old, grainy film material（纹理调整）</span><br><span class="line">stillimage  – good for slideshow-like content（适用于 ppt 等内容）</span><br><span class="line">fastdecode  – allows faster decoding by disabling certain filters</span><br><span class="line">zerolatency – good for fast encoding and low-latency streaming（适用于快速编码及低延迟流）</span><br></pre></td></tr></tbody></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>1.<a href="https://www.cnblogs.com/phillee/p/12244970.html" target="_blank" rel="noopener">https://www.cnblogs.com/phillee/p/12244970.html</a></p><p>2.<a href="https://ffmpeg.org/ffmpeg.html#toc-Synopsis" target="_blank" rel="noopener">https://ffmpeg.org/ffmpeg.html#toc-Synopsis</a></p><p>3.<a href="https://blog.csdn.net/u011330638/article/details/82392268?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-2&spm=1001.2101.3001.4242" target="_blank" rel="noopener">https://blog.csdn.net/u011330638/article/details/82392268?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-2&spm=1001.2101.3001.4242</a></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2021年开年第一个博客&lt;/p&gt;
&lt;p&gt;正好剪这个&lt;a href=&quot;https://www.bilibili.com/video/BV1ni4y1F79U&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;视频&lt;/a&gt;的时候&lt;/p&gt;
&lt;p&gt;需要转码（从mkv到mov）&lt;/p&gt;
&lt;p&gt;在网上找了好多解决方案，最后就选择了这个最“程序员的”&lt;/p&gt;
&lt;p&gt;写一篇关于这个ffmpeg小工具的吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/MaverickTang/Zh-Blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工具" scheme="https://github.com/MaverickTang/Zh-Blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>C++速转Python</title>
    <link href="https://github.com/MaverickTang/Zh-Blog/2020/07/13/c-to-python/"/>
    <id>https://github.com/MaverickTang/Zh-Blog/2020/07/13/c-to-python/</id>
    <published>2020-07-12T19:02:38.000Z</published>
    <updated>2021-02-08T00:01:06.202Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>C++：库是他们的，我什么也没有。。。</p><p>Python的库太香了，而且最近要搞基于Python的AI竞赛</p><p>就当是复习了吧</p><a id="more"></a><p>速成直接看<strong>这个例子</strong></p><p>C++代码</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="built_in">string</span> a[<span class="number">3</span>]={<span class="string">"It"</span>,<span class="string">"is"</span>,<span class="string">"Mavericreate"</span>};</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">3</span>;i++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s "</span>,&a[i]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i<<span class="number">3</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s "</span>,&a[i]);</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>将if 与 while的()改为” “,并在结尾加上:</p><p>将;去掉</p><p>函数名从printf改为print</p><p>数组把[]去掉</p><p>去掉{}</p><p><strong>行的格式正确（语句内的代码要空格）</strong></p><p>然后。。。</p><p>就差不多了（入门级的代码改变不需要import之类</p><p>Python代码</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="string">"It"</span>,<span class="string">"is"</span>,<span class="string">"Mavericreate"</span>]</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>):</span><br><span class="line">print(<span class="string">"%s "</span>%(a[i]),end=<span class="string">""</span>)</span><br><span class="line"><span class="comment">#i+=1</span></span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line">i=<span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> i>=<span class="number">0</span>:</span><br><span class="line">print(<span class="string">"%s "</span>%(a[i]),end=<span class="string">""</span>)</span><br><span class="line">i-=<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p>想系统一点的话就看下面一堆东东</p><p>可以了解一下，遇到函数不会的话可以直接查表</p><h1 id="变量-Variable"><a href="#变量-Variable" class="headerlink" title="变量(Variable)"></a>变量(Variable)</h1><h2 id="赋值方法"><a href="#赋值方法" class="headerlink" title="赋值方法"></a>赋值方法</h2><ul><li>Python中变量不用声明</li><li>变量使用前必须赋值</li><li>方法： 变量名=变量值</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python注释符为‘#’</span></span><br><span class="line"><span class="comment">#一般赋值</span></span><br><span class="line">a=<span class="number">3</span></span><br><span class="line"><span class="comment">#多变量赋值(注意变量名不能相同，这里只是为了演示)</span></span><br><span class="line">a=b=c=<span class="number">3</span></span><br><span class="line"><span class="comment">#为多个对象指定多个变量</span></span><br><span class="line">a,b,c=<span class="number">3</span>,<span class="string">'hello'</span>,<span class="literal">True</span><span class="comment">#注意True大写</span></span><br><span class="line"><span class="comment">#链式赋值</span></span><br><span class="line">a=b=b+<span class="number">1</span></span><br><span class="line"><span class="comment">#增量赋值（和C一样</span></span><br><span class="line">a=a+<span class="number">1</span></span><br><span class="line">a+=<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h2 id="变量的规范"><a href="#变量的规范" class="headerlink" title="变量的规范"></a>变量的规范</h2><ul><li><strong>只能</strong>字母或下划线开头</li><li>大小写敏感</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以使用type(variable)来获得类型（返回string</span></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line">type(a)</span><br></pre></td></tr></tbody></table></figure><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>Python支持四种数值类型</p><div class="table-container"><table><thead><tr><th style="text-align:center">int</th><th style="text-align:center">与C一样，但是在python3里无高精度（自动高精度）</th><th>1，2，0x6f(16进制)</th></tr></thead><tbody><tr><td style="text-align:center">float(浮点数)</td><td style="text-align:center">等于C的double类型</td><td>1.0，-0.1，1.2e-4</td></tr><tr><td style="text-align:center">complex(复数)</td><td style="text-align:center">a+bj,或者complex(a,b)。a为实部，b为虚部。.real取出实部，.imag取出虚部</td><td>1+2j,complex(1,2)</td></tr><tr><td style="text-align:center">bool(布尔)</td><td style="text-align:center">True(对应1)/False(对应0)</td><td>True,False</td></tr></tbody></table></div><h4 id="数值tips"><a href="#数值tips" class="headerlink" title="数值tips:"></a>数值tips:</h4><p>type()查看类型</p><p>del()删除引用</p><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>与C一样</p><p>但是有 *<em>操作，a*</em>b表示a的b次方</p><p>还有地板除</p><p>-11//4=-3</p><p>如果其中一个操作数为负数，则结果将被保留，即从0向负无穷大舍去</p><h4 id="数值运算符"><a href="#数值运算符" class="headerlink" title="数值运算符"></a>数值运算符</h4><p>与C一样</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>设a=True，b=False</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">and</td><td style="text-align:center">“且”，两边同时为真才为真</td><td style="text-align:center">（a and b）结果为False</td></tr><tr><td style="text-align:center">or</td><td style="text-align:center">“或”，有一个是对的就对</td><td style="text-align:center">（a or b）结果为False</td></tr><tr><td style="text-align:center">not</td><td style="text-align:center">“非”，状态取反</td><td style="text-align:center">not(a and b)结果为True</td></tr></tbody></table></div><h4 id="数字内置函数"><a href="#数字内置函数" class="headerlink" title="数字内置函数"></a>数字内置函数</h4><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">str(x)</td><td style="text-align:center">数值x转换为字符串类型</td></tr><tr><td style="text-align:center">int(x)</td><td style="text-align:center">x转换整数，（不四舍五入，直接取整数部分</td></tr><tr><td style="text-align:center">float(x)</td><td style="text-align:center">将x转为浮点数</td></tr><tr><td style="text-align:center">complex(x,y)</td><td style="text-align:center">转负数</td></tr><tr><td style="text-align:center">bin(x)</td><td style="text-align:center">转2进制</td></tr><tr><td style="text-align:center">hex(x)</td><td style="text-align:center">转16进制</td></tr></tbody></table></div><h4 id="数值内置函数"><a href="#数值内置函数" class="headerlink" title="数值内置函数"></a>数值内置函数</h4><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">abs(x)</td><td style="text-align:center">取x的决定值</td></tr><tr><td style="text-align:center">min(x1,x2,x3)</td><td style="text-align:center">取最小值</td></tr><tr><td style="text-align:center">max(x1,x2,x3)</td><td style="text-align:center">取最大值</td></tr><tr><td style="text-align:center">pow(x,y)</td><td style="text-align:center">计算x的y次方，=x**y</td></tr><tr><td style="text-align:center">round(x)</td><td style="text-align:center">四舍五入x到个位</td></tr><tr><td style="text-align:center">round(x,n)</td><td style="text-align:center">四舍五入x到小数点后n位</td></tr></tbody></table></div><h4 id="处理数值对象的模块"><a href="#处理数值对象的模块" class="headerlink" title="处理数值对象的模块"></a>处理数值对象的模块</h4><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">math/cmath</td><td style="text-align:center">标准C库数学运算函数，常规在cmath，复数运算cmath</td></tr><tr><td style="text-align:center">random</td><td style="text-align:center">多种伪随机数生成器</td></tr><tr><td style="text-align:center">decimal</td><td style="text-align:center">十进制浮点运算类</td></tr><tr><td style="text-align:center">array</td><td style="text-align:center">高效数值数组</td></tr><tr><td style="text-align:center">operator</td><td style="text-align:center">数字运算符的函数实现</td></tr></tbody></table></div><h4 id="导入数学模块"><a href="#导入数学模块" class="headerlink" title="导入数学模块"></a>导入数学模块</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> XXX</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment">#任意皆可</span></span><br></pre></td></tr></tbody></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">pi</td><td style="text-align:center">圆周率</td></tr><tr><td style="text-align:center">e</td><td style="text-align:center">自然常数</td></tr><tr><td style="text-align:center">sqrt(x)</td><td style="text-align:center">x的平方根</td></tr><tr><td style="text-align:center">sin(x),cos(x),cos(x),tan(x)</td><td style="text-align:center">x为弧度制</td></tr><tr><td style="text-align:center">exp(x)</td><td style="text-align:center">e的x次方</td></tr><tr><td style="text-align:center">log(x)  相当于ln,log(x,n) n为底数，x为对数,log10(x) 10为底数</td><td style="text-align:center">log函数</td></tr></tbody></table></div><h4 id="导入随机模块"><a href="#导入随机模块" class="headerlink" title="导入随机模块"></a>导入随机模块</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> XXX</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#任意皆可</span></span><br></pre></td></tr></tbody></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">choice(seq)</td><td style="text-align:center">来自列表，元组，或字符串的随机项目</td></tr><tr><td style="text-align:center">randrange([start],stop,[step])</td><td style="text-align:center">从（start，stop，step）中选择元素</td></tr><tr><td style="text-align:center">random()</td><td style="text-align:center">返回随机浮点数（0<=r<1）</td></tr><tr><td style="text-align:center">seed([x])</td><td style="text-align:center">设置生成随机数的整数起始值</td></tr><tr><td style="text-align:center">shuffle(lst)</td><td style="text-align:center">将列表的项目随机化到位置</td></tr><tr><td style="text-align:center">uniform(x,y)</td><td style="text-align:center">返回随机浮点数r（x<=r<y）</td></tr></tbody></table></div><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>单引号双引号都可以用</li><li>长字符串可以用’ ‘ ‘</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>注意函数和方法不一样</p><div class="table-container"><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">find()</td><td style="text-align:center">查找字符串中，若有就返回索引值，没有则返回-1</td></tr><tr><td style="text-align:center">index()</td><td style="text-align:center">查找字符串中，若有就返回索引值，没有则引发异常</td></tr><tr><td style="text-align:center">replace(old,new)</td><td style="text-align:center">使用新的字符串替代原字符串中替代特定的字符串</td></tr><tr><td style="text-align:center">split(str)</td><td style="text-align:center">根据分隔符str拆分字符串，默认以空格拆分</td></tr><tr><td style="text-align:center">lstrip()</td><td style="text-align:center">删除字符串中的所有前导空格</td></tr><tr><td style="text-align:center">rstrip()</td><td style="text-align:center">删除字符串中的所有尾随空格</td></tr><tr><td style="text-align:center">strip()</td><td style="text-align:center">对字符串lstrip()和rstrip()</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">capitalize()</td><td style="text-align:center">把字符串的第一个字母转为大写</td></tr><tr><td style="text-align:center">islower()</td><td style="text-align:center">若字符串至少包含1个字母，且所有字符均为小写，则返回True，否则返回False</td></tr><tr><td style="text-align:center">isupper()</td><td style="text-align:center">若字符串至少包含1个可变大小写字母，且所有可变大小写字符均为大写，则返回True，否则返回False</td></tr><tr><td style="text-align:center">lower()</td><td style="text-align:center">所有大写字母转小写</td></tr><tr><td style="text-align:center">upper()</td><td style="text-align:center">所有小写字母转大写</td></tr><tr><td style="text-align:center">join(seq)</td><td style="text-align:center">将序列seq中的元素以字符串合并到具有分隔符字符串的字符串中</td></tr></tbody></table></div><h4 id="字符串转义"><a href="#字符串转义" class="headerlink" title="字符串转义"></a>字符串转义</h4><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">描述</th><th style="text-align:center">符号</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">\\</td><td style="text-align:center">反斜线</td><td style="text-align:center">\v</td><td style="text-align:center">纵向制表符</td></tr><tr><td style="text-align:center">\‘</td><td style="text-align:center">单引号</td><td style="text-align:center">\r</td><td style="text-align:center">回车符</td></tr><tr><td style="text-align:center">\“</td><td style="text-align:center">双引号</td><td style="text-align:center">\f</td><td style="text-align:center">换页符</td></tr><tr><td style="text-align:center">\a</td><td style="text-align:center">发出系统响铃声</td><td style="text-align:center">\o</td><td style="text-align:center">八进制数代表的字符</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">换行符</td><td style="text-align:center">\x</td><td style="text-align:center">十六进制数代表的字符</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">退格符</td><td style="text-align:center">\000</td><td style="text-align:center">终止符，后面字符串全部省略</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">横向制表符</td><td style="text-align:center"></td></tr></tbody></table></div><p>不想让转义生效时，就用r与R来定义原始字符串：</p><p>print(r”\t\r”)</p><h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">描述</th><th style="text-align:center">符号</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">%c</td><td style="text-align:center">格式化字符及其ASCIL码</td><td style="text-align:center">%f</td><td style="text-align:center">格式化浮点数字，可指定小数点后精度</td></tr><tr><td style="text-align:center">%s</td><td style="text-align:center">格式化字符串</td><td style="text-align:center">%e</td><td style="text-align:center">科学技术法格式化浮点数</td></tr><tr><td style="text-align:center">%d</td><td style="text-align:center">格式化整数</td><td style="text-align:center">%E</td><td style="text-align:center">科学技术法格式化浮点数</td></tr><tr><td style="text-align:center">%u</td><td style="text-align:center">格式化无符号整数</td><td style="text-align:center">%g</td><td style="text-align:center">根据值的大小决定使用%f或%e</td></tr><tr><td style="text-align:center">%o</td><td style="text-align:center">格式化无符号八进制数</td><td style="text-align:center">%G</td><td style="text-align:center">根据值的大小决定使用%f或%e</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:center">格式化无符号十六进制数</td><td style="text-align:center">%p</td><td style="text-align:center">用16进制格式化变量地址</td></tr><tr><td style="text-align:center">%X</td><td style="text-align:center">格式化无符号十六进制数（大写</td><td style="text-align:center">%%</td><td style="text-align:center">输出%</td></tr></tbody></table></div><ul><li>列表: [1,2,3,4,5]</li></ul><h3 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h3><ul><li>格式：list=[a,b,c]</li><li>特殊方法:list2=[1,’b’,c,[‘d’,e]]</li><li>访问方法与C一样list[n]（访问第一个元素</li><li>注意如果n=-2时则会访问倒数第二个元素</li><li>list[1:3]会取到第一个还有第二个元素</li></ul><h4 id="列表常用方法"><a href="#列表常用方法" class="headerlink" title="列表常用方法"></a>列表常用方法</h4><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">返回值</th></tr></thead><tbody><tr><td style="text-align:center">s.append(x)</td><td style="text-align:center">末尾添加x（元素）</td></tr><tr><td style="text-align:center">s.count(x)</td><td style="text-align:center">返回x出现的次数</td></tr><tr><td style="text-align:center">s.extend(iter)</td><td style="text-align:center">将iter的所有元素添加到</td></tr><tr><td style="text-align:center">s.index(x)</td><td style="text-align:center">返回第x个元素的索引</td></tr><tr><td style="text-align:center">s.insert(i,x)</td><td style="text-align:center">将元素x插入到索引i指定的元素前面，结果是s[i]=x</td></tr><tr><td style="text-align:center">s.pop(i)</td><td style="text-align:center">删除并返回x中索引为i的元素</td></tr><tr><td style="text-align:center">s.remove(x)</td><td style="text-align:center">删除x中第一个x元素</td></tr><tr><td style="text-align:center">s.reverse()</td><td style="text-align:center">反转排列顺序，（alist[::-1]在输出的时候会反过来，但实际不会</td></tr><tr><td style="text-align:center">s.sort()</td><td style="text-align:center">升序排列s中元素</td></tr></tbody></table></div><p>观察下面的程序，看看有什么发现</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">c=(<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</span><br><span class="line">a.append(b)</span><br><span class="line">print(a)</span><br><span class="line">a.extend(b)</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment">#a+c失败，因为列表不能与元组相加</span></span><br><span class="line">a.append(c)</span><br><span class="line">print(a)</span><br><span class="line">a.extend(c)</span><br><span class="line">print(a)</span><br></pre></td></tr></tbody></table></figure><h3 id="元组（tuple）"><a href="#元组（tuple）" class="headerlink" title="元组（tuple）"></a>元组（tuple）</h3><ul><li>不可变序列（不能进行添加删除</li><li>由不同元素组成</li><li>元组代表一行数据，其中元素代表不同数据项</li></ul><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">返回值</th></tr></thead><tbody><tr><td style="text-align:center">x in tuple1</td><td style="text-align:center">若x是tuple1中的一个元素，则返回True，否则False</td></tr><tr><td style="text-align:center">len(tuple1)</td><td style="text-align:center">tuple1所包含的元素数</td></tr><tr><td style="text-align:center">tuple1.count(x)</td><td style="text-align:center">元素x在元组中出现的次数</td></tr><tr><td style="text-align:center">tuple1.index(x)</td><td style="text-align:center">元组tuple1中第一个元素x的索引，若x不在，则引发异常</td></tr></tbody></table></div><h3 id="字典（Dictionary）"><a href="#字典（Dictionary）" class="headerlink" title="字典（Dictionary）"></a>字典（Dictionary）</h3><ul><li>用{ }扩起来，每对键值用:分开</li><li>字典中的键必须唯一</li><li>Python3.6的字典会保持插入后的值</li><li>支持多级结构，既值可以为列表，字典</li><li>字典通过key可以获取相应的value值</li><li>多维字典访问dict[key] [索引下标]</li><li>使用字典中不存在的键访问会报错</li></ul><h4 id="字典添加与删除方法"><a href="#字典添加与删除方法" class="headerlink" title="字典添加与删除方法"></a>字典添加与删除方法</h4><p>如果存在key，则更新value，不存在，就追加</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict[<span class="string">'work'</span>]=<span class="string">'teacher'</span> </span><br><span class="line">dict[<span class="string">'age'</span>]=<span class="number">25</span></span><br></pre></td></tr></tbody></table></figure><p>使用del语句</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> dict[<span class="string">'work'</span>]</span><br></pre></td></tr></tbody></table></figure><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h4><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">描述与用法</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">d.items(),d.keys(),d.value()</td><td style="text-align:center">返回键值对/键/值 的视图</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">d.get(key)</td><td style="text-align:center">返回与key相关联的值</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">d.pop(key)</td><td style="text-align:center">删除键key，并返回与之相关的值</td><td style="text-align:center">dict.pop(‘age’)</td></tr><tr><td style="text-align:center">d.popitem()</td><td style="text-align:center">随机删除字典d中的某键值对，并返回相应的键值对</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">d.clear()</td><td style="text-align:center">删除d中的所有元素</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">d.fromkeys(s,t)</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">d.update(e)</td><td style="text-align:center">将e中的键值队添加到字典中，e可能是字典，也可以是<strong>键值队序列</strong></td><td style="text-align:center">dict.update({‘married’:’yes’})</td></tr><tr><td style="text-align:center">d.setdefault(key,v)</td><td style="text-align:center">如key包含在字典key中，则返回d中key对应的value，否则，将key，v添加到字典</td><td style="text-align:center">Dict.setdefault(age,30)</td></tr></tbody></table></div><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul><li>不重复元素，无列表与字典应用广泛</li><li>set()或{}创建（创空集时不能用{}</li><li>作用：消除重复元素</li><li>特性：union, intersection, difference, sysmmetric difference</li></ul><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>英文博客写过，这里不再赘述</p><h1 id="语句，关键字"><a href="#语句，关键字" class="headerlink" title="语句，关键字"></a>语句，关键字</h1><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>以C++为对比</p><p>去掉“;”,”()”</p><p>在if尾部加上”:”</p><p>注意对齐，python没有分号但是对齐很重要</p><p>C++</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span>(a<<span class="number">20</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a<20"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a>=<span class="number">20</span> && a<<span class="number">80</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"20<=a<80"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a=%d,a>80"</span>,a);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Python</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> a<<span class="number">20</span>:</span><br><span class="line">print(<span class="string">"a<20"</span>)</span><br><span class="line"><span class="keyword">elif</span> a>=<span class="number">20</span> <span class="keyword">and</span> a<<span class="number">80</span>:</span><br><span class="line">print(<span class="string">"20<=a<80"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"a= %d,a>80"</span> %(a))</span><br></pre></td></tr></tbody></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>C++</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="built_in">string</span> a[<span class="number">3</span>]={<span class="string">"It"</span>,<span class="string">"is"</span>,<span class="string">"Mavericreate"</span>};</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">3</span>;i++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s "</span>,&a[i]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i<<span class="number">3</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s "</span>,&a[i]);</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//Result:</span></span><br><span class="line"><span class="comment">//It is Mavericreate </span></span><br><span class="line"><span class="comment">//It is Mavericreate</span></span><br></pre></td></tr></tbody></table></figure><p>Python</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="string">"It"</span>,<span class="string">"is"</span>,<span class="string">"Mavericreate"</span>]</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>):</span><br><span class="line">print(<span class="string">"%s "</span>%(a[i]),end=<span class="string">""</span>)</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line">i=<span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> i>=<span class="number">0</span>:</span><br><span class="line">print(<span class="string">"%s "</span>%(a[i]),end=<span class="string">""</span>)</span><br><span class="line">i-=<span class="number">1</span></span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#It is Mavericreate </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#Mavericreate is It</span></span><br></pre></td></tr></tbody></table></figure><h4 id="注意⚠️"><a href="#注意⚠️" class="headerlink" title="注意⚠️"></a>注意⚠️</h4><ul><li>range()函数生成一个序列，返回一个range对象</li><li>默认起始值为0，如 range(10)</li><li>有反向range的打法，如 range(10,0,-1)</li><li>上面最后的-1表示每次递增的量，为-的话就递减</li></ul><h4 id="Enumerate遍历方法"><a href="#Enumerate遍历方法" class="headerlink" title="Enumerate遍历方法"></a>Enumerate遍历方法</h4><p>enumerate()函数用于遍历序列中的元素与下标</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(<span class="string">'abc'</span>):</span><br><span class="line"> print(i,j)</span><br><span class="line"><span class="comment">#Result:</span></span><br><span class="line"><span class="comment">#1 b</span></span><br><span class="line"><span class="comment">#2 c</span></span><br></pre></td></tr></tbody></table></figure><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>关键字为特殊的标识符 （Python内部已有的标识符</p><p>查看：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">print(keyword.kwlist);</span><br><span class="line">[<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'async'</span>, <span class="string">'await'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></tbody></table></figure><p>大部分关键字与C++相同</p><p>这里提一些没有的（我没在C++里看到的</p><div class="table-container"><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">含义</th><th>示例</th><th style="text-align:center">关键字</th><th style="text-align:center">含义</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">def</td><td style="text-align:center">定义函数或方法</td><td></td><td style="text-align:center">raise</td><td style="text-align:center">异常抛出操作</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">except, try, finally</td><td style="text-align:center">捕捉异常</td><td></td><td style="text-align:center">with</td><td style="text-align:center">简化语句</td><td style="text-align:center">with open(file) as fp</td></tr><tr><td style="text-align:center">global</td><td style="text-align:center">全局变量定义</td><td></td><td style="text-align:center">yield</td><td style="text-align:center">从函数依次返回值</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">in</td><td style="text-align:center">判断是否在序列中</td><td></td><td style="text-align:center">assert</td><td style="text-align:center">判断变量或表达式的值是否为真</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">class</td><td style="text-align:center">用于定义类</td><td></td><td style="text-align:center">is</td><td style="text-align:center">判断变量是否为某个类</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">as</td><td style="text-align:center">类型转换</td><td>import keyword as ke</td><td style="text-align:center">lamdba</td><td style="text-align:center">定义匿名变量</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>and, or, not</strong></td><td style="text-align:center">逻辑与,或，非操作</td><td>if a and b:</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p>在Python内，一切（数据结构）都是对象，对象就是申请的一块内存，一个对象一旦被创建，在内存中的大小就是不变的。</p><h2 id="对象引用"><a href="#对象引用" class="headerlink" title="对象引用"></a>对象引用</h2><h3 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">print(id(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">#result:</span></span><br><span class="line"><span class="comment">#4334942864</span></span><br><span class="line"><span class="comment">#表示这个为内存地址（每次地址可能都不一样</span></span><br></pre></td></tr></tbody></table></figure><p>对于数字，字符串，None，即使是赋值，也只是创造了新的引用，而不是对象本身。</p><h3 id="关键字if：判断指向的对象是否相同"><a href="#关键字if：判断指向的对象是否相同" class="headerlink" title="关键字if：判断指向的对象是否相同"></a>关键字if：判断指向的对象是否相同</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">a,b=<span class="number">1</span>,<span class="number">3</span></span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br><span class="line"><span class="comment">#False</span></span><br><span class="line"></span><br><span class="line">a,b=<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"></span><br><span class="line">a,b=<span class="string">'apple'</span>,<span class="string">'apple'</span></span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"></span><br><span class="line">a,b=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"></span><br><span class="line">a,b=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br><span class="line"><span class="comment">#False</span></span><br><span class="line"></span><br><span class="line">a,b=<span class="literal">None</span>,<span class="literal">None</span></span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br><span class="line"><span class="comment">#True</span></span><br></pre></td></tr></tbody></table></figure><h3 id="引用次数"><a href="#引用次数" class="headerlink" title="引用次数"></a>引用次数</h3><p>在Python中，每个对象都存有指向该对象的引用总数，即引用次数（reference count）</p><p>使用sys包中的gatrefcount(),来查看引用次数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> getrefcount</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(getrefcount(a))</span><br><span class="line">b=a</span><br><span class="line">print(getrefcount(b))</span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br><span class="line">c=[a,a]</span><br><span class="line">print(getrefcount(a))</span><br><span class="line">print(c <span class="keyword">is</span> a)</span><br><span class="line"><span class="comment">#Result:</span></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"><span class="comment">#3</span></span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"><span class="comment">#5</span></span><br><span class="line"><span class="comment">#False</span></span><br></pre></td></tr></tbody></table></figure><h3 id="引用环"><a href="#引用环" class="headerlink" title="引用环"></a>引用环</h3><p>两个对象可能互相引用，从而构成引用环（Reference cycle）</p><p>即使是一个对象，只需要自己引用自己，也能构成引用环</p><p>对回收内存带来麻烦</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> getrefcount</span><br><span class="line">a=[]</span><br><span class="line">b=[a]</span><br><span class="line">a.append(b)</span><br><span class="line">print(getrefcount(a),getrefcount(b))</span><br><span class="line">print(id(a),id(b))</span><br><span class="line"><span class="comment">#Result:</span></span><br><span class="line"><span class="comment">#3 3</span></span><br><span class="line"><span class="comment">#4319390848 4319390784</span></span><br></pre></td></tr></tbody></table></figure><p>回收内存</p><p>对象越多，内存越大，使用del(a)清楚没用的对象</p><p>垃圾回收启动时，Python扫描到这个引用计数为0的对象，就将它所占据的内存清空</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>Python程序由包，模块，函数组成</p></li><li><p>包是模块组成的集合</p></li><li><p>模块是处理一类问题的函数与类的集合</p></li><li>函数是可以重复使用，用来实现单一，或相关联功能的代码块</li><li>函数能提高应用的模块性以及代码的重复利用率</li></ul><h2 id="示范"><a href="#示范" class="headerlink" title="示范"></a>示范</h2><p>函数以def开头，加上名字还有括号内需要传递的变量</p><p>与if一样用:</p><p>也是用return 返回值 结束，没有则返回None</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Showname</span><span class="params">(name)</span>:</span></span><br><span class="line"><span class="string">'''this function is to show name'''</span><span class="comment">#文档字符串存放函数说明</span></span><br><span class="line">print(<span class="string">'I am %s'</span> %(name))</span><br><span class="line">Showname(<span class="string">'Maverick'</span>)</span><br><span class="line"><span class="comment">#Result:</span></span><br><span class="line"><span class="comment">#I am Maverick</span></span><br></pre></td></tr></tbody></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>形参：</p><p><strong>形式参数</strong>，不占内存，只有在调用时才分配内存单元，目的是函数调用时接受实参</p><p>实参：</p><p><strong>实际参数</strong>，调用函数时传给函数的参数，可以是常量，变量，表达式，函数，传给形参</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">charge</span><span class="params">(a)</span>:</span></span><br><span class="line">a=<span class="number">2</span></span><br><span class="line">b=<span class="number">1</span></span><br><span class="line">charge(b)</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment">#Result:</span></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">charge</span><span class="params">(a)</span>:</span></span><br><span class="line">a.append(<span class="number">2</span>)</span><br><span class="line">b=[<span class="number">1</span>]</span><br><span class="line">charge(b)</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment">#Result:</span></span><br><span class="line"><span class="comment">#[1, 2]</span></span><br></pre></td></tr></tbody></table></figure><p>如果参数应用的对象本身是<strong>不可变</strong>的，如数值，字符串，元组，则在函数中对形参的修改<strong>不会影响</strong>到实参</p><p>如果参数应用的对象本身是<strong>可变</strong>的，如列表，字典 则在函数中对形参的修改<strong>会影响</strong>到实参</p><h3 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h3><div class="table-container"><table><thead><tr><th style="text-align:center">参数类型</th><th style="text-align:center">定义</th></tr></thead><tbody><tr><td style="text-align:center">位置</td><td style="text-align:center">调用时根据函数定义的参数位置来传递</td></tr><tr><td style="text-align:center">默认</td><td style="text-align:center">用于定义参数，提供默认值</td></tr><tr><td style="text-align:center">可变</td><td style="text-align:center">传入参数个数可变</td></tr><tr><td style="text-align:center">关键字</td><td style="text-align:center">用于函数调用，通过键值形式加以指定，可以让函数更清晰，容易使用，同时清除参数的顺序要求</td></tr><tr><td style="text-align:center">命名关键字</td><td style="text-align:center">在*之后的参数只能通过关键字参数传递</td></tr></tbody></table></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#位置参数</span></span><br><span class="line"><span class="comment">#位置固定。参数个数确认后，传入参数需要与之相同</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">word</span><span class="params">(greeting,name)</span>:</span></span><br><span class="line">print(greeting, name+<span class="string">'!'</span>)</span><br><span class="line">word(<span class="string">'Hello'</span>, <span class="string">'Jack'</span>)</span><br><span class="line"><span class="comment">#Result</span></span><br><span class="line"><span class="comment">#Hello Jack!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#默认参数</span></span><br><span class="line"><span class="comment">#当参数没有实际传递的值时，函数将使用默认参数计算</span></span><br><span class="line"><span class="comment">#带默认值的参数需在无默认值的后面</span></span><br><span class="line"><span class="comment">#默认参数最好指向不变对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">word</span><span class="params">(name, greeting=<span class="string">'hi'</span>)</span>:</span></span><br><span class="line">print(greeting, name+<span class="string">'!'</span>)</span><br><span class="line">word(<span class="string">'Jack'</span>,<span class="string">'Hello'</span>)</span><br><span class="line"><span class="comment">#Result</span></span><br><span class="line"><span class="comment">#Hello Jack!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#默认参数#2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">word</span><span class="params">(name, greeting=[])</span>:</span></span><br><span class="line">greeting.append(<span class="string">'hello'</span>)</span><br><span class="line">print(greeting, name+<span class="string">'!'</span>)</span><br><span class="line">word(<span class="string">'Jack'</span>)</span><br><span class="line">word(<span class="string">'rose'</span>,[<span class="string">'hi'</span>])</span><br><span class="line">word(<span class="string">'mary'</span>)</span><br><span class="line"><span class="comment">#Result</span></span><br><span class="line"><span class="comment">#['hello'] Jack!</span></span><br><span class="line"><span class="comment">#['hi', 'hello'] rose!</span></span><br><span class="line"><span class="comment">#['hello', 'hello'] mary!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可变参数</span></span><br><span class="line"><span class="comment">#处理比声名多的参数</span></span><br><span class="line"><span class="comment">#*表示元组类型参数，**表示字典类型参数</span></span><br><span class="line"><span class="comment">#字典类型参数在元组类型后</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">word</span><span class="params">(name, *greeting,**name1)</span>:</span></span><br><span class="line">print(greeting, name+<span class="string">'!'</span>,name1)</span><br><span class="line">word(<span class="string">'Jack'</span>,<span class="string">'Hi'</span>,<span class="string">'Nice to meet u'</span>)</span><br><span class="line"><span class="comment">#Result</span></span><br><span class="line"><span class="comment">#('Hi', 'Nice to meet u') Jack! {}</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关键字参数</span></span><br><span class="line"><span class="comment">#调用参数时，使用param=value的方式传递参数</span></span><br><span class="line"><span class="comment">#清晰指出参数值，提高程序可读性</span></span><br><span class="line"><span class="comment">#参数顺序不重要</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">word</span><span class="params">(name, greeting,name1)</span>:</span></span><br><span class="line">print(greeting, name+<span class="string">'!'</span>,name1)</span><br><span class="line">word(greeting=<span class="string">'Jack'</span>,name=<span class="string">'hello'</span>,name1=<span class="string">'rose'</span>)</span><br><span class="line"><span class="comment">#Result</span></span><br><span class="line"><span class="comment">#Jack hello! rose</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#命名关键字参数</span></span><br><span class="line"><span class="comment">#必须传入参数名（不传报错</span></span><br><span class="line"><span class="comment">#若已有一个可变参数，则后面命名关键字参数不需要分隔符*</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">word</span><span class="params">(name,*, greet=<span class="string">'hi'</span>,word)</span>:</span></span><br><span class="line">print(greet, name,word)</span><br><span class="line">word(<span class="string">'TOM'</span>,greet=<span class="string">'hello'</span>,word=<span class="string">'how are you'</span>)</span><br><span class="line">word(<span class="string">'TOM'</span>,word=<span class="string">'how are you'</span>)</span><br><span class="line"><span class="comment">#Result</span></span><br><span class="line"><span class="comment">#hello TOM how are you</span></span><br><span class="line"><span class="comment">#hi TOM how are you</span></span><br></pre></td></tr></tbody></table></figure><p>在Python中，参数定义顺序必须是：</p><p>位置参数，默认参数，可变参数，命名关键字参数，关键字参数</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>在python中创建，改变，查找变量名时，都在一个保存变量名的空间中进行，我们称为命名空间，也叫<strong>作用域</strong></p><p>。。。</p><p>先写这么多</p><p>夏令营回来后补上吧</p><p>看看有没有心情写写算法</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;C++：库是他们的，我什么也没有。。。&lt;/p&gt;
&lt;p&gt;Python的库太香了，而且最近要搞基于Python的AI竞赛&lt;/p&gt;
&lt;p&gt;就当是复习了吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/MaverickTang/Zh-Blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://github.com/MaverickTang/Zh-Blog/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>优化理论</title>
    <link href="https://github.com/MaverickTang/Zh-Blog/2020/05/11/Optimization-theory/"/>
    <id>https://github.com/MaverickTang/Zh-Blog/2020/05/11/Optimization-theory/</id>
    <published>2020-05-10T16:12:50.000Z</published>
    <updated>2021-02-08T00:02:19.920Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在特定约束条件下，选择变量值，是目标函数最大化/最小化</p><h2 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h2><ul><li><p>优化</p><ul><li>数据<ul><li>离散</li><li>连续</li></ul></li><li>条件<ul><li>无拘束</li><li>有拘束</li></ul></li><li>函数<ul><li>线性</li><li>非线性</li></ul></li><li>目标<ul><li>单目标</li><li>多目标</li></ul></li></ul><a id="more"></a><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="梯度下降法（局部最优）"><a href="#梯度下降法（局部最优）" class="headerlink" title="梯度下降法（局部最优）"></a>梯度下降法（局部最优）</h2><h3 id="理论指导"><a href="#理论指导" class="headerlink" title="理论指导"></a>理论指导</h3><p>基本思想可以类比为一个下山的过程。假设这样一个场景：一个人被困在山上，需要从山上下来(i.e. 找到山的最低点，也就是山谷)。但此时山上的浓雾很大，导致可视度很低。因此，下山的路径就无法确定，他必须利用自己周围的信息去找到下山的路径。这个时候，他就可以利用梯度下降算法来帮助自己下山。具体来说就是，以他当前的所处的位置为基准，寻找这个位置最陡峭的地方，然后朝着山的高度下降的地方走，同理，如果我们的目标是上山，也就是爬到山顶，那么此时应该是朝着最陡峭的方向往上走。然后每走一段距离，都反复采用同一个方法，最后就能成功的抵达山谷。</p><p><img data-src="/Users/maverick/Desktop/PROGRAM/Mavericreate/Zh-Blog/source/_posts/Optimization-theory/20190121201301798.png" alt="20190121201301798"></p><p>我们同时可以假设这座山最陡峭的地方是无法通过肉眼立马观察出来的，而是需要一个复杂的工具来测量，同时，这个人此时正好拥有测量出最陡峭方向的能力。所以，此人每走一段距离，都需要一段时间来测量所在位置最陡峭的方向，这是比较耗时的。那么为了在太阳下山之前到达山底，就要尽可能的减少测量方向的次数。这是一个两难的选择，如果测量的频繁，可以保证下山的方向是绝对正确的，但又非常耗时，如果测量的过少，又有偏离轨道的风险。所以需要找到一个合适的测量方向的频率，来确保下山的方向不错误，同时又不至于耗时太多！</p><p>所以首先，我们需要有一个可微分的函数。这个函数就代表着一座山。我们的目标就是找到这个函数的最小值，也就是山底。根据之前的场景假设，最快的下山的方式就是找到当前位置最陡峭的方向，然后沿着此方向向下走，对应到函数中，就是找到给定点的梯度 ，然后朝着梯度相反的方向，就能让函数值下降的最快！因为梯度的方向就是函数之变化最快的方向(在后面会详细解释)</p><h4 id="前置知识：微分"><a href="#前置知识：微分" class="headerlink" title="前置知识：微分"></a>前置知识：微分</h4><p>看待微分的意义，可以有不同的角度，最常用的两种是：</p><ul><li>函数图像中，某点的切线的斜率</li></ul></li></ul><ul><li><p>函数的变化率<br>  几个微分的例子：</p><p>学习坡度下降法，必须以微分作为辅助</p><p>博主写过<a href="https://mavericreate.top/Zh-Blog/2020/04/28/Calculus/" target="_blank" rel="noopener">微积分</a>有关的笔记,感兴趣可以去看看</p><p>这里补充一下<strong>多变量微分</strong></p><p>就是对每个变量进行分别微分</p><script type="math/tex; mode=display">\cfrac{\partial}{\partial x}(x^2y^2)=2xy^2</script><script type="math/tex; mode=display">\cfrac{\partial}{\partial y}(-2y^5+z^2)=-10y^4</script><script type="math/tex; mode=display">\cfrac{\partial}{\partial \theta_2}(5\theta_1+2\theta_2-12\theta_3)=2</script><script type="math/tex; mode=display">\cfrac{\partial}{\partial \theta_2}(0.55-(5\theta_1+2\theta_2-12\theta_3)=-2</script><h4 id="梯度的概念"><a href="#梯度的概念" class="headerlink" title="梯度的概念"></a>梯度的概念</h4><p>梯度实际上就是多变量微分的一般化。</p></li></ul><p>  <img data-src="/Users/maverick/Desktop/PROGRAM/Mavericreate/Zh-Blog/source/_posts/Optimization-theory/20190121202415914.png" alt="20190121202415914"></p><p>我们可以看到，梯度就是分别对每个变量进行微分，然后用逗号分割开，梯度是用<>包括起来，说明梯度其实一个向量。</p><p>梯度是微积分中一个很重要的概念，之前提到过梯度的意义</p><ul><li>在<strong>单变量</strong>的函数中，梯度其实就是函数的<strong>微分</strong>，代表着函数在某个给定点的切线的斜率</li><li>在<strong>多变量</strong>函数中，梯度是一个<strong>向量</strong>，向量有方向，梯度的方向就指出了函数在给定点的上升最快的方向</li></ul><p><strong>这也就说明了为什么我们需要千方百计的求取梯度！</strong>我们需要到达山底，就需要在每一步观测到此时最陡峭的地方，梯度就恰巧告诉了我们这个方向。梯度的方向是函数在给定点上升最快的方向，那么梯度的反方向就是函数在给定点下降最快的方向，这正是我们所需要的。所以我们只要沿着梯度的方向一直走，就能走到局部的最低点。</p><p><strong>梯度垂直于等值线</strong></p><p><img data-src="/Users/maverick/Desktop/PROGRAM/Mavericreate/Zh-Blog/source/_posts/Optimization-theory/IMG_7F1340CFFEE8-1.jpeg" alt="IMG_7F1340CFFEE8-1"></p><h3 id="数学解释"><a href="#数学解释" class="headerlink" title="数学解释"></a><strong>数学解释</strong></h3><p>J是关于Θ的一个函数，我们当前所处的位置为Θ0点，要从这个点走到J的最小值点，也就是山底。首先我们先确定前进的方向，也就是梯度的反向，然后走一段距离的步长，也就是α，走完这个段步长，就到达了Θ1这个点！</p><p><img data-src="/Users/maverick/Desktop/PROGRAM/Mavericreate/Zh-Blog/source/_posts/Optimization-theory/20190121203434245.png" alt="20190121203434245"></p><h4 id="α"><a href="#α" class="headerlink" title="α"></a>α</h4><p>α在梯度下降算法中被称作为学习率或者步长，意味着我们可以通过α来控制每一步走的距离，以保证不要步子跨的太大扯着蛋，哈哈，其实就是不要走太快，错过了最低点。同时也要保证不要走的太慢，导致太阳下山了，还没有走到山下。所以α的选择在梯度下降法中往往是很重要的！α不能太大也不能太小，太小的话，可能导致迟迟走不到最低点，太大的话，会导致错过最低点！</p><h4 id="⚠️"><a href="#⚠️" class="headerlink" title="⚠️"></a>⚠️</h4><p>梯度前加一个负号，就意味着朝着梯度相反的方向前进！我们在前文提到，梯度的方向实际就是函数在此点上升最快的方向！而我们需要朝着下降最快的方向走，自然就是负的梯度的方向，所以此处需要加上负号；<strong>那么如果时上坡，也就是梯度上升算法，当然就不需要添加负号了。</strong></p><h3 id="两个栗子🌰"><a href="#两个栗子🌰" class="headerlink" title="两个栗子🌰"></a>两个栗子🌰</h3><h4 id="单变量函数"><a href="#单变量函数" class="headerlink" title="单变量函数"></a>单变量函数</h4><p>有一个二次函数</p><script type="math/tex; mode=display">J(x)=x^2</script><p>轻易求出微分</p><script type="math/tex; mode=display">J\prime(x)=x^2</script><p>然后设置容易起点</p><script type="math/tex; mode=display">x^0=1</script><p>将学习率设置成<script type="math/tex">a</script></p><p>然后根据公式我们进行迭代计算</p><p><img data-src="/Users/maverick/Desktop/PROGRAM/Mavericreate/Zh-Blog/source/_posts/Optimization-theory/20190121204443599.png" alt="20190121204443599"></p><p>如图，经过四次的运算，也就是走了四步，基本就抵达了函数的最低点，也就是山底</p><p><img data-src="/Users/maverick/Desktop/PROGRAM/Mavericreate/Zh-Blog/source/_posts/Optimization-theory/20190121204511639.png" alt="20190121204511639"></p><h4 id="多变量函数"><a href="#多变量函数" class="headerlink" title="多变量函数"></a>多变量函数</h4><p>有一个复合函数</p><script type="math/tex; mode=display">J(x)=a^2+b^2</script><p>现在要通过梯度下降法计算这个函数的最小值。我们通过观察就能发现最小值其实就是 (0，0)点。但是接下来，我们会从梯度下降算法开始一步步计算到这个最小值！<br>我们假设初始的起点为：</p><script type="math/tex; mode=display">(1,3)</script><p>假设学习率为：</p><script type="math/tex; mode=display">a=0.1</script><p><img data-src="/Users/maverick/Desktop/PROGRAM/Mavericreate/Zh-Blog/source/_posts/Optimization-theory/Screen Shot 2020-05-10 at 11.38.38 AM.png" alt="Screen Shot 2020-05-10 at 11.38.38 AM"></p><p>我们发现，已经基本靠近函数的最小值点</p><p><img data-src="/Users/maverick/Desktop/PROGRAM/Mavericreate/Zh-Blog/source/_posts/Optimization-theory/20190121205401244.png" alt="20190121205401244"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>下面我们将用python实现一个简单的梯度下降算法。场景是一个简单的线性回归的例子：假设现在我们有一系列的点，如下图所示：</p><p><img data-src="/Users/maverick/Desktop/PROGRAM/Mavericreate/Zh-Blog/source/_posts/Optimization-theory/20190122144234426.png" alt="20190122144234426"></p><p>我们将用梯度下降法来拟合出这条直线！</p><p>首先，我们需要定义一个代价函数，在此我们选用<a href="https://en.wikipedia.org/wiki/Least_squares" target="_blank" rel="noopener"><strong>均方误差代价函数</strong></a>（也称平方误差代价函数）</p><p><img data-src="/Users/maverick/Desktop/PROGRAM/Mavericreate/Zh-Blog/source/_posts/Optimization-theory/20190121205801690.png" alt="20190121205801690"></p><p>此公式中</p><ul><li>m是数据集中数据点的个数，也就是样本数</li><li>½是一个常量，这样是为了在求梯度的时候，二次方乘下来的2就和这里的½抵消了，自然就没有多余的常数系数，方便后续的计算，同时对结果不会有影响</li><li>y 是数据集中每个点的真实y坐标的值，也就是类标签</li><li>h 是我们的预测函数（假设函数），根据每一个输入x，根据Θ 计算得到预测的y值，即<script type="math/tex">h_\theta(x^i)=\theta_0+\theta_1x_{1}^{(i)}</script></li></ul><p>我们可以根据代价函数看到，代价函数中的变量有两个，所以是一个多变量的梯度下降问题，求解出代价函数的梯度，也就是分别对两个变量进行微分</p><p><img data-src="/Users/maverick/Desktop/PROGRAM/Mavericreate/Zh-Blog/source/_posts/Optimization-theory/20190121210243732.png" alt="20190121210243732"></p><p>明确了代价函数和梯度，以及预测的函数形式。我们就可以开始编写代码了。但在这之前，需要说明一点，就是为了方便代码的编写，我们会将所有的公式都转换为矩阵的形式，python中计算矩阵是非常方便的，同时代码也会变得非常的简洁。<br>为了转换为矩阵的计算，我们观察到预测函数的形式</p><script type="math/tex; mode=display">h_\theta(x^i)=\theta_0+\theta_1x_{1}^{(i)}</script><p>我们有两个变量，为了对这个公式进行矩阵化，我们可以给每一个点x增加一维，这一维的值固定为1，这一维将会乘到Θ0上。这样就方便我们统一矩阵化的计算</p><script type="math/tex; mode=display">(x_{1}^i,x^i)\to(x_{0}^i,x_{1}^i,y^i)with x_{0}^i=1\forall i</script><p>然后我们将代价函数和梯度转化为矩阵向量相乘的形式</p><p><img data-src="/Users/maverick/Desktop/PROGRAM/Mavericreate/Zh-Blog/source/_posts/Optimization-theory/20190121210422733.png" alt="20190121210422733"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先，我们需要定义数据集和学习率</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集大小 即20个数据点</span></span><br><span class="line">m = <span class="number">20</span></span><br><span class="line"><span class="comment"># x的坐标以及对应的矩阵</span></span><br><span class="line">X0 = ones((m, <span class="number">1</span>))  <span class="comment"># 生成一个m行1列的向量，也就是x0，全是1</span></span><br><span class="line">X1 = arange(<span class="number">1</span>, m+<span class="number">1</span>).reshape(m, <span class="number">1</span>)  <span class="comment"># 生成一个m行1列的向量，也就是x1，从1到m</span></span><br><span class="line">X = hstack((X0, X1))  <span class="comment"># 按照列堆叠形成数组，其实就是样本数据</span></span><br><span class="line"><span class="comment"># 对应的y坐标</span></span><br><span class="line">Y = array([</span><br><span class="line">    <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">12</span>,</span><br><span class="line">    <span class="number">11</span>, <span class="number">13</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span></span><br><span class="line">]).reshape(m, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 学习率</span></span><br><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#接下来我们以矩阵向量的形式定义代价函数和代价函数的梯度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义代价函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost_function</span><span class="params">(theta, X, Y)</span>:</span></span><br><span class="line">    diff = dot(X, theta) - Y  <span class="comment"># dot() 数组需要像矩阵那样相乘，就需要用到dot()</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>/(<span class="number">2</span>*m)) * dot(diff.transpose(), diff)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义代价函数对应的梯度函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_function</span><span class="params">(theta, X, Y)</span>:</span></span><br><span class="line">    diff = dot(X, theta) - Y</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>/m) * dot(X.transpose(), diff)</span><br><span class="line"></span><br><span class="line"><span class="comment">#最后就是算法的核心部分，梯度下降迭代计算</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 梯度下降迭代</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span><span class="params">(X, Y, alpha)</span>:</span></span><br><span class="line">    theta = array([<span class="number">1</span>, <span class="number">1</span>]).reshape(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    gradient = gradient_function(theta, X, Y)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> all(abs(gradient) <= <span class="number">1e-5</span>):</span><br><span class="line">        theta = theta - alpha * gradient</span><br><span class="line">        gradient = gradient_function(theta, X, Y)</span><br><span class="line">    <span class="keyword">return</span> theta</span><br><span class="line"></span><br><span class="line"><span class="comment">#当梯度小于1e-5时，说明已经进入了比较平滑的状态，类似于山谷的状态，这时候再继续迭代效果也不大了，所以这个时候可以退出循环！</span></span><br><span class="line">optimal = gradient_descent(X, Y, alpha)</span><br><span class="line">print(<span class="string">'optimal:'</span>, optimal)</span><br><span class="line">print(<span class="string">'cost function:'</span>, cost_function(optimal, X, Y)[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过matplotlib画出图像，</span></span><br><span class="line"><span class="comment"># 根据数据画出对应的图像</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot</span><span class="params">(X, Y, theta)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">    ax = plt.subplot(<span class="number">111</span>)  <span class="comment"># 这是我改的</span></span><br><span class="line">    ax.scatter(X, Y, s=<span class="number">30</span>, c=<span class="string">"red"</span>, marker=<span class="string">"s"</span>)</span><br><span class="line">    plt.xlabel(<span class="string">"X"</span>)</span><br><span class="line">    plt.ylabel(<span class="string">"Y"</span>)</span><br><span class="line">    x = arange(<span class="number">0</span>, <span class="number">21</span>, <span class="number">0.2</span>)  <span class="comment"># x的范围</span></span><br><span class="line">    y = theta[<span class="number">0</span>] + theta[<span class="number">1</span>]*x</span><br><span class="line">    ax.plot(x, y)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">plot(X1, Y, optimal)</span><br></pre></td></tr></tbody></table></figure><h2 id="牛顿法"><a href="#牛顿法" class="headerlink" title="牛顿法"></a>牛顿法</h2><h3 id="应用方向"><a href="#应用方向" class="headerlink" title="应用方向"></a>应用方向</h3><p>1、求方程的根，2、最优化。</p><p><strong>牛顿法的核心思想是对函数进行泰勒展开。</strong></p><h3 id="求方程的根"><a href="#求方程的根" class="headerlink" title="求方程的根"></a>求方程的根</h3><p>并不是所有的方程都有求根公式，或者求根公式很复杂，导致求解困难。利用牛顿法，可以迭代求解。</p><p>原理是利用泰勒公式，在<script type="math/tex">x_0</script>处展开，且展开到一阶，即<script type="math/tex">f(x) = f(x_0)+(x－x_0)f'(x_0)</script></p><p>求解方程f(x)=0，即<script type="math/tex">f(x_0)+(x-x_0)*f'(x_0)=0</script>，求解<script type="math/tex">x = x_1=x_0－f(x_0)/f'(x_0)</script>，因为这是利用泰勒公式的一阶展开，<script type="math/tex">f(x) = f(x_0)+(x－x_0)f'(x_0)</script>处并不是完全相等，而是近似相等，这里求得的x1并不能让<script type="math/tex">f(x)=0</script>，只能说f(x1)的值比f(x0)更接近<script type="math/tex">f(x)=0</script>，于是乎，迭代求解的想法就很自然了，可以进而推出<script type="math/tex">x(n+1)=x(n)－f(x(n))/f'(x(n))</script>，通过迭代，这个式子必然在<script type="math/tex">f(x*)=0</script>的时候收敛。整个过程如下图：</p><p><img data-src="/Users/maverick/Desktop/PROGRAM/Mavericreate/Zh-Blog/source/_posts/Optimization-theory/0_1307263727Ezt0.gif.jpeg" alt="0_1307263727Ezt0.gif"></p><h3 id="最优化"><a href="#最优化" class="headerlink" title="最优化"></a>最优化</h3><p>在最优化的问题中，线性最优化至少可以使用单纯行法求解，但对于非线性优化问题，牛顿法提供了一种求解的办法。假设任务是优化一个目标函数f，求函数f的极大极小问题，可以转化为求解函数f的导数f’=0的问题，这样求可以把优化问题看成方程求解问题（f’=0）。剩下的问题就和第一部分提到的牛顿法求解很相似了。</p><p>这次为了求解f’=0的根，把f(x)的泰勒展开，展开到2阶形式：</p><script type="math/tex; mode=display">f(x+\Delta x)=f(x)+f'(x)\Delta x+f''(x)\Delta x^2/2</script><p>本式成立，且当<script type="math/tex">\Delta x</script>无限趋近于0时</p><script type="math/tex; mode=display">f'(x)+f''(x)\Delta x=0</script><p>求解</p><script type="math/tex; mode=display">\Delta x=-\cfrac{f'(x_n)}{f''(x_n)}</script><p>迭代公式为：</p><script type="math/tex; mode=display">x_{n+1}=x_n-\cfrac{f'(x_n)}{f''(x_n)},n=0,1...</script><p>一般认为牛顿法可以利用到曲线本身的信息，比梯度下降法更容易收敛（迭代更少次数），如下图是一个最小化一个目标方程的例子，红色曲线是利用牛顿法迭代求解，绿色曲线是利用梯度下降法求解。</p><p><img data-src="/Users/maverick/Desktop/PROGRAM/Mavericreate/Zh-Blog/source/_posts/Optimization-theory/0_1307264725FBQm.gif.png" alt="0_1307264725FBQm.gif"></p><p>在上面讨论的是2维情况，高维情况的牛顿迭代公式是：</p><script type="math/tex; mode=display">x_{n+1}=x_n-[Hf(x_n)]^{-1}\nabla f(x_n),n\ge0</script><p>其中H是hessian矩阵，定义为</p><p><img data-src="/Users/maverick/Desktop/PROGRAM/Mavericreate/Zh-Blog/source/_posts/Optimization-theory/0_1307264821uw1Y.gif.png" alt="0_1307264821uw1Y.gif"></p><p>高维情况依然可以用牛顿迭代求解，但是问题是Hessian矩阵引入的复杂性，使得牛顿迭代求解的难度大大增加，但是已经有了解决这个问题的办法就是Quasi-Newton methond，不再直接计算hessian矩阵，而是每一步的时候使用梯度向量更新hessian矩阵的近似。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>1.<a href="https://blog.csdn.net/qq_41800366/article/details/86583789" target="_blank" rel="noopener">https://blog.csdn.net/qq_41800366/article/details/86583789</a></p><p>2.<a href="https://blog.csdn.net/michaelhan3/article/details/82350047" target="_blank" rel="noopener">https://blog.csdn.net/michaelhan3/article/details/82350047</a></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;在特定约束条件下，选择变量值，是目标函数最大化/最小化&lt;/p&gt;
&lt;h2 id=&quot;分类：&quot;&gt;&lt;a href=&quot;#分类：&quot; class=&quot;headerlink&quot; title=&quot;分类：&quot;&gt;&lt;/a&gt;分类：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;优化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据&lt;ul&gt;
&lt;li&gt;离散&lt;/li&gt;
&lt;li&gt;连续&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;条件&lt;ul&gt;
&lt;li&gt;无拘束&lt;/li&gt;
&lt;li&gt;有拘束&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函数&lt;ul&gt;
&lt;li&gt;线性&lt;/li&gt;
&lt;li&gt;非线性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目标&lt;ul&gt;
&lt;li&gt;单目标&lt;/li&gt;
&lt;li&gt;多目标&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/MaverickTang/Zh-Blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数学" scheme="https://github.com/MaverickTang/Zh-Blog/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>马克代夫理论</title>
    <link href="https://github.com/MaverickTang/Zh-Blog/2020/05/10/stochastic-process/"/>
    <id>https://github.com/MaverickTang/Zh-Blog/2020/05/10/stochastic-process/</id>
    <published>2020-05-10T15:45:06.000Z</published>
    <updated>2021-02-08T00:02:40.598Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="随机过程是什么？"><a href="#随机过程是什么？" class="headerlink" title="随机过程是什么？"></a>随机过程是什么？</h1><p>一般来说，把一组随机变量定义为随机过程。在研究随机过程时人们透过表面的偶然性描述出必然的内在规律并以概率的形式来描述这些规律，从偶然中悟出必然正是这一学科的魅力所在。</p><p>整个学科的理论基础是由柯尔莫哥洛夫和杜布奠定的。这一学科最早源于对物理学的研究，如吉布斯、玻尔兹曼、庞加莱等人对统计力学的研究，及后来爱因斯坦、维纳、莱维等人对布朗运动的开创性工作。</p><a id="more"></a><h1 id="高斯过程"><a href="#高斯过程" class="headerlink" title="高斯过程"></a>高斯过程</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>高斯过程（Gaussian Process, GP）是概率论和数理统计中随机过程（stochastic process）的一种，是一系列服从正态分布的随机变量（random variable）在一指数集（index set）内的组合</p><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul><li>高斯过程模型属于无参数模型，相对解决的问题复杂度及与其它算法比较减少了算法计算量。</li><li>高斯模型可以解决高维空间（实际上是无限维）的数学问题，可以面对负杂的数学问题。</li><li>结合贝叶斯概率算法，可以实现通过先验概率，推导未知后验输入变量的后验概率。由果推因的概率。<br>高斯过程观测变量空间是连续域，时间或空间。</li><li>高斯过程观测变量空间是实数域的时候，我们就可以进行回归而实现预测。</li><li>高斯过程观测变量空间是整数域的时候（观测点是离散的），我们就可以进行分类。结合贝叶斯算法甚至可以实现单类分类学习（训练），面对小样本就可以实现半监督学习而后完成分类。面对异常检测领域很有用，降低打标签成本（小样本且单类即可训练模型）。 </li></ul><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>为了了解高斯过程，我们需要知道高斯分布（函数）、随机过程、以及贝叶斯概率等。。。</p><p>MD不学了。。。</p><p>前置知识高斯分布杀了我。。。</p><p>坑挖好了以后再填</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;随机过程是什么？&quot;&gt;&lt;a href=&quot;#随机过程是什么？&quot; class=&quot;headerlink&quot; title=&quot;随机过程是什么？&quot;&gt;&lt;/a&gt;随机过程是什么？&lt;/h1&gt;&lt;p&gt;一般来说，把一组随机变量定义为随机过程。在研究随机过程时人们透过表面的偶然性描述出必然的内在规律并以概率的形式来描述这些规律，从偶然中悟出必然正是这一学科的魅力所在。&lt;/p&gt;
&lt;p&gt;整个学科的理论基础是由柯尔莫哥洛夫和杜布奠定的。这一学科最早源于对物理学的研究，如吉布斯、玻尔兹曼、庞加莱等人对统计力学的研究，及后来爱因斯坦、维纳、莱维等人对布朗运动的开创性工作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/MaverickTang/Zh-Blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数学" scheme="https://github.com/MaverickTang/Zh-Blog/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>微积分</title>
    <link href="https://github.com/MaverickTang/Zh-Blog/2020/04/28/Calculus/"/>
    <id>https://github.com/MaverickTang/Zh-Blog/2020/04/28/Calculus/</id>
    <published>2020-04-27T16:11:55.000Z</published>
    <updated>2021-02-08T00:01:12.046Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>微积分的英语 “Calculus” 源自拉丁语，意思是 “小石头”，<br>因为它是从分析小的部分来了解大的整体。</p><p><strong>微分</strong>是把整体分拆为小部分来求它怎样改变。</p><p><strong>积分</strong>是把小部分连接（积）在一起来求整体有多大。</p><a id="more"></a> <h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><p>割圆术书中说写：</p><p>“割之弥细，所失弥少，割之又割，以至于不可割，则与圆周盒体而无所失矣”</p><p><img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/IMG_D72A687BA35F-1.jpeg" alt="IMG_D72A687BA35F-1"></p><p>其实就是我们今天学习微积分的思想</p><h3 id="无穷大的概念"><a href="#无穷大的概念" class="headerlink" title="无穷大的概念"></a>无穷大的概念</h3><p><a href="https://www.shuxuele.com/numbers/infinity.html" target="_blank" rel="noopener">无穷大</a> 是个很特别的概念。我们知道不能达到无穷大，但我们可以尝试去求含有无穷大的函数的值。</p><script type="math/tex; mode=display">\cfrac{1}{\infty}$$就好像 $$\cfrac{1}{美}$$or $$\cfrac{1}{高}$$一样。虽然我们不能低于无穷但是我们可以趋近于它所以就有了极限标志lim下面加箭头表示趋近于前置笔记：$$\lim$$：极限标志### Ex.![lim-1-x](/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/lim-1-x.png)不要被这个 "="号迷惑了！我们其实无法**等于**0，但在 "极限" 的语言里，**极限是无穷大** （意思其实是函数没有极限）。### Harder Ex.有一个 [**e(欧拉数)**](https://www.shuxuele.com/numbers/e-eulers-number.html) 的公式是基于无穷大和这个公式的：$$(1+\cfrac{1}{n})^n</script><p>~~So, what the hell is <script type="math/tex">(1+\cfrac{1}{\infin})^\infin</script>????~</p><p>先用枚举看看吧：</p><div class="table-container"><table><thead><tr><th style="text-align:center">n</th><th style="text-align:center"><script type="math/tex">(1+\cfrac{1}{n})^n</script></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">2.00000</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">2.59374</td></tr><tr><td style="text-align:center">1,000</td><td style="text-align:center">2.71692</td></tr><tr><td style="text-align:center">100,000</td><td style="text-align:center">2.71827</td></tr></tbody></table></div><p>结果会无限趋近于<strong>2.71828</strong>…,这就是<script type="math/tex">e</script>的值</p><p>所以</p><p><img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/lim-1-1n-n.png" alt="lim-1-1n-n"></p><h3 id="不要犯错-……"><a href="#不要犯错-……" class="headerlink" title="不要犯错 …… !"></a>不要犯错 …… !</h3><p>在图和列列表上我们看到当 <strong>n</strong> 越来越大时，函数趋近 <strong>2.71828……</strong></p><p>但如果我们想把无穷大当作一个 “很大的实数” （<strong><em>它不是！</em></strong>），我们会得到：</p><script type="math/tex; mode=display">(1+\cfrac{1}{\infin})^\infin=(1+0)^\infin=1</script><p>故事的寓意是：不要把无穷大当作一个实数：你会得到<strong>错误的答案</strong>！</p><p>极限才是正途。</p><h3 id="极限的求法"><a href="#极限的求法" class="headerlink" title="极限的求法"></a>极限的求法</h3><h4 id="一、代入变量的值"><a href="#一、代入变量的值" class="headerlink" title="一、代入变量的值"></a>一、代入变量的值</h4><p>首先要尝试的方法是代入变量的值，来看看可不可以直接算出答案（换句话说，<a href="https://www.shuxuele.com/algebra/substitution.html" target="_blank" rel="noopener">代换</a>）。</p><p>试试一些例子：</p><div class="table-container"><table><thead><tr><th>例子</th><th>代入</th><th>结果</th></tr></thead><tbody><tr><td><img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/lim-x2m1-xm1.png" alt="lim-x2m1-xm1"></td><td><script type="math/tex">\cfrac{1-1}{1-1}=\cfrac{0}{0}</script></td><td>失败</td></tr><tr><td></td><td></td><td></td></tr><tr><td><img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/lim-x-2a.png" alt="lim-x-2a"></td><td><script type="math/tex">\cfrac{10}{2}=5</script></td><td>成功</td></tr></tbody></table></div><p>在第一个例子里，代换法不管用，但在第二个例子里我们很容易得到答案。 </p><h4 id="二、因式"><a href="#二、因式" class="headerlink" title="二、因式"></a>二、因式</h4><p>我们可以尝试 <a href="https://www.shuxuele.com/algebra/factoring.html" target="_blank" rel="noopener">因式分解</a>。</p><p><img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/1.png" alt="1"></p><h4 id="三、共轭"><a href="#三、共轭" class="headerlink" title="三、共轭"></a>三、共轭</h4><p>若函数是个分数，把上面和下面乘以<a href="https://www.shuxuele.com/algebra/conjugate.html" target="_blank" rel="noopener">共轭</a> 可能会有帮助。</p><p><strong>共轭</strong>是把 把两个项之间的正负号倒转…</p><p><img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/2.png" alt="2"> </p><h4 id="正式方法"><a href="#正式方法" class="headerlink" title="正式方法"></a>正式方法</h4><p><strong>前置概念</strong></p><script type="math/tex; mode=display">\delta$$:|x−a| 要小于的值$$\epsilon$$:|f(x)−L| 要小于的值然后。。。（引出定义*"对于任何$$\epsilon$$>0，有$$\delta$$>0，从而使得当 0<|x−a|其实就是*当 **x 趋近 a** 时，**f(x) 趋近 L**。**Ex .**证明：![lim-2xp4](/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/lim-2xp4.png)用上面的字母：x 趋近的值 "a" 是 3极限 "L" 是 10所以我们需要知道：怎样从：0<|x-3|<$$\delta</script><p>得到|(2x+4)-10|<<script type="math/tex">\epsilon</script></p><p>我们发现：</p><script type="math/tex; mode=display">|(2x+4)-10|=2|x-3|</script><p>所以需要证明</p><script type="math/tex; mode=display">\delta=\cfrac{\epsilon}{2}</script><p>操作一波</p><p><img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/Screen Shot 2020-04-27 at 11.28.24 AM.png" alt="Screen Shot 2020-04-27 at 11.28.24 AM"></p><p>所以<script type="math/tex">\delta=\cfrac{\epsilon}{2}</script></p><p>所以<img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/lim-2xp4.png" alt="lim-2xp4">为真</p><h2 id="导数（微分）"><a href="#导数（微分）" class="headerlink" title="导数（微分）"></a>导数（微分）</h2><p>如果我们要求出一个曲线函数的在某点切线的斜率</p><p>我们先找到另一个点做出它的割线</p><p>我们知道另一个点横坐标为x+<script type="math/tex">x\prime</script></p><p>当这个<script type="math/tex">x\prime</script>无限接近于0</p><p>这个割线就无限接近切线</p><p>所以我们得出以下式子</p><p><img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/IMG_16F54B4F06AE-1.jpeg" alt="IMG_16F54B4F06AE-1"></p><h3 id="Ex"><a href="#Ex" class="headerlink" title="Ex."></a>Ex.</h3><p><img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/IMG_6B3BCEF400D1-1.jpeg" alt="IMG_6B3BCEF400D1-1"></p><h3 id="Harder-EX"><a href="#Harder-EX" class="headerlink" title="Harder EX."></a>Harder EX.</h3><p><img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/IMG_0040.JPG" alt="IMG_0040"></p><h3 id="组合函数求导"><a href="#组合函数求导" class="headerlink" title="组合函数求导"></a>组合函数求导</h3><h4 id="函数相加求导"><a href="#函数相加求导" class="headerlink" title="函数相加求导"></a>函数相加求导</h4><p>证明：<script type="math/tex">(u+v)\prime=u\prime+v\prime</script></p><p><img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/IMG_09FE7B91BA3D-1.jpeg" alt="IMG_09FE7B91BA3D-1"></p><p>所以相加就是导函数相加</p><p>减法同理</p><h4 id="函数相乘求导"><a href="#函数相乘求导" class="headerlink" title="函数相乘求导"></a>函数相乘求导</h4><p>证明：<script type="math/tex">(uv)\prime=vu\prime+uv\prime</script></p><p><img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/IMG_AD8B13A27E62-1.jpeg" alt="IMG_AD8B13A27E62-1"></p><h4 id="函数相除求导"><a href="#函数相除求导" class="headerlink" title="函数相除求导"></a>函数相除求导</h4><p>求<script type="math/tex">(\cfrac{u}{v})\prime</script></p><p><img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/IMG_17F3417BF094-1.jpeg" alt="IMG_17F3417BF094-1"></p><p>所以</p><p><img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/IMG_0A2DE40926AF-1.jpeg" alt="IMG_0A2DE40926AF-1"></p><h4 id="链式法则"><a href="#链式法则" class="headerlink" title="链式法则"></a>链式法则</h4><p>就是函数套函数</p><script type="math/tex; mode=display">\cfrac{d}{dt}f(g(t))=f\prime(g(t))g\prime(t)</script><p><strong>Ex.</strong></p><script type="math/tex; mode=display">\cfrac{d}{dt}cos(\cfrac{1}{x})=?</script><script type="math/tex; mode=display">u=\cfrac{1}{x}</script><script type="math/tex; mode=display">\cfrac{d}{dt}cos(\cfrac{1}{x})=\cfrac{d}{dt}cos(u)=\cfrac{dy}{du}\cfrac{du}{dx}</script><script type="math/tex; mode=display">\cfrac{dy}{du}=-sin(x)$$,$$\cfrac{du}{dx}=-\cfrac{1}{x^2}</script><p>所以<script type="math/tex">\cfrac{d}{dt}cos(\cfrac{1}{x})=\cfrac{sin(x)}{x^2}</script></p><h3 id="常见函数导数表"><a href="#常见函数导数表" class="headerlink" title="常见函数导数表"></a>常见函数导数表</h3><div class="table-container"><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">原函数</th><th style="text-align:left">导函数</th></tr></thead><tbody><tr><td style="text-align:left"><strong><a href="https://baike.baidu.com/item/常函数" target="_blank" rel="noopener">常函数</a></strong>（即<a href="https://baike.baidu.com/item/常数" target="_blank" rel="noopener">常数</a>）</td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/6f48ec146bf185699bc793e94d05f60c.svg" alt="img"> （<strong><em>C</em></strong>为常数）</td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/15f6a7e0845b60eb9ed8427160296c47.svg" alt="img"></td></tr><tr><td style="text-align:left"><a href="https://baike.baidu.com/item/指数函数" target="_blank" rel="noopener">指数函数</a></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/e3ce5e293d27391048a34d21dcfc3567.svg" alt="img"><img data-src="https://bkimg.cdn.bcebos.com/formula/05e9641809287619ff141f1164b91e53.svg" alt="img"></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/4b6aee932e78102b6f74485207ea795a.svg" alt="img"><img data-src="https://bkimg.cdn.bcebos.com/formula/de427c0dc7c47809361c6a97589488a6.svg" alt="img"></td></tr><tr><td style="text-align:left"><a href="https://baike.baidu.com/item/幂函数" target="_blank" rel="noopener">幂函数</a></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/ef7655a674eb56e73d9d99106359cacc.svg" alt="img"></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/f6dc7856db120842c79d1ca28a478dd4.svg" alt="img"></td></tr><tr><td style="text-align:left"><a href="https://baike.baidu.com/item/对数函数" target="_blank" rel="noopener"><strong>对数函数</strong></a></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/e3a5370faa1c321a77c71dd984575883.svg" alt="img"><img data-src="https://bkimg.cdn.bcebos.com/formula/59db1598da0941dd96c8e4117487da5b.svg" alt="img"></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/94427a5ba59d65f7ae25adc82bcaeaa7.svg" alt="img"><img data-src="https://bkimg.cdn.bcebos.com/formula/04522b1455260aae6b2cd8fcbf4e38a0.svg" alt="img"></td></tr><tr><td style="text-align:left"><a href="https://baike.baidu.com/item/正弦函数" target="_blank" rel="noopener"><strong>正弦函数</strong></a></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/0f2cbbfff8dfdeb1795031afd5f4a447.svg" alt="img"></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/9b173723cd04f95cfe4baf428379aad7.svg" alt="img"></td></tr><tr><td style="text-align:left"><a href="https://baike.baidu.com/item/余弦函数" target="_blank" rel="noopener"><strong>余弦函数</strong></a></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/30270e38ed05100aa0d81333c4e23c7b.svg" alt="img"></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/dc299b291d088d3610622cd8b0fc1ac6.svg" alt="img"></td></tr><tr><td style="text-align:left"><a href="https://baike.baidu.com/item/正切函数" target="_blank" rel="noopener"><strong>正切函数</strong></a></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/0dd48f9fe0bac0914637e5681228b6b3.svg" alt="img"></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/f5384f2521c4739922680bd28169b921.svg" alt="img"></td></tr><tr><td style="text-align:left"><a href="https://baike.baidu.com/item/余切函数" target="_blank" rel="noopener"><strong>余切函数</strong></a></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/268e7f44dade45f540c5b7c7b1cbe1a2.svg" alt="img"></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/4cfb86aa2f73f9515e04e8f524fa119e.svg" alt="img"></td></tr><tr><td style="text-align:left"><a href="https://baike.baidu.com/item/正割函数" target="_blank" rel="noopener">正割函数</a></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/ea45be3b8ffb045e9fb3d47302b51821.svg" alt="img"></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/9e846814627a3a723deae8a734aac0ac.svg" alt="img"></td></tr><tr><td style="text-align:left"><a href="https://baike.baidu.com/item/余割函数" target="_blank" rel="noopener">余割函数</a></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/a2970da37d9e09326df1d5d179731f0b.svg" alt="img"></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/939714ac80e2f42f2a390c3cf969fbdf.svg" alt="img"></td></tr><tr><td style="text-align:left"><a href="https://baike.baidu.com/item/反正弦函数" target="_blank" rel="noopener"><strong>反正弦函数</strong></a></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/a8ed3000d5b75b60f541968571db44ed.svg" alt="img"></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/c41fb542290f578b45c5ed357218b457.svg" alt="img"></td></tr><tr><td style="text-align:left"><a href="https://baike.baidu.com/item/反余弦函数" target="_blank" rel="noopener"><strong>反余弦函数</strong></a></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/be4fe67defefcb2eac6169117c181c75.svg" alt="img"></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/133f624a66aacaf29fb99b9a817e5243.svg" alt="img"></td></tr><tr><td style="text-align:left"><a href="https://baike.baidu.com/item/反正切函数" target="_blank" rel="noopener"><strong>反正切函数</strong></a></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/e205cc5545e96047c124a85cfd2ffd4b.svg" alt="img"></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/cbd133df57d7a708144f6d6045437cb7.svg" alt="img"></td></tr><tr><td style="text-align:left"><a href="https://baike.baidu.com/item/反余切函数" target="_blank" rel="noopener"><strong>反余切函数</strong></a></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/5321da938d4f77b15cfd7fcb8a96708c.svg" alt="img"></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/e5ea6b41b6741a475c3e935700b4e543.svg" alt="img"></td></tr><tr><td style="text-align:left"><a href="https://baike.baidu.com/item/双曲线函数" target="_blank" rel="noopener">双曲线函数</a></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/10e067f173633456b45f91334f1e56ef.svg" alt="img"></td><td style="text-align:left"><img data-src="https://bkimg.cdn.bcebos.com/formula/7c508809a7081cc904bd5e143e6b701a.svg" alt="img"></td></tr></tbody></table></div><p>指数函数求导证明</p><p>Q：<script type="math/tex">\cfrac{d}{dx}a^{x}=?</script></p><p><img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/IMG_E7E19843F9EB-1.jpeg" alt="IMG_E7E19843F9EB-1"></p><p>对数函数求导证明</p><p>Q: <script type="math/tex">\cfrac{d}{dx}lnx=?</script></p><p><img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/IMG_1432BDEF57F6-1.jpeg" alt="IMG_1432BDEF57F6-1"></p><h3 id="上凹下凸（没有变色"><a href="#上凹下凸（没有变色" class="headerlink" title="上凹下凸（没有变色"></a>上凹下凸（没有变色</h3><p><img data-src="/Users/maverick/Desktop/Mavericreate/Zh-Blog/source/_posts/Calculus/Screen Shot 2020-04-27 at 3.04.04 PM.png" alt="Screen Shot 2020-04-27 at 3.04.04 PM"></p><h2 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h2><h2 id="微分方程"><a href="#微分方程" class="headerlink" title="微分方程"></a>微分方程</h2><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.shuxuele.com/calculus/index.html" target="_blank" rel="noopener">数学乐</a></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;微积分的英语 “Calculus” 源自拉丁语，意思是 “小石头”，&lt;br&gt;因为它是从分析小的部分来了解大的整体。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微分&lt;/strong&gt;是把整体分拆为小部分来求它怎样改变。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;积分&lt;/strong&gt;是把小部分连接（积）在一起来求整体有多大。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/MaverickTang/Zh-Blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数学" scheme="https://github.com/MaverickTang/Zh-Blog/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>线性代数</title>
    <link href="https://github.com/MaverickTang/Zh-Blog/2020/04/26/Linear-Algebra/"/>
    <id>https://github.com/MaverickTang/Zh-Blog/2020/04/26/Linear-Algebra/</id>
    <published>2020-04-26T03:18:31.000Z</published>
    <updated>2021-02-08T00:02:08.057Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>线性代数是<a href="https://baike.baidu.com/item/代数学" target="_blank" rel="noopener">代数学</a>的一个分支，主要处理线性关系问题。线性关系意即数学对象之间的关系是以一次形式来表达的。</p><a id="more"></a><h3 id="标量"><a href="#标量" class="headerlink" title="标量"></a>标量</h3><p>Scalar，单独数字，通常小写</p><p>s $\in$ R : 定义实数标量s</p><p>n $\in$ N: 定义整数标量</p><h3 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h3><p>Vector，有序的一列数，通过次序索引，可确定一个每个单独的数</p><p><img data-src="https://s1.ax1x.com/2020/04/26/JgttDe.png" alt="JgttDe.png"></p><p>两向量相加遵循平行四边形法则</p><h4 id="向量的模"><a href="#向量的模" class="headerlink" title="向量的模"></a>向量的模</h4><script type="math/tex; mode=display">a = [x_{1} + x_{2} + x_{3}...+x_{n}]</script><script type="math/tex; mode=display">|a| = \sqrt{x_{1}^2 + x_{2}^2 + x_{3}^2...+x_{n}^2}</script><h4 id="向量与标量"><a href="#向量与标量" class="headerlink" title="向量与标量"></a>向量与标量</h4><script type="math/tex; mode=display">a = [x_{1} + x_{2} + x_{3}...+x_{n}]</script><ul><li>向量与标量相加</li></ul><p>s $\in$ R ，</p><script type="math/tex; mode=display">s+a=[s+x_{1},s+x_{2},s+x_{3},...s+x_{n}]</script><ul><li>向量与标量相加</li></ul><p>s $\in$ R ，</p><script type="math/tex; mode=display">sa=[sx_{1},sx_{2},sx_{3},...sx_{n}]</script><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><p>Matrix是二维数组，每个元素由两个索引确定，通常为大写字母。</p><ul><li>A$\in R^{m*n}$,高度为m，宽度为n的实体矩阵</li><li>$A_{ij}$第i行第j列的元素</li></ul><p>形状一样的矩阵才能相加</p><script type="math/tex; mode=display">C_{i,j}=A_{i,j}+B_{i,j}</script><p>矩阵加或乘标量都是每一项分别加或乘</p><h4 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h4><p>行列式是由一些数据排列成的方阵经过规定的计算方法而得到的一个数。当然，如果行列式中含有未知数，那么行列式就是一个多项式。它本质上代表一个数值。</p><p>一阶行列式</p><script type="math/tex; mode=display">|a_{1}|=a_{1}</script><p>二阶行列式</p><p><img data-src="https://images0.cnblogs.com/blog/585228/201312/25221220-2cb65b89f54f4d41ac20625a6f04ff96.png" alt="img"></p><p>三阶行列式</p><p><img data-src="https://images0.cnblogs.com/blog/585228/201312/25221223-9495bca891c845128392344653056d64.png" alt="img"></p><h4 id="张量"><a href="#张量" class="headerlink" title="张量"></a>张量</h4><p>（Tensor）三维的数组</p><h4 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h4><p><strong>向量乘法</strong></p><p>具有相同维度的向量，相乘得到一个标量</p><script type="math/tex; mode=display">\overline{a}*\overline{b}=|a||b|cos\theta</script><p><strong>矩阵与向量相乘</strong></p><p>矩阵列数（竖）=向量行数（横）</p><p>结果行数=矩阵行数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D=np.diag([<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>])<span class="comment">#创建对角矩阵</span></span><br><span class="line">X=np.array([<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">7</span>])<span class="comment">#创建向量</span></span><br><span class="line">np.dot(D,X)<span class="comment">#相乘</span></span><br><span class="line"><span class="comment">#得到array([6,8,6,7])</span></span><br></pre></td></tr></tbody></table></figure><p>向量*矩阵=另一个向量（Application：解方程组（Creamer‘s rule））</p><p><img data-src="https://s1.ax1x.com/2020/04/26/JgtaEd.png" alt="JgtaEd.png"></p><p><strong>Creamer’s rule</strong></p><p>算四次行列式。。。</p><p>对于如下四元一次方程组：</p><script type="math/tex; mode=display">a_{1}x_{1}+b_{1}x_{1}+c_{1}x_{3}+d_{1}x_{4}=e_{1}</script><script type="math/tex; mode=display">a_{2}x_{1}+b_{2}x_{1}+c_{2}x_{3}+d_{2}x_{4}=e_{2}</script><script type="math/tex; mode=display">a_{3}x_{1}+b_{3}x_{1}+c_{3}x_{3}+d_{3}x_{4}=e_{3}</script><script type="math/tex; mode=display">a_{4}x_{1}+b_{4}x_{1}+c_{4}x_{3}+d_{4}x_{4}=e_{4}</script><p>设如下行列式：</p><p><img data-src="https://s1.ax1x.com/2020/04/26/Jgtrgf.png" alt="Jgtrgf.png"></p><p>则原四元一次方程组的解为：</p><script type="math/tex; mode=display">x_{1}=\cfrac{D_{1}}{D}</script><script type="math/tex; mode=display">x_{2}=\cfrac{D_{2}}{D}</script><script type="math/tex; mode=display">x_{3}=\cfrac{D_{3}}{D}</script><script type="math/tex; mode=display">x_{4}=\cfrac{D_{4}}{D}</script><p><strong>矩阵相乘</strong></p><p><img data-src="https://s1.ax1x.com/2020/04/26/Jgd0eS.png" alt="Jgd0eS.png"></p><p>意义：</p><p><img data-src="https://s1.ax1x.com/2020/04/26/JgtdUA.png" alt="JgtdUA.png"></p><p><strong>矩阵转置</strong></p><p>Transpose：一对角线为轴的镜像</p><script type="math/tex; mode=display">(A^{T})_{i,j}=A{j,i}</script><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.array([<span class="number">6</span>,<span class="number">4</span>,<span class="number">24</span>],[<span class="number">1</span>,<span class="number">-9</span>,<span class="number">8</span>])</span><br><span class="line">A.T</span><br></pre></td></tr></tbody></table></figure><h4 id="特殊矩阵"><a href="#特殊矩阵" class="headerlink" title="特殊矩阵"></a>特殊矩阵</h4><h5 id="对角矩阵"><a href="#对角矩阵" class="headerlink" title="对角矩阵"></a>对角矩阵</h5><p>除对角线外，其余元素皆为0的矩阵</p><p>python生成方法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.diag([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="comment">#array([2,0,0]</span></span><br><span class="line"><span class="comment">#[0,3,0]</span></span><br><span class="line"><span class="comment">#[0,0,4])</span></span><br></pre></td></tr></tbody></table></figure><h5 id="对称矩阵"><a href="#对称矩阵" class="headerlink" title="对称矩阵"></a>对称矩阵</h5><script type="math/tex; mode=display">A=A^{T}</script><h5 id="单位矩阵"><a href="#单位矩阵" class="headerlink" title="单位矩阵"></a>单位矩阵</h5><p>Identity matrix，主对角线=1，其余位置元素为0</p><p><img data-src="https://s1.ax1x.com/2020/04/26/JgtD8P.png" alt="JgtD8P.png"></p><p>A*I=A</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.eye(<span class="number">3</span>)<span class="comment">#生成3*3的单位矩阵</span></span><br></pre></td></tr></tbody></table></figure><h5 id="逆矩阵"><a href="#逆矩阵" class="headerlink" title="逆矩阵"></a>逆矩阵</h5><script type="math/tex; mode=display">A*A^{-1}=I</script><p>逆矩阵需要:行数=列数</p><p>列向量之间<strong>线性无关</strong></p><p><strong>线性无关概念</strong>：</p><p>如果<script type="math/tex">\overline{a}=x\overline{b}+y\overline{c}</script></p><p>则a是b，c的线性组合</p><p>如果在一组向量中，任意向量都不能表示为其他向量的线性组合</p><p>则该向量<strong>线性无关</strong></p><p>求法（<strong>高斯消元</strong>）：</p><p>2X2</p><p><img data-src="https://i.loli.net/2020/04/26/i7Z4Y3cvhNLlqBR.png" alt="matrix-inverse-2x2.png"></p><p>3X3(多X多)</p><p><strong>高斯－若尔当 方法</strong></p><p>。。。。。。玩玩这些行 （加、乘或对换） 直至把矩阵 <strong>A</strong> 变成单位矩阵 <strong>I。</strong></p><p>在单位矩阵上也做一模一样的运算， 单位矩阵便会奇妙的变成 逆矩阵！</p><p><img data-src="https://i.loli.net/2020/04/26/RoQ1nUcpgZXVfIv.jpg" alt="-matrix-gauss-jordan1-98164240.jpg"></p><p><strong>“初等行运算”</strong>是简单的运算，像把行相加，乘，对换位置。。。</p><p><strong>Ex.</strong></p><p><img data-src="https://i.loli.net/2020/04/26/CG5f4SnypDYrFNu.png" alt="matrix-gauss-jordan2.png"></p><p><strong>余子式、代数余子式和伴随</strong></p><ul><li>求余子式矩阵，</li><li>转成代数余子式矩阵，</li><li>转成伴随矩阵，</li><li>乘以 1/行列式。</li></ul><p><strong>一余子式</strong></p><p>矩阵去掉使用在本行与本列的元素</p><script type="math/tex; mode=display">M_{i,j}=$$![20171027140549973.jpeg](https://i.loli.net/2020/04/26/FrEH23OTxzsDhw4.jpg)**二求代数余子式**$$C_{i,j}=(-1)^{i+j}M_{i,j}</script><p><strong>Ex.</strong></p><p><img data-src="https://i.loli.net/2020/04/26/9Y8LRAZjkJMW5On.png" alt="matrix-cofactors.png"></p><p><strong>三伴随</strong></p><p>“转置” 以上的矩阵。。。。。。就是沿对角线对调元素的位置（在对角线上的元素不变）</p><p><strong>Ex.</strong></p><p><img data-src="https://i.loli.net/2020/04/26/nYKeJZXADiwWagq.gif" alt="matrix-adjugate.gif"></p><p><strong>四乘以1/行列式</strong></p><p><img data-src="https://i.loli.net/2020/04/26/rAmX3Ujd5BtshZa.gif" alt="matrix-3x3-det-c.gif"></p><p>Python实现</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A=np.array([<span class="number">1</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">7</span>])</span><br><span class="line">A</span><br><span class="line">np.linalg.inv(A)</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;线性代数是&lt;a href=&quot;https://baike.baidu.com/item/代数学&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;代数学&lt;/a&gt;的一个分支，主要处理线性关系问题。线性关系意即数学对象之间的关系是以一次形式来表达的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/MaverickTang/Zh-Blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数学" scheme="https://github.com/MaverickTang/Zh-Blog/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>编程中的概率</title>
    <link href="https://github.com/MaverickTang/Zh-Blog/2020/04/26/Probability/"/>
    <id>https://github.com/MaverickTang/Zh-Blog/2020/04/26/Probability/</id>
    <published>2020-04-25T22:35:12.000Z</published>
    <updated>2021-02-08T00:02:28.222Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="概率论"><a href="#概率论" class="headerlink" title="概率论"></a>概率论</h2><p>表示不确定性声明的数学框架，提供量化不确定性的方法，也提出不确定声明的公理。</p><a id="more"></a><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>P(x)=0.5<br>频率派概率(Frequentist probablity)<br>抛硬币正面向上概率0.t<br><strong>可重复</strong>事件的频率<br>贝叶斯派概率(Bayesian probablity)<br>病人患病的概率<br><strong>不可重复</strong>事件的概率<br><strong>随机变量</strong>(random variable)是可以随机取不同值的变量<br>样本空间(概率对应面积)<br><img data-src="https://i.loli.net/2020/04/24/7MOBCdjAWilqXbh.jpg" alt="Alt"></p><h3 id="离散型概率分布"><a href="#离散型概率分布" class="headerlink" title="离散型概率分布"></a>离散型概率分布</h3><p>(Probablity mass function, PMF)将随机变量取得的每个状态映射到随机变量取得该状态的概率。</p><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><ul><li><p>P的定义域必须是X所有状态的集合。</p></li><li><p>对于x，0<=p<=1,不可能事件为0，必然发生的事件为1</p></li><li><p>归一化条件</p><script type="math/tex; mode=display">\sum P(x)=1</script></li></ul><h3 id="离散型均匀分布"><a href="#离散型均匀分布" class="headerlink" title="离散型均匀分布"></a>离散型均匀分布</h3><p>给定一个离散型变量x，有k种可能的状态(x1,x2,x3…)每种状态的可能性是相同的，即均匀分布(Uniform distribution),则其概率分布为：</p><script type="math/tex; mode=display">P{(x=x_{i})}=\cfrac{1}{k}</script><script type="math/tex; mode=display">\sum P(x=x_{i})=\sum P(\cfrac{1}{k})=\cfrac{k}{k}</script><h3 id="连续型概率分布"><a href="#连续型概率分布" class="headerlink" title="连续型概率分布"></a>连续型概率分布</h3><p>如果一个数为概率密度函数(Probabilty Density Function, PDF),则必须满足以下条件：</p><ul><li>P的定义域必须是X所有状态的集合</li><li>对于x，p(x)>=0(不要求小于等于1)</li><li><script type="math/tex; mode=display">\int P(x)dx=1</script></li><li>P(x)没有直接给出特定状态的概率，而是：落在面积为Sx的无限小区域内的概率为p(x)Sx<br><img data-src="https://i.loli.net/2020/04/24/aHCpzIAmsV2DfO7.jpg" alt="Alt"><br>只要<strong>所有面积加起来等于一</strong>就可以<br><img data-src="https://i.loli.net/2020/04/24/bEASKtlVgad8Dw5.jpg" alt="Alt"><h3 id="联合概率"><a href="#联合概率" class="headerlink" title="联合概率"></a>联合概率</h3>P(联合)=P(事件一)*P(事件二)<h3 id="边缘概率"><a href="#边缘概率" class="headerlink" title="边缘概率"></a>边缘概率</h3>P(边缘)=P(部分)+P(部分)<h3 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h3>P(y=yi|x=xi)=P(y=yi,x=xi(联合))/P(x=xi(其他情况))<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><img data-src="https://i.loli.net/2020/04/24/d2xvcHhbi4twDoX.jpg" alt="Alt"><br><img data-src="https://i.loli.net/2020/04/24/lTIVMay8EU53hOX.jpg" alt="Alt"><h2 id="独立性"><a href="#独立性" class="headerlink" title="独立性"></a>独立性</h2><h3 id="链式法则"><a href="#链式法则" class="headerlink" title="链式法则"></a>链式法则</h3>P(x,y,z)=P(x|y,z)P(y,z)=P(x|y,z)P(y|z)P(z)<br>若随机变量X，Y互相独立，则：<br>1.条件概率与条件<strong>无关</strong><br>P(x|y)=P(x|yprime(这里是y的反面))<br>2.添加/去除条件<strong>无影响</strong><br>P(x)=P(x|y)<br>3.联合概率<strong>等于</strong>边缘概率乘积<br>P(x,y)=P(x)P(Y)<br>独立：没有关系，不能提出线索</li><li>独立不是均匀，互斥</li><li>但是互斥一定不独立</li></ul><h2 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h2><h3 id="期望"><a href="#期望" class="headerlink" title="期望"></a>期望</h3><h4 id="图形化认识"><a href="#图形化认识" class="headerlink" title="图形化认识"></a>图形化认识</h4><p>概率=面积<br>期望=体积</p><script type="math/tex; mode=display">E[x]=\sum kP(x=k)$$(离散)$$E[x]=\int f(x)p(x)dx$$(连续)**Ex.**投一枚均匀骰子，期望？$$E[x]=\cfrac{1}{6}*1+\cfrac{1}{6}*2+\cfrac{1}{6}*3+\cfrac{1}{6}*4+\cfrac{1}{6}*5+\cfrac{1}{6}*6=3.5</script><h4 id="期望值的数学性质"><a href="#期望值的数学性质" class="headerlink" title="期望值的数学性质"></a>期望值的数学性质</h4><p><img data-src="https://i.loli.net/2020/04/24/XEsioTpeVzuS9kn.jpg" alt="Alt"><br>E[x+c]=E[x]+c<br>E[cx]=cE[x]<br>E[x+y]=E[x]+E[y]<br>下条当且仅当<strong>xy相互独立</strong>时成立<br>E[xy]=E[x]E [y]</p><h4 id="期望与均值"><a href="#期望与均值" class="headerlink" title="期望与均值"></a>期望与均值</h4><p>期望E[x]为固定值，平均值是变化值<br>重复次数越多，平均值愈接近期望值</p><h3 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h3><p>衡量随机变量的离散情况<br>也是一种期望，是随机变量偏离度的期望<br>V[x]=E[(x-u(平均值))^(2)]<br>V[x+c]=v[x]<br>V[cx]=c^(2)V[x]<br><strong>方差非线性</strong><br>仅当<strong>x，y相互独立</strong>时<br>V[x+y]=v[x]+v[y]</p><h3 id="协方差"><a href="#协方差" class="headerlink" title="协方差"></a>协方差</h3><p>给出了两个变量线性相关性的强度<br>Cov[x,y]=E[(x-u)(y-v)]<br>对比方差</p><script type="math/tex; mode=display">V[x]=E[(x-u)^2]</script><p>协方差是方差定义的补充</p><h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><p>(x-u)与(x-v)符号相同：协方差为正<br>代表一方大于期望值，另一方<strong>也</strong>大于期望值的概率高<br>(x-u)与(x-v)符号相反：协方差为负</p><h4 id="数学性质"><a href="#数学性质" class="headerlink" title="数学性质"></a>数学性质</h4><p>Cov[x,x]=(方差)V[x]<br>Cov[x,y]=Cov[y,x]<br>Cov[x+a,y+b]=Cov[x,y]<br>Cov[ax,by]=abCov[x,y]<br>Cov[ax,by]=E[(ax-au)(by-bv)]=abE[(a-u)(b-v)]</p><h4 id="独立变量的协方差"><a href="#独立变量的协方差" class="headerlink" title="独立变量的协方差"></a>独立变量的协方差</h4><p>若x，y相互独立，则协方差为0<br>cov[x,y]=E[(x-u)(y-u)]=E[x-u][y-u]=0<br>变量独立则线性无关，=协方差为0</p><h4 id="Ex"><a href="#Ex" class="headerlink" title="Ex."></a>Ex.</h4><p><img data-src="https://i.loli.net/2020/04/25/9y6zlFtRSxpOku5.jpg" alt="Alt"></p><h3 id="标准差"><a href="#标准差" class="headerlink" title="标准差"></a>标准差</h3><p>方差是随机变量的平方，不能直接比较<br><img data-src="https://i.loli.net/2020/04/25/dn8r39Z51pwWQIs.jpg" alt="Alt"></p><h4 id="相关系数"><a href="#相关系数" class="headerlink" title="相关系数"></a>相关系数</h4><p><img data-src="https://i.loli.net/2020/04/25/G2QuNhSAHjxCF9n.jpg" alt="Alt"></p><h2 id="常用概率分布"><a href="#常用概率分布" class="headerlink" title="常用概率分布"></a>常用概率分布</h2><h3 id="伯努利分布"><a href="#伯努利分布" class="headerlink" title="伯努利分布"></a>伯努利分布</h3><p>(Bernouli distribution)是单个二值随机变量的分布，由p属于[0,1]控制，p即是随机变量=1的概率<br>P(x=1)=p<br>P(x=0)=1-p=q<br>E[x]=1p+0(1-p)=p<br>V[x]=E[x^(2)]-E[x]^(2)=p-p^(2)=p(1-p)=pq</p><h3 id="二项分布"><a href="#二项分布" class="headerlink" title="二项分布"></a>二项分布</h3><p>(Binomial distribution):硬币正面向上的概率为P时，抛硬币n次后正面向上的概率。<br>二项分布是伯努利分布的叠加x=z1+z2+…+zn,计作Bn(n,p)<br><img data-src="https://i.loli.net/2020/04/25/PV7oGMZH4AIvQhk.jpg" alt="Alt"></p><h3 id="正态分布（高斯分布）"><a href="#正态分布（高斯分布）" class="headerlink" title="正态分布（高斯分布）"></a>正态分布（高斯分布）</h3><p>标准正态分布<br>期望为0，方差为1<br><img data-src="https://i.loli.net/2020/04/25/DqYm4WgyJZz1tAM.jpg" alt="Alt"></p><h2 id="贝叶斯定律"><a href="#贝叶斯定律" class="headerlink" title="贝叶斯定律"></a>贝叶斯定律</h2><p><img data-src="https://i.loli.net/2020/04/25/ZXEqlR39T2ujAC5.jpg" alt="Alt"><br>Ex.<br><img data-src="https://i.loli.net/2020/04/25/NhJLM3B6Tf9bktl.jpg" alt="Alt"><br><img data-src="https://i.loli.net/2020/04/25/Ag8aWQ4KmjZ6zpD.jpg" alt="Alt"></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概率论&quot;&gt;&lt;a href=&quot;#概率论&quot; class=&quot;headerlink&quot; title=&quot;概率论&quot;&gt;&lt;/a&gt;概率论&lt;/h2&gt;&lt;p&gt;表示不确定性声明的数学框架，提供量化不确定性的方法，也提出不确定声明的公理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/MaverickTang/Zh-Blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数学" scheme="https://github.com/MaverickTang/Zh-Blog/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>暑假计划</title>
    <link href="https://github.com/MaverickTang/Zh-Blog/2020/04/05/Summer-plan/"/>
    <id>https://github.com/MaverickTang/Zh-Blog/2020/04/05/Summer-plan/</id>
    <published>2020-04-04T16:46:19.000Z</published>
    <updated>2021-01-02T07:03:33.932Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博主因为太菜了所以被迫回国继续国内高中（<a href="https://mavericreate.top/Blogs/2020/03/21/American-Memory/#more" target="_blank" rel="noopener">详情</a></p><p>但是因为在国外呆一年</p><p>数学科学语文等学科全部被削</p><p>英语跟别人比也弱的一批</p><a id="more"></a><p>托福只有76分</p><p>像我这种人只有靠努力qaq</p><p><img data-src="https://s1.ax1x.com/2020/04/04/Gd5Rdx.jpg" alt="Gd5Rdx.jpg"></p><p>关键是努力还不自觉</p><p>就只有先把计划打在公屏上</p><p>反正博主这个暑假又是一个没有作业的暑假qaq</p><h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><h3 id="语文"><a href="#语文" class="headerlink" title="语文"></a>语文</h3><h4 id="背书"><a href="#背书" class="headerlink" title="背书"></a>背书</h4><p>暑假精通<strong>文言文</strong></p><p><del>想屁吃</del></p><p>和英语晨读一天换一个</p><h4 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h4><p>家里一堆书慢慢啃</p><p>优先读<strong>心理学与哲学</strong></p><p>不要问为什么</p><p><del>因为原本计划明年学AP Psychology</del></p><h4 id="写书（误"><a href="#写书（误" class="headerlink" title="写书（误"></a>写书（误</h4><p>作文太差了</p><p>多写<strong>写博客</strong>吧（逃</p><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>快被削成美国人的水平了。。。</p><p>先按照板块复习学校的东西（最好做N套模拟题）</p><p>模考分数做到<strong>135+</strong>吧（想屁吃ing</p><p>学有余力可以学学<strong>程序员的数学</strong></p><p>再有余力就去康康<strong>AMC</strong>的题</p><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>考完托福后就松懈下来没怎么看托福了</p><p>国内英语考试肯定不怂了</p><p>那就<strong>一周熟读二篇新概念英语4</strong>吧</p><p>然后背托福单词</p><p>学习托福句型</p><p>总之英语不能被削成中国人水平了</p><h3 id="理科"><a href="#理科" class="headerlink" title="理科"></a>理科</h3><p>物理化学生物实际上也快忘完了</p><p>还是得补</p><p>科科<strong>模拟考上85</strong>吧。。。</p><p>（想屁。。。。</p><h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><p>虽然不知道竞赛还有没有用</p><p>Noip还是要打的</p><p>然后。。。</p><p>为网站做一个<strong>微信小程序</strong></p><h1 id="详细计划"><a href="#详细计划" class="headerlink" title="详细计划"></a>详细计划</h1><h2 id="日计划"><a href="#日计划" class="headerlink" title="日计划"></a>日计划</h2><div class="table-container"><table><thead><tr><th style="text-align:center">时间</th><th style="text-align:center">Activity</th><th style="text-align:center">目标</th></tr></thead><tbody><tr><td style="text-align:center">7:00—7:45</td><td style="text-align:center">起床，吃饭，状态准备</td><td style="text-align:center">起床每次都想认真学习，后面才发现不可能，少浪费时间就够了</td></tr><tr><td style="text-align:center">7:45—8:30</td><td style="text-align:center">英语 \</td><td style="text-align:center">\</td><td>语文<strong>主</strong> 背诵学习</td><td>早起背东西效率高（开始迷信</td></tr><tr><td style="text-align:center">8:30—12:30</td><td style="text-align:center">学习，主要是复习中国学校内容</td><td style="text-align:center">中间可以考虑休息10-20分钟，就是学的时候一定要认真，根据当天计划调整</td></tr><tr><td style="text-align:center">12:30—13:00</td><td style="text-align:center">吃饭   （可能会从11点开始做饭）</td><td style="text-align:center">在美国学了做饭的话就不能麻烦家里人一直帮自己了</td></tr><tr><td style="text-align:center">13:00—14:00</td><td style="text-align:center">午休，看书</td><td style="text-align:center">开始编程之后看书的时间变少了，多看书思考，（睡觉是不可能睡觉的</td></tr><tr><td style="text-align:center">14:00—17:30</td><td style="text-align:center">学习，<strong>条件允许</strong>的话就多学学新东西</td><td style="text-align:center">这里就可以是编程一类的拓展，还有疯狂练题，允许休息10-20分钟♨️</td></tr><tr><td style="text-align:center">17:30—18:30</td><td style="text-align:center">健身  \</td><td style="text-align:center">\</td><td>足球 \</td><td>\</td><td>吉他</td><td>不能胖回原来那样，多运动减肥长高，而且足球，吉他约等于玩</td></tr><tr><td style="text-align:center">18:30—19:00</td><td style="text-align:center">吃饭，休息，(可能从6:00开始做饭)</td><td style="text-align:center">享受家庭时光</td></tr><tr><td style="text-align:center">19:00—21:00</td><td style="text-align:center">查漏<strong>补缺</strong>，如果没有什么好查漏的就看书</td><td style="text-align:center">学了就忘那就真的太溴了，关键是要感悟做题</td></tr><tr><td style="text-align:center">21:00—22:00</td><td style="text-align:center">写博客 \</td><td style="text-align:center">\</td><td>练英语 \</td><td>\</td><td>考模拟卷(?</td><td>自由安排时间，千万别浪费</td></tr><tr><td style="text-align:center">22:00—23:00</td><td style="text-align:center">学语文，背英语这种无聊的事适合睡前做</td><td style="text-align:center">这种时候就可以搞搞AP，SAT，TOFEL</td></tr></tbody></table></div><h2 id="周期计划"><a href="#周期计划" class="headerlink" title="周期计划"></a>周期计划</h2><p>学校的任务能够提前完成，是因为老师不知道你的极限，那么就只有靠自己试了（已完成</p><div class="table-container"><table><thead><tr><th>时间</th><th>Activity</th><th>目标</th></tr></thead><tbody><tr><td>4.10-4.20</td><td>游玩广州，回到成都，计划预实行与修改</td><td>美国时间4.20开学，中国则是21号</td></tr><tr><td>4.21-5.28</td><td>美国学校继续上课</td><td>不求别的，走之前先拿到全A（考完final感觉特有希望</td></tr></tbody></table></div><p><del>然后从5.29到8月20号都不用担心开学的事了</del>，差不多三个月的时间，提分看起来也不是想屁吃（前提是别浪费时间</p><div class="table-container"><table><thead><tr><th>时间</th><th>Activity</th><th>目标</th></tr></thead><tbody><tr><td>5.26—6.4</td><td>物化生以及数学水平恢复</td><td>先画思维导图，至少要把学过的内容每章都复习一遍，找到不好的章节（尤其是化学）</td></tr><tr><td>6.5—6.14</td><td>弱势知识点训练</td><td>先系统梳理概念，再集中练题</td></tr><tr><td>6.15—6.20</td><td>第一次模拟+弱点查找</td><td>做模拟题，找到自己的弱势知识点（一天一科可还行</td></tr><tr><td>6.21—6.25</td><td>总结，回馈，梳理</td><td>罗列弱点，弄懂知识点（相似题型做会做熟，总结对知识点运用</td></tr><tr><td>6.25—7.1</td><td>复习+试探性新内容学习</td><td>巩固原来的知识，再自学原来没学过的地方</td></tr><tr><td>7.1以后</td><td>计划调整留白期</td><td>可能回学校了</td></tr></tbody></table></div></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;博主因为太菜了所以被迫回国继续国内高中（&lt;a href=&quot;https://mavericreate.top/Blogs/2020/03/21/American-Memory/#more&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;详情&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是因为在国外呆一年&lt;/p&gt;
&lt;p&gt;数学科学语文等学科全部被削&lt;/p&gt;
&lt;p&gt;英语跟别人比也弱的一批&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/MaverickTang/Zh-Blog/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Flag" scheme="https://github.com/MaverickTang/Zh-Blog/tags/Flag/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建Outline-VPN科学上网</title>
    <link href="https://github.com/MaverickTang/Zh-Blog/2020/04/04/How-to-Outline/"/>
    <id>https://github.com/MaverickTang/Zh-Blog/2020/04/04/How-to-Outline/</id>
    <published>2020-04-03T22:17:03.000Z</published>
    <updated>2021-02-08T00:02:01.440Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Coronavirus期间回国，在网上继续上学校网课，需要使用Google docs还有Youtube. 幸好自己提前在米国部署了威PN。。。然后感觉写个科学上网指南是国内博客基操，就顺便写写。</p><p>注：科学上网一定是学习使用，不要不注意身体😯</p><a id="more"></a><h2 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h2><p>Macos系统</p><p>5美元（支付宝）</p><p>有一定Terminal（终端）的基础</p><p>一个可以用的云主机（需要地址在国外）</p><p>注意，vultr可能需要翻墙后才能访问，建议大家在mac上下载<strong>windscribe</strong>之后蹭免费流量搞一波</p><h2 id="购置服务器"><a href="#购置服务器" class="headerlink" title="购置服务器"></a>购置服务器</h2><p>打开<a href="https://www.vultr.com" target="_blank" rel="noopener">Vult官网</a></p><p><img data-src="https://s1.ax1x.com/2020/04/04/GdBCLQ.png" alt="vultr"></p><p>注册就不用我多讲了吧。。。</p><p>然后这个是要充值10美元好像</p><p>不过比市面上的vpn便宜多了吧</p><p>而且云电脑还有很多其他的事可以干（立Flag）</p><p>进入账户后，点击products</p><p>点右上角</p><p><img data-src="https://s1.ax1x.com/2020/04/04/Gd0OII.png" alt="Server1"></p><p>然后选择<strong>服务器</strong></p><p>默认<strong>Cloud Compute</strong></p><p>我选的是<strong>新加坡</strong>的服务器</p><p>因为离中国近…</p><p><img data-src="https://s1.ax1x.com/2020/04/04/Gd0jit.png" alt="Server2"></p><p>然后Debian服务器</p><p>选5美元一月的就好</p><p>10美元太<strong>奢侈</strong></p><p><img data-src="https://s1.ax1x.com/2020/04/04/Gd0vJP.png" alt="Server3"></p><p>其他设置都别管</p><p>默认</p><h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><h3 id="远程连接主机"><a href="#远程连接主机" class="headerlink" title="远程连接主机"></a>远程连接主机</h3><p>回到Product</p><p>点击刚添加好的服务器</p><p>会弹出以下页面</p><p><img data-src="https://s1.ax1x.com/2020/04/04/Gd0xRf.png" alt="Server4"></p><p>点击眼睛查看<strong>ip password</strong></p><p>然后将<strong>IP Adress</strong>复制下来之后</p><p>打开terminal</p><p>右键点击Terminal图标</p><p><img data-src="https://s1.ax1x.com/2020/04/04/Gd0zz8.png" alt="Terminal1"></p><p>点击弹出窗口中的➕加号</p><p><img data-src="https://s1.ax1x.com/2020/04/04/GdBpQS.png" alt="Terminal2"></p><p>在前面加上一个ssh就可以点击链接</p><p><strong>User记得填 root</strong></p><p>看图</p><p><img data-src="https://s1.ax1x.com/2020/04/04/GdB9sg.png" alt="Terminal3"></p><h3 id="Outline准备"><a href="#Outline准备" class="headerlink" title="Outline准备"></a>Outline准备</h3><p><a href="https://www.getoutline.org" target="_blank" rel="noopener">Outline</a> 是一款基于 ss 的开源富强软件，来自于 Jigsaw 公司，致力于供新闻组织用自家服务器上设定从而富强，来保障新闻工作者的网络存储安全，并且号称不需要技术人员就能完成部署。</p><p>Jigsaw 前身为 Google Ideas，是 Google 旗下的技术孵化器公司，目标是以技术来客服全球的安全难题，包括地址网络神茶制度、降低网络攻击的威胁，以及防止大众收到网络骚扰等。Outline 即为 Jigsaw 的专案成果之一。</p><p>去官网下载<strong>Outline Manager</strong>之后（官网地址上方超链接）</p><p>国内点不进去。。。</p><p><del>用windscribe蹭</del></p><p>mac用户建议去app store搜索</p><p>windows还有Linux可以去Github找</p><p>（找不到的可以私信博主）</p><p>下载Outline Manager打开</p><p>点击➕加号</p><p>随便选一个进去（误</p><p><strong>别选第一个就对了</strong></p><p><img data-src="https://s1.ax1x.com/2020/04/04/Gd0qZd.png" alt="Outline1"></p><p>可以看到这个</p><p>然后跟着指示走</p><p><img data-src="https://s1.ax1x.com/2020/04/04/Gd0LdA.png" alt="Outline2"></p><h3 id="SSH安装"><a href="#SSH安装" class="headerlink" title="SSH安装"></a>SSH安装</h3><p>回到先前的ssh链接窗口</p><h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h4><p>Centos 7.4 64 位 安装 Docke</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update  </span><br><span class="line">curl -fsSL https://get.docker.com/ | sh   </span><br><span class="line">sudo service docker start   </span><br><span class="line">#验证 docker 是否安装成功并在容器中执行一个测试的镜像 </span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></tbody></table></figure><p>Ubuntu 17.04 ×64 Docker</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt-get install curl   </span><br><span class="line">sudo apt update   </span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl software-properties-common   </span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add –   </span><br><span class="line">sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"   </span><br><span class="line">sudo apt update   </span><br><span class="line">sudo apt -y install docker-ce</span><br></pre></td></tr></tbody></table></figure><h4 id="安装Outline在虚拟机上"><a href="#安装Outline在虚拟机上" class="headerlink" title="安装Outline在虚拟机上"></a>安装Outline在虚拟机上</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/Jigsaw-Code/outline-server/master/src/server_manager/install_scripts/install_server.sh | bash</span><br></pre></td></tr></tbody></table></figure><p>会出现下列代码</p><p><img data-src="https://s1.ax1x.com/2020/04/04/Gd07se.png" alt="Outline4"></p><p>复制URL</p><p>然后粘贴进Outline Manager</p><h2 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h2><p>这个时候在手机还有电脑上下载Outline</p><p>方法不赘述</p><p>你能下载manager肯定可以下载这个</p><p>点击加号</p><p>加号在哪里看下面第二张图片</p><p>然后输入它生成的Access key</p><p>大功告成</p><p>不得不舔一下Outline真的好看</p><p>简洁无广告。。。</p><p>Manager：</p><p><img data-src="https://s1.ax1x.com/2020/04/04/Gd0HqH.png" alt="Outline3"></p><p>Server</p><p><img data-src="https://s1.ax1x.com/2020/04/04/Gd0TMD.png" alt="Outline5"></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;Coronavirus期间回国，在网上继续上学校网课，需要使用Google docs还有Youtube. 幸好自己提前在米国部署了威PN。。。然后感觉写个科学上网指南是国内博客基操，就顺便写写。&lt;/p&gt;
&lt;p&gt;注：科学上网一定是学习使用，不要不注意身体😯&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/MaverickTang/Zh-Blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工具" scheme="https://github.com/MaverickTang/Zh-Blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>代码集</title>
    <link href="https://github.com/MaverickTang/Zh-Blog/2020/03/30/Codes/"/>
    <id>https://github.com/MaverickTang/Zh-Blog/2020/03/30/Codes/</id>
    <published>2020-03-30T02:35:14.000Z</published>
    <updated>2021-02-08T00:01:19.290Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>博主我隔离期间实在无聊于是无聊到整理代码模版</p><p>从入门到放弃</p><a id="more"></a><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="输入类"><a href="#输入类" class="headerlink" title="输入类"></a>输入类</h3><p>读入优化</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(c><span class="string">'9'</span>||c<<span class="string">'0'</span>){</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;</span><br><span class="line">c=getchar();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(c>=<span class="string">'0'</span>&&c<=<span class="string">'9'</span>){</span><br><span class="line">x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">c=getchar();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h3><p>高精度真的是mol鬼，到现在听到要打高精度觉得自己还是打不出来</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span> {</span></span><br><span class="line"><span class="keyword">int</span> len, s[mx];<span class="comment">//高精度长度和存放数值</span></span><br><span class="line">bign() { <span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="keyword">sizeof</span>(s)),len=<span class="number">1</span>;} <span class="comment">//构造函数初始化</span></span><br><span class="line">bign (<span class="keyword">int</span> num) { *<span class="keyword">this</span> = num; }<span class="comment">//低精度赋值</span></span><br><span class="line">bign (<span class="keyword">const</span> <span class="keyword">char</span> *num) { *<span class="keyword">this</span> = num; } <span class="comment">//字符串赋值</span></span><br><span class="line">bign <span class="keyword">operator</span> = (<span class="keyword">const</span> <span class="keyword">int</span> num) {<span class="comment">//低精度转换成高精度</span></span><br><span class="line"><span class="keyword">char</span> st[mx]; <span class="built_in">sprintf</span>(st,<span class="string">"%d"</span>,num);<span class="keyword">return</span> *<span class="keyword">this</span>=st;</span><br><span class="line">}</span><br><span class="line">bign <span class="keyword">operator</span> = (<span class="keyword">const</span> <span class="keyword">char</span> *num) {<span class="comment">//将字符串转成高精度值</span></span><br><span class="line">len=<span class="built_in">strlen</span>(num);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i<len; i++) s[i]=num[len-i<span class="number">-1</span>]-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span> </span>{<span class="comment">//清除高位 0</span></span><br><span class="line"><span class="keyword">while</span>(len><span class="number">1</span> && s[len<span class="number">-1</span>]==<span class="number">0</span>) len--;</span><br><span class="line">}</span><br><span class="line">bign <span class="keyword">operator</span> + (<span class="keyword">const</span> bign &b) { <span class="comment">//重载运算符 +</span></span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">max</span>(len,b.len),i;</span><br><span class="line">bign c;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i<l; i++) {</span><br><span class="line">c.s[i]+=(s[i]+b.s[i]);<span class="comment">//当前位</span></span><br><span class="line">c.s[i+<span class="number">1</span>]+=c.s[i]/<span class="number">10</span>;<span class="comment">//进位位</span></span><br><span class="line">c.s[i]%=<span class="number">10</span>;<span class="comment">//调整本位</span></span><br><span class="line">}</span><br><span class="line">c.len=l+<span class="number">1</span>;</span><br><span class="line">c.clean();</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">}</span><br><span class="line">bign <span class="keyword">operator</span> - (<span class="keyword">const</span> bign &x) {<span class="comment">//重载运算符-</span></span><br><span class="line">bign c=*<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i<len; i++) {</span><br><span class="line"><span class="keyword">if</span>(x.s[i]>c.s[i]) {</span><br><span class="line">c.s[i+<span class="number">1</span>]--;<span class="comment">//从前借一位</span></span><br><span class="line">c.s[i]+=<span class="number">10</span>;<span class="comment">//当前位加10</span></span><br><span class="line">}</span><br><span class="line">c.s[i]-=x.s[i];<span class="comment">//直接减</span></span><br><span class="line">}</span><br><span class="line">c.clean();</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">}</span><br><span class="line">bign <span class="keyword">operator</span> * (<span class="keyword">const</span> bign &b) {<span class="comment">//重载运算符*</span></span><br><span class="line">bign c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i<len; i++) {</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j<b.len; j++) {</span><br><span class="line">c.s[i+j]+=s[i]*b.s[j];<span class="comment">//本位</span></span><br><span class="line">c.s[i+j+<span class="number">1</span>]+=c.s[i+j]/<span class="number">10</span>;<span class="comment">//进位</span></span><br><span class="line">c.s[i+j]%=<span class="number">10</span>;<span class="comment">//调整本位</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">c.len=len+b.len+<span class="number">1</span>;</span><br><span class="line">c.clean();</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">}</span><br><span class="line">bign <span class="keyword">operator</span> / (<span class="keyword">const</span> bign &b) {</span><br><span class="line">        bign c, f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i >= <span class="number">0</span>; i--) {</span><br><span class="line">            f =f*<span class="number">10</span>;</span><br><span class="line">            f.s[<span class="number">0</span>] = s[i];</span><br><span class="line">            <span class="keyword">while</span>(f >= b) {</span><br><span class="line">                f =f- b;</span><br><span class="line">                c.s[i]++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        c.len = len;</span><br><span class="line">        c.clean();</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> > (<span class="keyword">const</span> bign &b) {<span class="comment">//重载运算符 ></span></span><br><span class="line"><span class="keyword">if</span>(len!=b.len) <span class="keyword">return</span> len>b.len;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>; i>=<span class="number">0</span>; i--) { <span class="comment">//从高位开始对比</span></span><br><span class="line"><span class="keyword">if</span>(s[i]!=b.s[i]) <span class="keyword">return</span> s[i]>b.s[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> < (<span class="keyword">const</span> bign &b) {</span><br><span class="line"><span class="keyword">if</span>(len!=b.len) <span class="keyword">return</span> len<b.len;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>; i>=<span class="number">0</span>; i--) {</span><br><span class="line"><span class="keyword">if</span>(s[i]!=b.s[i]) <span class="keyword">return</span> s[i]<b.s[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> bign &b) {</span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span>>b) && !(*<span class="keyword">this</span><b);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> >= (<span class="keyword">const</span> bign &b) {</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>>b || *<span class="keyword">this</span>==b;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">()</span> <span class="keyword">const</span> </span>{<span class="comment">//将高度精值转换成字符</span></span><br><span class="line"><span class="built_in">string</span> re=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i<len; i++) re=(<span class="keyword">char</span>)(s[i]+<span class="string">'0'</span>)+re;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line">istream& <span class="keyword">operator</span> >> (istream &in, bign &x) {<span class="comment">//使高精度支持输入>></span></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">in>>s;x=s.c_str(); <span class="keyword">return</span> in;</span><br><span class="line">}</span><br><span class="line">ostream& <span class="keyword">operator</span> << (ostream &out, <span class="keyword">const</span> bign &x) {<span class="comment">//使高精度支持输出</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x.len<span class="number">-1</span>; i>=<span class="number">0</span>; i--) out<<x.s[i];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="真香排序"><a href="#真香排序" class="headerlink" title="真香排序"></a>真香排序</h4><p>不论会什么高级模版，总会想用它</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{</span><br><span class="line"><span class="keyword">return</span> a<b;<span class="comment">//从低到高</span></span><br><span class="line">}</span><br><span class="line">sort(a,a+n+<span class="number">1</span>,cmp);</span><br></pre></td></tr></tbody></table></figure><h4 id="桶排"><a href="#桶排" class="headerlink" title="桶排"></a>桶排</h4><p>简单来说就是记录后找下标</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x,n;</span><br><span class="line"><span class="built_in">cin</span>>>n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>]= {<span class="number">0</span>};</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i<n; i++) {</span><br><span class="line"><span class="built_in">cin</span>>>x;</span><br><span class="line">a[x]++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i<<span class="number">100</span>; i++) </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">1</span>;m<=a[i];m++)</span><br><span class="line"><span class="built_in">cout</span><<i<<<span class="string">" "</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>相邻元素若不按照顺序则替换</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>{</span><br><span class="line">    <span class="keyword">int</span> i,j,t;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i<=n;i++){</span><br><span class="line">      <span class="keyword">for</span>(j=i+<span class="number">1</span>;j<=n;j++){</span><br><span class="line">          <span class="keyword">if</span>(a[i]<a[j]){</span><br><span class="line">             swap(a[i],a[j]);</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>递归拆分子序列</p><p><img data-src="https://i.loli.net/2020/04/02/q8CSv6jAZefsXaE.png" alt="image-20200329201857057.png"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> l, <span class="keyword">int</span> r , <span class="keyword">int</span> *t)</span></span>{<span class="comment">//要排序数组a,起始l，终止r，暂存空间t</span></span><br><span class="line">  <span class="keyword">if</span>(r-l><span class="number">1</span>){    </span><br><span class="line">       <span class="keyword">int</span> m=(l+r)>><span class="number">1</span>;<span class="comment">//中间进行划分</span></span><br><span class="line">       <span class="keyword">int</span> p=l, q=m, i= l;</span><br><span class="line">    merge_sort(a,l,m,t);<span class="comment">//划分</span></span><br><span class="line">     merge_sort(a,m,r,t);<span class="comment">//划分</span></span><br><span class="line">       <span class="keyword">while</span>(p<m ||q<r){         </span><br><span class="line">         <span class="keyword">if</span>(q>=r || (p<m && a[p]<a[q]))</span><br><span class="line">              t[i++] = a[p++];</span><br><span class="line">              <span class="comment">//将左则暂存至临时空间         </span></span><br><span class="line">         <span class="keyword">else</span> </span><br><span class="line">               t[i++] = a[q++];  </span><br><span class="line">               <span class="comment">//将右则暂存至临时空间</span></span><br><span class="line">       }</span><br><span class="line">    <span class="keyword">for</span>(i=l; i<r; i++)a[i]= t[i];</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>基本思想是通过一趟排序将待排记录分割成独立的两部分,其中一部分记录的均比另一部分小,则可分别对这两部分记录继续进行排序,以达到整个序列有序.</p><p>假定待排序列为{r[s],r[s+1],…..r[t]},首先选取一个记录作为枢轴(pivot),然后按下述原则重新排列其余记录.</p><p>将所有较它小的记录安置在它之前,将所有较它大的记录安置在它之后.由此可见此”枢轴”记录最后所落的位置I作分界线,将原序列分割成两个{r[s],r[s+1],…r[i-1]}和{r[i],r[i+1],…r[t]}.这个过程称做一趟快速排序(或一次划分).</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">part</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> a[])</span> </span>{ </span><br><span class="line">    <span class="keyword">int</span> p=a[l];</span><br><span class="line"><span class="keyword">while</span>(l<r) {<span class="comment">//保证没有重叠</span></span><br><span class="line"><span class="keyword">while</span>(l<r && a[r]>=p) r--;</span><br><span class="line">a[l]=a[r];<span class="comment">//将右边不适宜的数字放到左边</span></span><br><span class="line"><span class="keyword">while</span>(l<r && a[l]<=p) l++;</span><br><span class="line">a[r]=a[l];</span><br><span class="line">}</span><br><span class="line">a[l]=p;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> a[])</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(l<r) {</span><br><span class="line"><span class="keyword">int</span> p=part(l,r,a);</span><br><span class="line">qsort(l,p,a);</span><br><span class="line">qsort(p+<span class="number">1</span>,r,a);</span><br><span class="line">} </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://i.loli.net/2020/04/02/9opqN7LVQXCaEPz.png" alt="排序对比"></p><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tenout</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> m)</span></span>{<span class="comment">//十进制转任意进制</span></span><br><span class="line">    <span class="keyword">while</span>(x){a[++n]=x%m;x/=m;}</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i>=<span class="number">1</span>;--i)</span><br><span class="line">        (a[i]<<span class="number">10</span>)?(<span class="built_in">cout</span><<a[i]):(<span class="built_in">cout</span><<<span class="keyword">char</span>(a[i]+(<span class="string">'A'</span><span class="number">-10</span>)));<span class="comment">//如果小于10就直接输出，else输出字母</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getten</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">char</span> s[])</span></span>{<span class="comment">//任意进制转十进制</span></span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="built_in">strlen</span>(s);i++) </span><br><span class="line">        ans=ans*x+(<span class="built_in">isdigit</span>(s[i])?(s[i]^<span class="string">'0'</span>):(s[i]-<span class="string">'A'</span>+<span class="number">10</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="提高"><a href="#提高" class="headerlink" title="提高"></a>提高</h2><h3 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h3><h4 id="默认存储及加边"><a href="#默认存储及加边" class="headerlink" title="默认存储及加边"></a>默认存储及加边</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>{</span></span><br><span class="line">       <span class="keyword">int</span> dest;<span class="comment">//destination</span></span><br><span class="line">       <span class="keyword">int</span> val;<span class="comment">//edge's value</span></span><br><span class="line">       <span class="keyword">int</span> next;<span class="comment">//next edge</span></span><br><span class="line">  }eg[mx*<span class="number">2</span>];<span class="comment">//mx is the numer of the edges, if it is undirected you need to double</span></span><br><span class="line"><span class="keyword">int</span> n,m;<span class="comment">//nomber of point in the graph，number of edge in the graph </span></span><br><span class="line"><span class="keyword">int</span> head[MAX]={<span class="number">0</span>};<span class="comment">//The head in the graph</span></span><br><span class="line"><span class="keyword">int</span> top=<span class="number">0</span>;<span class="comment">//The exact number of the edeges</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> val)</span></span>{ </span><br><span class="line">    eg[++top].dest=v;<span class="comment">//v is the tail of the edge(destination)</span></span><br><span class="line">    eg[top].val=val;<span class="comment">//edge's value</span></span><br><span class="line">    eg[top].next=head[u];<span class="comment">//next edge's number</span></span><br><span class="line">    head[u]=top;<span class="comment">//Remeber this edge as another edge for the head u.</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> vis[mx]={<span class="number">0</span>};<span class="comment">//To make sure you won't travel through the same edge over and over again</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s)</span></span>{</span><br><span class="line">vis[s]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[s];i;i=eg[i].next){<span class="comment">//travel</span></span><br><span class="line"><span class="keyword">if</span>(!vis[eg[i].dest]){<span class="comment">//haven't travel through</span></span><br><span class="line">dfs(eg[i].dest);<span class="comment">//Then travel</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><queue>//Import queue libaray</span></span></span><br><span class="line"><span class="built_in">queue</span><<span class="keyword">int</span>>q;<span class="comment">//Declare queue</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span>{</span><br><span class="line">q.push(s);vis[s]=<span class="number">1</span>;<span class="comment">//push s into the queue and vis</span></span><br><span class="line"><span class="keyword">while</span>(!q.empty()){<span class="comment">//As long as there is still elements in the queue</span></span><br><span class="line"><span class="keyword">int</span> u=q.front();<span class="comment">//Get the front of the queue</span></span><br><span class="line">q.pop();<span class="comment">//Get the front of the queue out</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=eg[i].next){<span class="comment">//Same old story</span></span><br><span class="line"><span class="keyword">int</span> v=eg[i].dest;</span><br><span class="line"><span class="keyword">if</span>(!vis[v]){</span><br><span class="line">q.push(v),vis[v]=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span><span class="comment">//Declare another struct to restore the information for the point</span></span><br><span class="line"><span class="keyword">int</span> dis,pos;<span class="comment">//pos means the number of the point</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> <( <span class="keyword">const</span> node &x )<span class="keyword">const</span>{<span class="comment">//declare the operator '<' by our own function</span></span><br><span class="line"><span class="keyword">return</span> x.dis < dis;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="built_in">std</span>::priority_queue<node> q;<span class="comment">//priority queue</span></span><br><span class="line"><span class="keyword">int</span> dis[mx],vis[mx];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>{</span><br><span class="line">dis[s]=<span class="number">0</span>;</span><br><span class="line">q.push((node){<span class="number">0</span>,s});<span class="comment">//push into queue as struct node</span></span><br><span class="line"><span class="keyword">while</span>(!q.empty()){</span><br><span class="line">node tmp=q.top();q.pop();</span><br><span class="line"><span class="keyword">int</span> x=tmp.pos,d=tmp.dis;</span><br><span class="line"><span class="keyword">if</span>(!vis[x]){<span class="comment">//Got to the tail, if we didn't visit it</span></span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=eg[i].next){</span><br><span class="line"><span class="keyword">int</span> y=eg[i].dest;</span><br><span class="line"><span class="keyword">if</span>(dis[y]>dis[x]+eg[i].val){</span><br><span class="line">dis[y]=dis[x]+eg[i].val;<span class="comment">//The core of the code, to replace for smaller</span></span><br><span class="line"><span class="keyword">if</span>(!vis[y])<span class="comment">//Got to the head, if we didn't visit it</span></span><br><span class="line">q.push((node){dis[y],y});</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k<=n;k++) {</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i<=n; i++) {</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j<=n; j++) {</span><br><span class="line"><span class="keyword">if</span>(g[i][k]<inf&&g[k][j]<inf&&g[i][j]>g[i][k]+g[k][j])</span><br><span class="line">g[i][j]=g[i][k]+g[k][j];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span></span>{</span><br><span class="line"><span class="keyword">int</span> u,v;    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dist));<span class="comment">//Initialize dist</span></span><br><span class="line">dist[s]=<span class="number">0</span>;<span class="comment">//Get start point as 0</span></span><br><span class="line">inque[s]=<span class="number">1</span>;<span class="comment">//Memorize the s is in the queue</span></span><br><span class="line">q.push(s);<span class="comment">//in queue</span></span><br><span class="line"><span class="keyword">while</span>(!q.empty()){</span><br><span class="line">u=q.front(), q.pop();  inque[u]=<span class="number">0</span>;<span class="comment">//Get the front of queue out</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=eg[i].next){</span><br><span class="line">  v=eg[i].dest;</span><br><span class="line">  <span class="keyword">if</span>(dist[v]>dist[u]+eg[i].val){<span class="comment">//If find a route with smaller value</span></span><br><span class="line">  dist[v]= dist[u]+eg[i].val;<span class="comment">//change it </span></span><br><span class="line">  fa[v]=u;<span class="comment">//Memorize the tail of v</span></span><br><span class="line">  <span class="keyword">if</span>(!inque[v]){</span><br><span class="line">  q.push(v), inque[v]=<span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Difference-between-Dij-heap-and-SPFA"><a href="#Difference-between-Dij-heap-and-SPFA" class="headerlink" title="Difference between Dij+heap and SPFA!!!"></a>Difference between Dij+heap and SPFA!!!</h4><p>Dij:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!q.empty()){</span><br><span class="line">  <span class="comment">//If priority queue is not empty</span></span><br><span class="line">node tmp=q.top();q.pop();</span><br><span class="line">  <span class="comment">//get top out</span></span><br><span class="line"><span class="keyword">int</span> x=tmp.pos,d=tmp.dis;</span><br><span class="line"><span class="keyword">if</span>(!vis[x]){<span class="comment">//Got to the tail, if we didn't visit it</span></span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=eg[i].next){</span><br><span class="line"><span class="keyword">int</span> y=eg[i].dest;</span><br><span class="line"><span class="keyword">if</span>(dis[y]>dis[x]+eg[i].val){</span><br><span class="line">        <span class="comment">//Relax</span></span><br><span class="line">dis[y]=dis[x]+eg[i].val;<span class="comment">//The core of the code, to replace for smaller</span></span><br><span class="line"><span class="keyword">if</span>(!vis[y])<span class="comment">//Got to the head, if we didn't visit it</span></span><br><span class="line">q.push((node){dis[y],y});</span><br><span class="line">        <span class="comment">//New distance and new point into the queue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>SPFA:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!q.empty()){</span><br><span class="line">   <span class="comment">//if regular queue is not empty</span></span><br><span class="line">u=q.front(), q.pop();  inque[u]=<span class="number">0</span>;<span class="comment">//Get the front of queue out</span></span><br><span class="line">   <span class="comment">//Get top out</span></span><br><span class="line">   <span class="comment">//And Remember!!!</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=eg[i].next){</span><br><span class="line">  v=eg[i].dest;</span><br><span class="line">  <span class="keyword">if</span>(dist[v]>dist[u]+eg[i].val){<span class="comment">//If find a route with smaller value</span></span><br><span class="line">         <span class="comment">//Relax</span></span><br><span class="line">  dist[v]= dist[u]+eg[i].val;<span class="comment">//change it </span></span><br><span class="line">  fa[v]=u;<span class="comment">//Memorize the tail of v</span></span><br><span class="line">  <span class="keyword">if</span>(!inque[v]){</span><br><span class="line">           <span class="comment">//the points that are Relaxed but not in queue get into the queue</span></span><br><span class="line">  q.push(v), inque[v]=<span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>So the difference is clear enough:</p><p>Dji+heap: <strong>Small root pile</strong>, every time get the shortest distance, for this point, the shortest distance <strong>won’t change</strong>! </p><p>SPFA: Use <strong>queue</strong>. Get the front out of queue, might be renew in the future, it is <strong>won’t be always the same</strong>. </p><h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4><h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><div class="table-container"><table><thead><tr><th style="text-align:center">Shortest-PathsProblem</th><th style="text-align:center">Sparse Graph</th><th style="text-align:center">Dense Graph</th><th style="text-align:center">With negative value</th></tr></thead><tbody><tr><td style="text-align:center">Single-Source</td><td style="text-align:center">Dijkstra+heap</td><td style="text-align:center">SPFA/Dijkstra+heap</td><td style="text-align:center">SPFA</td></tr><tr><td style="text-align:center">APSP(Undirected graph)</td><td style="text-align:center">SPFA/Floyd</td><td style="text-align:center">SPFA</td><td style="text-align:center">SPFA</td></tr><tr><td style="text-align:center">APSP(Directed graph)</td><td style="text-align:center">Floyd</td><td style="text-align:center">SPFA/Dijkstra+heap</td><td style="text-align:center">SPFA</td></tr></tbody></table></div><p>​                                                                        APSP((All Pairs Shortest Path))</p><h4 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h4><div class="table-container"><table><thead><tr><th style="text-align:center">Solving ways</th><th style="text-align:center">Time Complexity</th><th style="text-align:center">Space Complexity</th></tr></thead><tbody><tr><td style="text-align:center">Dijkstra+heap</td><td style="text-align:center">O(E*lgV)</td><td style="text-align:center">O(n^2)</td></tr><tr><td style="text-align:center">SPFA</td><td style="text-align:center">O(kE) (Not stable)</td><td style="text-align:center">O(n)</td></tr><tr><td style="text-align:center">Floyd</td><td style="text-align:center">O(n^3)</td><td style="text-align:center">O(n)</td></tr></tbody></table></div><h2 id="树论"><a href="#树论" class="headerlink" title="树论"></a>树论</h2><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><cstdio></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line"><span class="keyword">int</span> l,r;<span class="comment">//区间左右端点</span></span><br><span class="line">ll value;<span class="comment">//区间和值</span></span><br><span class="line">ll add,time;<span class="comment">//区间同时增加或乘一个数的延迟标记</span></span><br><span class="line">};</span><br><span class="line">Node tr[MAX<<<span class="number">2</span>]= {<span class="number">0</span>};</span><br><span class="line">ll aa[MAX]= {<span class="number">0</span>};</span><br><span class="line">ll N,M,P;</span><br><span class="line"><span class="function">ll <span class="title">Read</span><span class="params">()</span> </span>{</span><br><span class="line">ll x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(c<<span class="string">'0'</span>||c><span class="string">'9'</span>) {<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;c=getchar(); }</span><br><span class="line"><span class="keyword">while</span>(c>=<span class="string">'0'</span>&&c<=<span class="string">'9'</span>)x=x*<span class="number">10</span>+c-<span class="string">'0'</span>,c=getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//初始化线段树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>{</span><br><span class="line">tr[i].l=l,tr[i].r=r,tr[i].value=<span class="number">0</span>,tr[i].time=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r) {</span><br><span class="line">tr[i].value=aa[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">build(i<<<span class="number">1</span>,l,(l+r)>><span class="number">1</span>);<span class="comment">//建立左子树区间</span></span><br><span class="line">build(i<<<span class="number">1</span>|<span class="number">1</span>,((l+r)>><span class="number">1</span>)+<span class="number">1</span>,r);<span class="comment">//建立右子树区间</span></span><br><span class="line">tr[i].value=tr[i<<<span class="number">1</span>].value+tr[i<<<span class="number">1</span>|<span class="number">1</span>].value;<span class="comment">//更新编号为i的区间和(由左右儿子来)</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//向下更新</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> i)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(tr[i].add==<span class="number">0</span>&&tr[i].time==<span class="number">1</span>) <span class="keyword">return</span>;<span class="comment">//无需向下更新</span></span><br><span class="line"><span class="keyword">if</span>( tr[i].l==tr[i].r ) {<span class="comment">//避免访问无效内存(叶子没有儿子)</span></span><br><span class="line">tr[i].add=<span class="number">0</span>;</span><br><span class="line">tr[i].time=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">tr[i<<<span class="number">1</span>].value=(tr[i<<<span class="number">1</span>].value*tr[i].time+tr[i].add*(tr[i<<<span class="number">1</span>].r-tr[i<<<span class="number">1</span>].l+<span class="number">1</span>))%P;</span><br><span class="line"><span class="comment">//左儿子区间值</span></span><br><span class="line">tr[i<<<span class="number">1</span>|<span class="number">1</span>].value=(tr[i<<<span class="number">1</span>|<span class="number">1</span>].value*tr[i].time+tr[i].add*(tr[i<<<span class="number">1</span>|<span class="number">1</span>].r-tr[i<<<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>))%P;</span><br><span class="line"><span class="comment">//右儿子区间值</span></span><br><span class="line">tr[i<<<span class="number">1</span>].time=tr[i<<<span class="number">1</span>].time*tr[i].time%P;<span class="comment">//左儿子更新倍数</span></span><br><span class="line">tr[i<<<span class="number">1</span>].add=(tr[i<<<span class="number">1</span>].add*tr[i].time+tr[i].add)%P;<span class="comment">//左儿子更新增加数</span></span><br><span class="line">tr[i<<<span class="number">1</span>|<span class="number">1</span>].time=tr[i<<<span class="number">1</span>|<span class="number">1</span>].time*tr[i].time%P;<span class="comment">//右儿子更新倍数</span></span><br><span class="line">tr[i<<<span class="number">1</span>|<span class="number">1</span>].add=(tr[i<<<span class="number">1</span>|<span class="number">1</span>].add*tr[i].time+tr[i].add)%P;<span class="comment">//右儿子更新增加数</span></span><br><span class="line">tr[i].add=<span class="number">0</span>;<span class="comment">//add延迟标记复0</span></span><br><span class="line">tr[i].time=<span class="number">1</span>;<span class="comment">//time倍增延迟标记恢复1</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//区间求和 (区间查询)</span></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(l<=tr[i].l&&r>=tr[i].r) {<span class="comment">//刚好罩着区间</span></span><br><span class="line"><span class="keyword">return</span> tr[i].value;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(l>tr[i].r||r<tr[i].l) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//不相关区间</span></span><br><span class="line">pushdown(i);<span class="comment">//向下更新延迟标记值</span></span><br><span class="line"><span class="keyword">return</span> (query(i<<<span class="number">1</span>,l,r)+query(i<<<span class="number">1</span>|<span class="number">1</span>,l,r));<span class="comment">//返回左右儿子区间和值</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//区间更新(将区间增加一个值k)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateadd</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">pushdown(i);</span><br><span class="line"><span class="keyword">if</span>(l<=tr[i].l&&r>=tr[i].r) {</span><br><span class="line">tr[i].value+=(tr[i].r-tr[i].l+<span class="number">1</span>)*k%P;</span><br><span class="line">tr[i].add=k%P;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(r<tr[i].l||l>tr[i].r) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">updateadd(i<<<span class="number">1</span>,l,r,k);</span><br><span class="line">updateadd(i<<<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">tr[i].value=(tr[i<<<span class="number">1</span>].value+tr[i<<<span class="number">1</span>|<span class="number">1</span>].value)%P;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//区间更新(将区间每个值*上一个值k)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updatetime</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">pushdown(i);</span><br><span class="line"><span class="keyword">if</span>(l<=tr[i].l&&r>=tr[i].r) {<span class="comment">//此处对照区间增加一个值</span></span><br><span class="line">tr[i].value=tr[i].value*k%P;</span><br><span class="line">tr[i].time=k%P;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(r<tr[i].l||l>tr[i].r) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">updatetime(i<<<span class="number">1</span>,l,r,k);</span><br><span class="line">updatetime(i<<<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">tr[i].value=(tr[i<<<span class="number">1</span>].value+tr[i<<<span class="number">1</span>|<span class="number">1</span>].value)%P;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">//freopen("data.txt","r",stdin);</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> o,a,b,k;</span><br><span class="line">N=Read(),M=Read(),P=Read();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i<=N; i++)aa[i]=Read();</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,N);<span class="comment">//将数据离散到线段树上</span></span><br><span class="line"><span class="keyword">while</span>(M--) {</span><br><span class="line">o=Read(),a=Read(),b=Read();</span><br><span class="line"><span class="keyword">if</span>(o==<span class="number">1</span>) {<span class="comment">//区间倍增k</span></span><br><span class="line">k=Read();</span><br><span class="line">updatetime(<span class="number">1</span>,a,b,k);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(o==<span class="number">2</span>) {<span class="comment">//区间增加k</span></span><br><span class="line">k=Read();</span><br><span class="line">updateadd(<span class="number">1</span>,a,b,k);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(o==<span class="number">3</span>) {<span class="comment">//区间查询</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(<span class="number">1</span>,a,b)%P);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><p><img data-src="https://i.loli.net/2020/04/02/LiM8J95WDxcpCd6.png" alt></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">bit</span>[mx+<span class="number">1</span>], n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>{</span><br><span class="line">   <span class="keyword">return</span> x & -x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span></span>{<span class="comment">//Calculate the sum</span></span><br><span class="line">  <span class="keyword">int</span> s =<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i><span class="number">0</span>){</span><br><span class="line">    s+=<span class="built_in">bit</span>[i];  i-=lowbit(i);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> x)</span></span>{<span class="comment">//Add x to i</span></span><br><span class="line">    <span class="keyword">while</span>(i<=n){</span><br><span class="line">       <span class="built_in">bit</span>[i]+=x; i+=lowbit(i);</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="重链剖分-lca"><a href="#重链剖分-lca" class="headerlink" title="重链剖分+lca"></a>重链剖分+lca</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><cstdio></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s;<span class="comment">//分别表示树的结点个数、询问的个数和树根结点的序号</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mx=<span class="number">500005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> {</span></span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">int</span> w;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">} eg[mx<<<span class="number">1</span>]= {<span class="number">0</span>};</span><br><span class="line"><span class="keyword">int</span> dis[mx]={<span class="number">0</span>};</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,head[mx]= {<span class="number">0</span>},dep[mx]= {<span class="number">0</span>},siz[mx]= {<span class="number">0</span>};</span><br><span class="line"><span class="keyword">int</span> son[mx]= {<span class="number">0</span>},fa[mx]= {<span class="number">0</span>},top[mx]= {<span class="number">0</span>};</span><br><span class="line"><span class="comment">//增加边</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(c<<span class="string">'0'</span>||c><span class="string">'9'</span>) c=getchar();</span><br><span class="line"><span class="keyword">while</span>(c<=<span class="string">'9'</span>&&c>=<span class="string">'0'</span>) x=x*<span class="number">10</span>+c-<span class="string">'0'</span>,c=getchar();</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>{</span><br><span class="line">eg[++cnt].d=v,eg[cnt].w=w,eg[cnt].next=head[u],head[u]=cnt;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span> </span>{</span><br><span class="line">siz[u]=<span class="number">1</span>, son[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i=head[u]; i; i=eg[i].next ) {</span><br><span class="line"><span class="keyword">int</span> v=eg[i].d;</span><br><span class="line"><span class="keyword">if</span>(v!=fa[u]) {</span><br><span class="line">dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">fa[v]=u;</span><br><span class="line">dfs1(v);</span><br><span class="line">siz[u]+=siz[v];<span class="comment">//计算儿子节点个数</span></span><br><span class="line"><span class="keyword">if</span>(!son[u] || siz[v]>siz[son[u]]) son[u]=v;<span class="comment">//记录重儿子结点编号</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span> </span>{</span><br><span class="line">top[u]=tp;</span><br><span class="line"><span class="keyword">if</span>(son[u]) dfs2(son[u],tp);<span class="comment">//拉重链</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i=head[u]; i; i=eg[i].next ) {</span><br><span class="line"><span class="keyword">int</span> v=eg[i].d;</span><br><span class="line"><span class="keyword">if</span>( v!=fa[u] && v!=son[u] ) dfs2(v,v);<span class="comment">//拉轻链</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y]){</span><br><span class="line">       <span class="keyword">if</span>(dep[top[x]]>=dep[top[y]])x=fa[top[x]];</span><br><span class="line">       <span class="keyword">else</span> y=fa[top[y]];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dep[x]<dep[y]? x : y;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&n,&m,&s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i<n; ++i) {</span><br><span class="line"><span class="keyword">int</span> x,y; </span><br><span class="line">x=Read(), y=Read();</span><br><span class="line">addEdge(x,y,<span class="number">0</span>);</span><br><span class="line">addEdge(y,x,<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line">dfs1(s);</span><br><span class="line">dfs2(s,s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i<=m; ++i) {</span><br><span class="line"><span class="keyword">int</span> x,y; </span><br><span class="line">x=Read(), y=Read();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lca(x,y));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h3><p>离散化后只能知道数据之间的相对大小，但无法确定它们的真实值；</p><p>离散化的三个步骤：</p><p>1 sort排序</p><p>2 unique去重</p><p>3 lower_bound索引</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i<=n; i++){</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&a[i]);</span><br><span class="line">    b[i]=a[i];    <span class="comment">//b[]是a[]的副本</span></span><br><span class="line">}</span><br><span class="line">sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>);  <span class="comment">//排序</span></span><br><span class="line"><span class="keyword">int</span> sum=unique(b+<span class="number">1</span>,b+<span class="number">1</span>+n)-b<span class="number">-1</span>;  <span class="comment">//去重</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i<=n; i++)</span><br><span class="line">    a[i]=lower_bound(b+<span class="number">1</span>,b+<span class="number">1</span>+sum,a[i])-b;<span class="comment">//索引</span></span><br></pre></td></tr></tbody></table></figure><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">set</span>[mx];<span class="comment">//集合</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>{</span><br><span class="line">  <span class="keyword">return</span> x==<span class="built_in">set</span>[x]?x:<span class="built_in">set</span>[x]=<span class="built_in">find</span>(<span class="built_in">set</span>[x]);<span class="comment">//到顶就return，没有就继续往上递归</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unionset</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>{<span class="comment">//合并集合</span></span><br><span class="line">    <span class="keyword">int</span> xx=<span class="built_in">find</span>(x),yy=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(xx!=yy){</span><br><span class="line">        <span class="keyword">if</span>(xx>yy)swap(xx,yy);</span><br><span class="line">        <span class="built_in">set</span>[yy]=xx;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">1</span>;i<=n;i++)<span class="built_in">set</span>[i]=i;<span class="comment">//在主函数中初始化（各为一个集合）</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;博主我隔离期间实在无聊于是无聊到整理代码模版&lt;/p&gt;
&lt;p&gt;从入门到放弃&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/MaverickTang/Zh-Blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="竞赛" scheme="https://github.com/MaverickTang/Zh-Blog/tags/%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>隔离日记</title>
    <link href="https://github.com/MaverickTang/Zh-Blog/2020/03/29/Segragate-notes/"/>
    <id>https://github.com/MaverickTang/Zh-Blog/2020/03/29/Segragate-notes/</id>
    <published>2020-03-29T00:09:13.000Z</published>
    <updated>2020-04-03T22:52:00.832Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​        时值Coronavirus，我原定计划是28号从美国洛杉矶返回成都，随着政策不断刷新，先是台湾香港禁止转机，再加上国内城市转机也要隔离的禁令，我的机票连续切换了三次，终于在洛杉矶时间26日，我成功登上了回国的末班机，但是我被迫在广州开始时长14天的隔离。</p><h2 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h2><p>疫情影响，只有全副武装才能survive</p><p>所以我带上了眼镜和口罩</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGt7Yn.jpg" alt></p><a id="more"></a><p>我做的防护真的算少的了，像周围的朋友都穿的是生化危机同款防护服</p><p>一路上我不停用酒精洗手液洗手，热死我也不摘口罩</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGtIoj.jpg" alt></p><p>登机之前我们会在微信上填一个申报表</p><p>会生成这样的二维码</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGtOyT.png" alt></p><p>当然你如果上机的时候没填，落地也有的是时间</p><h2 id="途中"><a href="#途中" class="headerlink" title="途中"></a>途中</h2><p>像我这种惜命的人一定是防护拉满</p><p>每隔半个小时用酒精洗手液洗一次手</p><p>下飞机后游酒精湿纸巾把自己在飞机上用过的东西都擦了一遍</p><p>能打字绝不说话</p><p>煎熬了接近15个小时</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGtfOS.jpg" alt></p><p>终于熬到了降落</p><h2 id="降落广州"><a href="#降落广州" class="headerlink" title="降落广州"></a>降落广州</h2><p>广州降落操作就骚多了</p><p>最让我搞不明白的是飞机降落后先是叫了几个人下机</p><p>没错，就叫了那一次</p><p>然后其他人都在座位上<strong>等了一个多小时</strong></p><p>其中人中不乏老人与婴儿</p><p>根据我的理解</p><p>应该先让抵抗力低的群体下飞机</p><p>就算是有症状者，先下飞机不会增加感染可能吗？</p><p>最后居然是一节一节下飞机</p><p>骚</p><p>在这里<strong>先</strong>对安排提出质疑</p><p>一切<strong>还是</strong>服从国家安排</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGtqS0.jpg" alt></p><h2 id="机场"><a href="#机场" class="headerlink" title="机场"></a>机场</h2><p>下飞机后为了这个申报码又停了大概40分钟</p><p>过海关的时候又把我拦了</p><p>说要什么<strong>检疫放行条</strong></p><p>太骚了我们这趟航班的人因为没有进行核酸检疫</p><p>所以部门都不会给我们开</p><p>最后在卡了我十几分钟后又把我给放了</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGtXOU.jpg" alt></p><p>然后就是排队上大巴</p><p>到酒店时已是11:00</p><p>（飞机5:30降落）</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGtfOS.jpg" alt></p><p>有一说一</p><p>政府的管理相当到位</p><p>需要走的地方都做了指示</p><p>隔离也是根据住址隔离</p><p>广东本地人应该是回到自己所在区隔离</p><p>外地人想转机的都只有现在广州隔离14天再转机</p><p>都是统一隔离在白云区的酒店</p><p>我们到酒店再进行核酸检测</p><p>拿个棉签在嘴巴里捅一下就好了</p><p>到目前为止还是被我国的掌控力给震撼到</p><p><strong>整挺好</strong></p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGt2SP.jpg" alt></p><p>但是酒店隔离的骚操作就打出来了</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>告知墙</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGNZ0e.jpg" alt></p><p>隔离住宿费良心点赞</p><p><img data-src="https://i.loli.net/2020/04/02/wl3DH87cLUNgXry.png" alt="住宿费"></p><p>但是禁止外卖还有快递qaq</p><p>禁止这些我还是能够理解</p><p>为了防止疫情的传播</p><p>但是为什么就不能由酒店的工作人员帮忙送这些物件呢？</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>图为到达当日午餐</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGtLlV.jpg" alt></p><p>就这？</p><p>我在飞机上是啥也没吃</p><p>在酒店等了半天还只能吃凉的</p><p>关键是吃不饱</p><p>苦等晚餐</p><p>结果等到了8:00还没送过来</p><p>到第二天早上都没吃到晚餐</p><p>早上6:00起床预定早餐现在都9:00了还没送过来</p><p>你要是能让我点外卖或者快递送方便面我也不至于</p><p>修仙。。。</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGtzTJ.jpg" alt></p><h2 id="想说的话"><a href="#想说的话" class="headerlink" title="想说的话"></a>想说的话</h2><p>我就把午餐发到空间吐槽一下</p><p>没想到又遭来了众人的嘲讽</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGtWy8.jpg" alt></p><p>在网上也有各种对留学生的攻击</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGNCf1.jpg" alt></p><p>有一说一</p><p>留学生其实并不容易</p><p>我记得国内刚爆发疫情的时候</p><p>我们一家去各个药店商店想买口罩寄送回国</p><p>问店主都说口罩被中国人买完了</p><p>后来才知道原来留学生们为了支援自己的祖国基本上都把美国的口罩寄空了</p><p>同时基本寄空了的还有消毒用品</p><p>现在疫情传到国外了，美国一天爆发<strong>一万</strong>多例</p><p>我在写博客的这天人数已到达<strong>十万</strong></p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGNiSx.png" alt></p><p>美国住家不戴口罩上班甚至回家也不洗手消毒</p><p>这谁<strong>TM</strong>顶得住</p><p>在国外要治疗的话肯定是优先考虑本国人</p><p>不回来留在国外等死？</p><p>（回国重要性）</p><p>留学生不听从指挥的就只有那几个人</p><p>没必要对一个团体进行指责</p><p>更进一步说</p><p>我完全可以把这种行为归结于<strong>仇富</strong></p><p>网络上的喷子太多了</p><p><strong>明星</strong>片酬太高就有人说这些钱应该给<strong>科学家</strong></p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGtvmF.png" alt></p><p><strong>钟南山</strong>儿子用个爱马仕就被骂</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGt5wQ.jpg" alt></p><p><strong>可悲</strong></p><p>留学生出国没花您一分钱</p><p>您看不见留学生为祖国捐出的物资</p><p>您也不知道留学生为疫情作出的努力</p><p>就请不要随便乱说话</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGNpk9.jpg" alt></p><p>最后</p><p>求打赏一顿饭钱</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGtqS0.jpg" alt></p><p>美国的感染人数有兴趣可以去这个<a href="https://www.cdc.gov/coronavirus/2019-ncov/cases-updates/cases-in-us.html" target="_blank" rel="noopener">官方网站</a>吃瓜哟</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;​        时值Coronavirus，我原定计划是28号从美国洛杉矶返回成都，随着政策不断刷新，先是台湾香港禁止转机，再加上国内城市转机也要隔离的禁令，我的机票连续切换了三次，终于在洛杉矶时间26日，我成功登上了回国的末班机，但是我被迫在广州开始时长14天的隔离。&lt;/p&gt;
&lt;h2 id=&quot;出发&quot;&gt;&lt;a href=&quot;#出发&quot; class=&quot;headerlink&quot; title=&quot;出发&quot;&gt;&lt;/a&gt;出发&lt;/h2&gt;&lt;p&gt;疫情影响，只有全副武装才能survive&lt;/p&gt;
&lt;p&gt;所以我带上了眼镜和口罩&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;https://s1.ax1x.com/2020/04/02/GGt7Yn.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/MaverickTang/Zh-Blog/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://github.com/MaverickTang/Zh-Blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Markdown guide</title>
    <link href="https://github.com/MaverickTang/Zh-Blog/2020/03/26/Markdown-guide/"/>
    <id>https://github.com/MaverickTang/Zh-Blog/2020/03/26/Markdown-guide/</id>
    <published>2020-03-26T04:42:34.000Z</published>
    <updated>2021-02-12T03:33:36.689Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>转载自<a href="https://siriusq.top/Markdown写作语法.html" target="_blank" rel="noopener">siriusq</a></p><p>编写博客需要使用Markdown，因此需要熟记语法规则，虽然Markdown语法比较少，但是一个一个查起来也是很蛋疼的</p><a id="more"></a><p><strong>常用的Markdown语法规则有：</strong></p><ul><li><p>标题（我把标题扔到网页最后面了，目录被打乱了。。。）</p></li><li><p>字体加粗倾斜</p></li><li><p>引用</p></li><li><p>分割线</p></li><li><p>图片</p></li><li><p>超链接</p></li><li><p>列表</p></li><li><p>表格</p></li><li><p>代码</p></li><li><p>小文本</p></li><li><p>特殊字符转义</p></li><li><p>字体颜色大小</p></li><li><p>文本居中</p></li><li><p>勾选框</p></li><li><p>首行缩进</p></li><li><p>链接到其他文章</p></li><li><p>文字背景色</p></li><li><p>标签</p></li><li><p>选项卡</p></li><li><p>按钮</p></li></ul><h1 id="字体加粗倾斜"><a href="#字体加粗倾斜" class="headerlink" title="字体加粗倾斜"></a>字体加粗倾斜</h1><p>字体倾斜需要在文本两端各加一个<code>*</code>号<br>字体加粗需要在文本两端各加两个<code>*</code>号<br>字体同时倾斜加粗需要在文本两端各加三个<code>*</code>号<br>字体加入删除线需要在文本两端各加两个<code>~~</code></p><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*倾斜的文字*</span><br><span class="line">**加粗的文字**</span><br><span class="line">***倾斜加粗的文字***</span><br><span class="line">~~加删除线的文字~~</span><br><span class="line">++加下划线的文字++</span><br></pre></td></tr></tbody></table></figure><p><strong>预览效果</strong></p><p><em>倾斜的文字</em><br><strong>加粗的文字</strong><br><strong><em>倾斜加粗的文字\</em></strong><br><del>加删除线的文字</del><br>++加下划线的文字++</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>引用需要在文本前加一个<code>></code>,引用可以嵌套，比如两个<code>>></code>或三个<code>>>></code></p><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">> 引用的文本</span><br><span class="line">>> 嵌套的引用文本</span><br><span class="line">>>> 再次嵌套的文本</span><br></pre></td></tr></tbody></table></figure><p><strong>预览效果</strong></p><blockquote><p>引用的文本</p><blockquote><p>嵌套的引用文本</p><blockquote><p>再次嵌套的文本</p></blockquote></blockquote></blockquote><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>分割线使用连续三个及以上的<code>*</code>或<code>-</code>实现，前后都有段落时各空出一行</p><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">-----</span><br></pre></td></tr></tbody></table></figure><p><strong>预览效果</strong></p><hr><hr><hr><hr><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>使用链接形式插入图片</p><p><strong>语法</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片url 图片title)</span><br></pre></td></tr></tbody></table></figure><p>其中<code>图片alt</code>为图片下面的文字，相当于注释，<code>图片url</code>为图片的地址，<code>图片title</code>为鼠标悬浮到图片上显示的内容，此项选填</p><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p>超链接形式和图片类似，删掉前面的<code>!</code>即可</p><h2 id="普通链接方法"><a href="#普通链接方法" class="headerlink" title="普通链接方法"></a>普通链接方法</h2><p><strong>语法</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[超链接名称](超链接地址 超链接title)</span><br></pre></td></tr></tbody></table></figure><p><code>超链接title</code>选填，鼠标悬浮时显示</p><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Github](https://github.com github)</span><br></pre></td></tr></tbody></table></figure><p><strong>预览效果</strong></p><p><a href="[https://github.com](https://github.com/">Github</a> Github)</p><h2 id="高级链接方法"><a href="#高级链接方法" class="headerlink" title="高级链接方法"></a>高级链接方法</h2><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用1作为变量 [Github][1]</span><br><span class="line">在末尾为1赋值</span><br><span class="line">[1]:https://github.com github</span><br></pre></td></tr></tbody></table></figure><p><strong>预览效果</strong></p><p>使用1作为变量 <a href="https://github.com(https://github.com/)" target="_blank" rel="noopener">Github</a><br>在末尾为1赋值</p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>列表分为有序列表和无序列表,都可以嵌套，嵌套时在下一个列表前加<code>Tab</code>或加三个空格<br>其中有序列表使用符号<code>*</code>或<code>+</code>或<code>-</code>即可</p><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- C</span><br><span class="line">+ C++</span><br><span class="line">* Java</span><br><span class="line"></span><br><span class="line">- 嵌套1</span><br><span class="line">- 嵌套2</span><br><span class="line">- 嵌套3</span><br><span class="line"></span><br><span class="line">1. C</span><br><span class="line">2. C++</span><br><span class="line">3. Java</span><br><span class="line"></span><br><span class="line">1. 嵌套1</span><br><span class="line">1. 嵌套2</span><br><span class="line">2. 嵌套2（1）</span><br><span class="line">3. 嵌套2（2）</span><br><span class="line">1. 嵌套3</span><br><span class="line">2. 嵌套3（1）</span><br><span class="line">2. 嵌套2（3）</span><br><span class="line">2. 嵌套1（1）</span><br></pre></td></tr></tbody></table></figure><p><strong>预览效果</strong></p><ul><li><p>C</p></li><li><p>C++</p></li><li><p>Java</p></li><li><p>嵌套1</p><ul><li>嵌套1<ul><li>嵌套3</li></ul></li></ul></li></ul><ol><li>C</li><li>C++</li><li><p>Java</p></li><li><p>嵌套1</p><ol><li>嵌套2</li><li>嵌套2（1）</li><li>嵌套2（2）<ol><li>嵌套3</li><li>嵌套3（1）</li></ol></li><li>嵌套2（3）</li></ol></li><li>嵌套1（1）</li></ol><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">-|:-:|-:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br></pre></td></tr></tbody></table></figure><p>其中第二行表示对齐方式</p><ul><li>默认为左对齐，只写<code>-</code></li><li>居中为<code>:-:</code></li><li>右对齐为<code>-:</code></li></ul><p><strong>预览效果</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">表头</th><th style="text-align:left">表头</th><th style="text-align:left">表头</th></tr></thead><tbody><tr><td style="text-align:left">内容</td><td style="text-align:left">内容</td><td style="text-align:left">内容</td></tr><tr><td style="text-align:left">内容</td><td style="text-align:left">内容</td><td style="text-align:left">内容</td></tr></tbody></table></div><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>代码使用反引号 <code>表示，反引号是键盘左上角的</code>~`键输入，而不是键盘右边的引号<br>连续三个反引号可以生成代码块，代码块后面的字符表示不同的语言类型，示例中多打了括号</p><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">`Hello World！`</span><br><span class="line">(```cpp)</span><br><span class="line">    #include <stdio.h></span><br><span class="line">    int main(void){</span><br><span class="line">    printf("Hello World!");</span><br><span class="line">        return 0;</span><br><span class="line">    }</span><br><span class="line">    (```)</span><br></pre></td></tr></tbody></table></figure><p><strong>预览效果</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">#include <stdio.h></span><br><span class="line">int main(void){</span><br><span class="line">printf("Hello World!");</span><br><span class="line">    return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="代码块语言说明"><a href="#代码块语言说明" class="headerlink" title="代码块语言说明"></a>代码块语言说明</h2><p>三个反引号后面的语言格式说明</p><div class="table-container"><table><thead><tr><th style="text-align:left">语言</th><th style="text-align:left">格式</th></tr></thead><tbody><tr><td style="text-align:left">Bash</td><td style="text-align:left">bash</td></tr><tr><td style="text-align:left">C#</td><td style="text-align:left">cs</td></tr><tr><td style="text-align:left">C语言</td><td style="text-align:left">cpp</td></tr><tr><td style="text-align:left">CSS</td><td style="text-align:left">css</td></tr><tr><td style="text-align:left">DOS</td><td style="text-align:left">dos</td></tr><tr><td style="text-align:left">Go</td><td style="text-align:left">go</td></tr><tr><td style="text-align:left">HTML</td><td style="text-align:left">xml</td></tr><tr><td style="text-align:left">ini</td><td style="text-align:left">ini</td></tr><tr><td style="text-align:left">Matlab</td><td style="text-align:left">matlab</td></tr><tr><td style="text-align:left">Markdown</td><td style="text-align:left">markdown</td></tr><tr><td style="text-align:left">makefile</td><td style="text-align:left">makefile</td></tr><tr><td style="text-align:left">Json</td><td style="text-align:left">json</td></tr><tr><td style="text-align:left">Java</td><td style="text-align:left">java</td></tr><tr><td style="text-align:left">JavaScript</td><td style="text-align:left">js / javascript</td></tr><tr><td style="text-align:left">Objective-C</td><td style="text-align:left">objectivec</td></tr><tr><td style="text-align:left">PHP</td><td style="text-align:left">php</td></tr><tr><td style="text-align:left">PowerShell</td><td style="text-align:left">powershell</td></tr><tr><td style="text-align:left">Processing</td><td style="text-align:left">processing</td></tr><tr><td style="text-align:left">Python</td><td style="text-align:left">python</td></tr><tr><td style="text-align:left">R</td><td style="text-align:left">r</td></tr><tr><td style="text-align:left">Ruby</td><td style="text-align:left">ruby</td></tr><tr><td style="text-align:left">SQL</td><td style="text-align:left">sql</td></tr><tr><td style="text-align:left">Swift</td><td style="text-align:left">swift</td></tr><tr><td style="text-align:left">TeX</td><td style="text-align:left">tex</td></tr><tr><td style="text-align:left">VBScript</td><td style="text-align:left">vbscript</td></tr><tr><td style="text-align:left">VB.Net</td><td style="text-align:left">vbnet</td></tr><tr><td style="text-align:left">Vim Script</td><td style="text-align:left">vim</td></tr></tbody></table></div><h1 id="小文本"><a href="#小文本" class="headerlink" title="小文本"></a>小文本</h1><p>在文本两端分别加入<code>和</code>即可生成小文本</p><p><strong>示例</strong><br><code>小文本</code></p><p><strong>预览效果</strong></p><p>小文本</p><h1 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h1><p>在使用一些特殊符号(如<code>#</code>)时需要在符号前加<code>\</code>进行转义，否则符号不会正确显示</p><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\#</span><br><span class="line">\*</span><br><span class="line">\!</span><br><span class="line">\+</span><br><span class="line">\-</span><br></pre></td></tr></tbody></table></figure><p><strong>预览效果</strong></p><p>#<br>*<br>!<br>+<br>-</p><h2 id="特殊转义"><a href="#特殊转义" class="headerlink" title="特殊转义"></a>特殊转义</h2><p>部分特殊字符需要使用字符串转义</p><div class="table-container"><table><thead><tr><th style="text-align:left">特殊字符</th><th style="text-align:left">转义符号</th><th style="text-align:left">中文名称</th><th style="text-align:left">英文名称</th></tr></thead><tbody><tr><td style="text-align:left">!</td><td style="text-align:left"><code>!</code></td><td style="text-align:left">感叹号</td><td style="text-align:left">Exclamation mark</td></tr><tr><td style="text-align:left">“</td><td style="text-align:left"><code>"</code> <code>"</code></td><td style="text-align:left">双引号</td><td style="text-align:left">Quotation mark</td></tr><tr><td style="text-align:left">#</td><td style="text-align:left"><code>#</code></td><td style="text-align:left">数字标志</td><td style="text-align:left">Number sign</td></tr><tr><td style="text-align:left">$</td><td style="text-align:left"><code>$</code></td><td style="text-align:left">美元标志</td><td style="text-align:left">Dollar sign</td></tr><tr><td style="text-align:left">%</td><td style="text-align:left"><code>%</code></td><td style="text-align:left">百分号</td><td style="text-align:left">Percent sign</td></tr><tr><td style="text-align:left">&</td><td style="text-align:left"><code>&</code> <code>&</code></td><td style="text-align:left">与</td><td style="text-align:left">Ampersand</td></tr><tr><td style="text-align:left">‘</td><td style="text-align:left"><code>'</code></td><td style="text-align:left">单引号</td><td style="text-align:left">Apostrophe</td></tr><tr><td style="text-align:left">(</td><td style="text-align:left"><code>(</code></td><td style="text-align:left">小括号左边部分</td><td style="text-align:left">Left parenthesis</td></tr><tr><td style="text-align:left">)</td><td style="text-align:left"><code>)</code></td><td style="text-align:left">小括号右边部分</td><td style="text-align:left">Right parenthesis</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left"><code>*</code></td><td style="text-align:left">星号</td><td style="text-align:left">Asterisk</td></tr><tr><td style="text-align:left">+</td><td style="text-align:left"><code>+</code></td><td style="text-align:left">加号</td><td style="text-align:left">Plus sign</td></tr><tr><td style="text-align:left"><</td><td style="text-align:left"><code><</code> <code><</code></td><td style="text-align:left">小于号</td><td style="text-align:left">Less than</td></tr><tr><td style="text-align:left">=</td><td style="text-align:left"><code>=</code></td><td style="text-align:left">等于符号</td><td style="text-align:left">Equals sign</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left"><code>-</code> <code>−</code></td><td style="text-align:left">减号</td><td style="text-align:left">Minus</td></tr><tr><td style="text-align:left">></td><td style="text-align:left"><code>></code> <code>></code></td><td style="text-align:left">大于号</td><td style="text-align:left">Greater than</td></tr><tr><td style="text-align:left">?</td><td style="text-align:left"><code>?</code></td><td style="text-align:left">问号</td><td style="text-align:left">Question mark</td></tr><tr><td style="text-align:left">@</td><td style="text-align:left"><code>@</code></td><td style="text-align:left">艾特</td><td style="text-align:left">Commercial at</td></tr><tr><td style="text-align:left">[</td><td style="text-align:left"><code>[</code></td><td style="text-align:left">中括号左边部分</td><td style="text-align:left">Left square bracket</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left"><code>\</code></td><td style="text-align:left">反斜杠</td><td style="text-align:left">Reverse solidus (backslash)</td></tr><tr><td style="text-align:left">]</td><td style="text-align:left"><code>]</code></td><td style="text-align:left">— 中括号右边部分</td><td style="text-align:left">Right square bracket</td></tr><tr><td style="text-align:left">{</td><td style="text-align:left"><code>{</code></td><td style="text-align:left">大括号左边部分</td><td style="text-align:left">Left curly brace</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left"></td><td style="text-align:left">`</td><td style="text-align:left">`</td><td>竖线</td><td>Vertical bar</td></tr><tr><td style="text-align:left">}</td><td style="text-align:left"><code>}</code></td><td style="text-align:left">大括号右边部分</td><td style="text-align:left">Right curly brace</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><code> </code></td><td style="text-align:left">空格</td><td style="text-align:left">Space</td></tr></tbody></table></div><h1 id="字体颜色大小"><a href="#字体颜色大小" class="headerlink" title="字体颜色大小"></a>字体颜色大小</h1><ul><li>Hexo只支持黑色字体，可以使用Html语言调整颜色，使用<code>和</code>包裹需要变色的字体，<code>ff0000</code>可以替换为其他颜色代码。</li><li>字号同样使用Html语言调整，使用<code>和</code>包裹需要改变大小的字体，<code>font size=</code>后是调整的字号。</li><li>字体同样使用Html语言调整，使用<code>和</code>包裹需要改变的字体，<code>font face=</code>后是调整的字体名称。</li><li>颜色字号字体三者可以叠加使用</li></ul><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><font color="ff0000">这是红色字</font></span><br><span class="line"><font size=2>这是2号字</font></span><br><span class="line"><font face="华文彩云">这是华文彩云字</font></span><br><span class="line"><font face="华文彩云" size=2 color="ff0000">这是2号红色华文彩云字</font></span><br></pre></td></tr></tbody></table></figure><p><strong>预览</strong><br>这是红色字<br>这是2号字<br>这是华文彩云字<br>这是2号红色华文彩云字</p><h1 id="字体居中"><a href="#字体居中" class="headerlink" title="字体居中"></a>字体居中</h1><p>字体居中同样使用Html语言包裹，有三种格式<br><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% centerquote %}这是居中字体{% endcenterquote %}</span><br><span class="line"> <blockquote class="blockquote-center">这是居中字体</blockquote></span><br><span class="line">{% cq %}这是居中字体{% endcq %}</span><br></pre></td></tr></tbody></table></figure><p><strong>预览</strong></p><blockquote><p>这是居中字体</p><p>这是居中字体</p><p>这是居中字体</p></blockquote><h1 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h1><p>一种类似todo list的东西<br><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- [ ]这是勾选框</span><br></pre></td></tr></tbody></table></figure><p><strong>预览</strong></p><ul><li>[ ]这是勾选框</li></ul><h1 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a>首行缩进</h1><p>Hexo会把缩进的空格忽略掉，所以需要使用转义来进行首行缩进<br><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&emsp;&emsp;这是首行缩进的文本</span><br></pre></td></tr></tbody></table></figure><p><strong>预览</strong><br>  这是首行缩进的文本</p><h1 id="链接到其他文章"><a href="#链接到其他文章" class="headerlink" title="链接到其他文章"></a>链接到其他文章</h1><p>Hexo支持引入其他文章链接，语法为<code>和</code>,其中<code>slug</code>是要引用markdown的文件名，title是引用文章的标题</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% post_link Hexo博客踩坑指北 [Hexo博客指北] %}</span><br></pre></td></tr></tbody></table></figure><p><strong>预览</strong></p><p><a href="https://siriusq.top/Hexo博客踩坑指北.html" target="_blank" rel="noopener">[Hexo博客指北]</a></p><h1 id="文字背景色"><a href="#文字背景色" class="headerlink" title="文字背景色"></a>文字背景色</h1><p>文字背景色需要使用Html表格设置，在<code>bgcolor</code>后设置文字背景色，使用颜色英文名<br><strong>预览</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><table><tr><td bgcolor=lightblue>背景色yellow</td></tr></table></span><br></pre></td></tr></tbody></table></figure><p><strong>示例</strong></p><p>亮蓝色背景色</p><h1 id="Note标签"><a href="#Note标签" class="headerlink" title="Note标签"></a>Note标签</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>需要在Next主题配置文件中选择样式，打开<code>_config.yml</code>并搜索<code>Note tag (bs-callout)</code>,下面是我的配置,<code>style</code>共有五种，预览可以在<a href="https://github.com/iissnan/hexo-theme-next/pull/1697">这里</a>查看，<code>icon</code>用于设置是否显示图标</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Note tag (bs-callout)</span><br><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: flat</span><br><span class="line">  icons: true</span><br><span class="line">  border_radius: 3</span><br><span class="line">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="line">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class="line">  light_bg_offset: 0</span><br></pre></td></tr></tbody></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>使用<code>`包裹需要显示的内容，</code>class<code>后面显示note的风格，加上</code>no-icon`可以隐藏图标<br><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><div class="note default"><p>default</p></div></span><br><span class="line"><div class="note primary"><p>primary</p></div></span><br><span class="line"><div class="note success"><p>success</p></div></span><br><span class="line"><div class="note info"><p>info</p></div></span><br><span class="line"><div class="note warning"><p>warning</p></div></span><br><span class="line"><div class="note danger"><p>danger</p></div></span><br><span class="line"><div class="note default no-icon"><p>danger no-icon</p></div></span><br></pre></td></tr></tbody></table></figure><p><strong>预览</strong></p><p>default</p><p>primary</p><p>success</p><p>info</p><p>warning</p><p>danger</p><p>danger no-icon</p><h1 id="Label标签"><a href="#Label标签" class="headerlink" title="Label标签"></a>Label标签</h1><p>在<code>@</code>前调整label的风格，<code>@</code>后输入显示的内容<br><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{% label default@这是default %}</span><br><span class="line">{% label primary@这是primary %}</span><br><span class="line">{% label success@这是success %}</span><br><span class="line">{% label info@这是info %}</span><br><span class="line">{% label warning@这是warning %}</span><br><span class="line">{% label danger@这是danger %}</span><br></pre></td></tr></tbody></table></figure><p>**预览</p><p>这是default 这是primary 这是success 这是info 这是warning 这是danger</p><h1 id="Tab-tag选项卡"><a href="#Tab-tag选项卡" class="headerlink" title="Tab tag选项卡"></a>Tab tag选项卡</h1><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>在Next主题文件中搜索<code>Tabs tag</code>，然后将<code>enable</code>设置为<code>true</code>，下面是我的配置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Tabs tag</span><br><span class="line">tabs:</span><br><span class="line">  enable: true</span><br><span class="line">  transition:</span><br><span class="line">    tabs: true</span><br><span class="line">    labels: true</span><br><span class="line">  border_radius: 0</span><br></pre></td></tr></tbody></table></figure><h2 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h2><p>自定义的选项较多<br><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">{% tabs First unique name %}</span><br><span class="line"><!-- tab --></span><br><span class="line">**This is Tab 1.**</span><br><span class="line"><!-- endtab --></span><br><span class="line"><!-- tab --></span><br><span class="line">**This is Tab 2.**</span><br><span class="line"><!-- endtab --></span><br><span class="line"><!-- tab --></span><br><span class="line">**This is Tab 3.**</span><br><span class="line"><!-- endtab --></span><br><span class="line">{% endtabs %}</span><br></pre></td></tr></tbody></table></figure><p><strong>预览</strong></p><ul><li><a href="https://siriusq.top/Markdown写作语法.html#first-unique-name-1" target="_blank" rel="noopener">First unique name 1</a></li><li><a href="https://siriusq.top/Markdown写作语法.html#first-unique-name-2" target="_blank" rel="noopener">First unique name 2</a></li><li><a href="https://siriusq.top/Markdown写作语法.html#first-unique-name-3" target="_blank" rel="noopener">First unique name 3</a></li></ul><p><strong>This is Tab 1.</strong></p><p><strong>示例</strong><br>第一行的数字3表示默认显示的Tabs,设置为-1时表示不显示默认Tabs</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">{% tabs Second unique name, 3 %}</span><br><span class="line"><!-- tab --></span><br><span class="line">**This is Tab 1.**</span><br><span class="line"><!-- endtab --></span><br><span class="line"><!-- tab --></span><br><span class="line">**This is Tab 2.**</span><br><span class="line"><!-- endtab --></span><br><span class="line"><!-- tab --></span><br><span class="line">**This is Tab 3.**</span><br><span class="line"><!-- endtab --></span><br><span class="line">{% endtabs %}</span><br></pre></td></tr></tbody></table></figure><p><strong>预览</strong></p><ul><li><a href="https://siriusq.top/Markdown写作语法.html#second-unique-name-1" target="_blank" rel="noopener">Second unique name 1</a></li><li><a href="https://siriusq.top/Markdown写作语法.html#second-unique-name-2" target="_blank" rel="noopener">Second unique name 2</a></li><li><a href="https://siriusq.top/Markdown写作语法.html#second-unique-name-3" target="_blank" rel="noopener">Second unique name 3</a></li></ul><p><strong>This is Tab 3.</strong></p><p><strong>示例</strong><br>选项的名称和图标可以自定义，在``中调整</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">{% tabs Third unique name %}</span><br><span class="line"><!-- tab Solution 1@text-width --></span><br><span class="line">**This is Tab 1.**</span><br><span class="line"><!-- endtab --></span><br><span class="line"><!-- tab Solution 2@amazon --></span><br><span class="line">**This is Tab 2.**</span><br><span class="line"><!-- endtab --></span><br><span class="line"><!-- tab Solution 3@bold --></span><br><span class="line">**This is Tab 3.**</span><br><span class="line"><!-- endtab --></span><br><span class="line">{% endtabs %}</span><br></pre></td></tr></tbody></table></figure><p><strong>预览</strong></p><ul><li><a href="https://siriusq.top/Markdown写作语法.html#third-unique-name-1" target="_blank" rel="noopener">Solution 1</a></li><li><a href="https://siriusq.top/Markdown写作语法.html#third-unique-name-2" target="_blank" rel="noopener">Solution 2</a></li><li><a href="https://siriusq.top/Markdown写作语法.html#third-unique-name-3" target="_blank" rel="noopener">Solution 3</a></li></ul><p><strong>This is Tab 1.</strong></p><h1 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h1><p><strong>示例</strong><br>使用<code>button</code>或者<code>btn</code>，在两者后面加入要跳转的链接，不加链接的话默认跳转到当前页面</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//只显示文字，Text是文字内容</span><br><span class="line">{% button https://siriusq.top/, 主页 %}</span><br><span class="line"></span><br><span class="line">//多个按钮并列</span><br><span class="line">{% btn https://siriusq.top/, 主页 %} {% btn #, Text & Title,, Title %}</span><br><span class="line"></span><br><span class="line">//只显示图标</span><br><span class="line"><p>{% btn https://siriusq.top/,, home fa-5x %}</span><br><span class="line">{% btn #,, home fa-4x %}</span><br><span class="line">{% btn #,, home fa-3x %}{% btn #,, home fa-2x %}{% btn #,, home fa-lg %}{% btn #,, home %}</p></span><br><span class="line"></span><br><span class="line">//显示文字和图标</span><br><span class="line"><p>{% btn #, Text & Icon (buggy), home %}</span><br><span class="line">{% btn #, Text & Icon (fixed width), home fa-fw %}</p></span><br></pre></td></tr></tbody></table></figure><p><strong>预览</strong><br>只显示文字</p><p><a href="https://siriusq.top/" target="_blank" rel="noopener">主页</a></p><p>多个按钮并列</p><p><a href="https://siriusq.top/" target="_blank" rel="noopener">主页</a> <a href="https://siriusq.top/Markdown写作语法.html#" target="_blank" rel="noopener">Text & Title</a></p><p>只显示图标</p><p>显示文字和图标</p><p><a href="https://siriusq.top/Markdown写作语法.html#" target="_blank" rel="noopener">Text & Icon (buggy)</a> <a href="https://siriusq.top/Markdown写作语法.html#" target="_blank" rel="noopener">Text & Icon (fixed width)</a></p><h1 id="插入音乐-视频"><a href="#插入音乐-视频" class="headerlink" title="插入音乐/视频"></a>插入音乐/视频</h1><p>因为Github Page提供的空间有限，音乐和视频建议上传到B站或Youtube等平台，通过Html语言嵌入，直接复制网页提供的分享链接即可，使用<code>width</code>设置宽度，<code>height</code>设置高度</p><h2 id="标签"><a href="#标签" class="headerlink" title="``标签"></a>``标签</h2><p>使用<code>source src</code>设置视频路径<br><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><video width="480" height="320" controls></span><br><span class="line"><source src="movie.mp4"></span><br><span class="line"></video></span><br></pre></td></tr></tbody></table></figure><p><strong>预览（并没有视频）</strong></p><h2 id="标签-1"><a href="#标签-1" class="headerlink" title="``标签"></a>``标签</h2><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><embed src='http://player.youku.com/player.php/sid/XMzUzNjg1OTQzNg==/v.swf' allowFullScreen='true' quality='high' width='480' height='400' align='middle' allowScriptAccess='always' type='application/x-shockwave-flash'></embed></span><br></pre></td></tr></tbody></table></figure><p><strong>预览（随便放的）</strong></p><h2 id="标签-2"><a href="#标签-2" class="headerlink" title="``标签"></a>``标签</h2><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><iframe height=400 width=600 src="//player.bilibili.com/player.html?aid=14176961&cid=23141262&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></span><br></pre></td></tr></tbody></table></figure><p><strong>预览（自己的B站软广）</strong></p><iframe height="400" width="600" src="https://www.bilibili.com/video/BV1ni4y1F79U" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="display: block; margin: 0px; max-width: 100%; height: 498.65625px; left: 0px; position: absolute; top: 0px; width: 748px;"></iframe><h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><h2 id="步骤如下"><a href="#步骤如下" class="headerlink" title="步骤如下"></a>步骤如下</h2><ul><li><p>安装图片插件</p><ul><li>在博客根目录中运行Git bash</li><li>输入命令<code>npm install hexo-asset-image</code>等待安装完成</li></ul></li><li><p>修改配置文件</p><ul><li>打开博客根目录的<code>_config.yml</code></li><li>搜索<code>psot_asset_folder</code>并将其设置为<code>true</code></li></ul></li><li><p>使用方法</p><ul><li><p>使用命令<code>hexo new "title"</code>创建新博文时会生成一个同名文件夹</p></li><li><p>将要插入的图片放入同名文件夹中</p></li><li><p>使用markdown格式引入图片，下面三种都可以,最后一种可以通过后面的数字控制大小</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![替代文字](博客标题/图片名.JPG)</span><br><span class="line">![替代文字](/博客标题/图片名.JPG)</span><br><span class="line">{% img full-image /博客标题/图片名.JPG 180 180 图片名 %}</span><br></pre></td></tr></tbody></table></figure></li><li><p>运行<code>hexo s</code>即可本地查看效果</p></li></ul></li></ul><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![替代文字](Markdown写作语法/201904133.JPG)</span><br><span class="line">![替代文字](/Markdown写作语法/201904133.JPG)</span><br><span class="line">{% img full-image /Markdown写作语法/201904133.JPG 180 180 图片名 %}</span><br></pre></td></tr></tbody></table></figure><p><strong>预览</strong></p><p><img data-src="https://siriusq.top/Markdown%E5%86%99%E4%BD%9C%E8%AF%AD%E6%B3%95/201904133.JPG" alt="替代文字"><br><img data-src="https://siriusq.top/Markdown%E5%86%99%E4%BD%9C%E8%AF%AD%E6%B3%95/201904133.JPG" alt="替代文字"></p><p><img data-src="https://siriusq.top/Markdown%E5%86%99%E4%BD%9C%E8%AF%AD%E6%B3%95/201904133.JPG" alt="图片名"></p><h2 id="一点微小的工作"><a href="#一点微小的工作" class="headerlink" title="一点微小的工作"></a>一点微小的工作</h2><p>Next主题默认会在图片四周生成一圈灰色边框影响美观，对此需要修改<code>博客目录\themes\next\source\css\_common\components\post</code>中的<code>post-expand.styl</code>文件。<br>在文件中搜索<code>img</code>，并将其修改为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">img {</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    margin: 0 auto 25px;</span><br><span class="line">    padding: 3px;</span><br><span class="line">    border: none;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>重新部署后灰色边框就会消失</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>图片后缀大小写要匹配</p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>在文字前加<code>#</code>和空格，支持六级标题和大小标题，一定不要漏了 <strong>空格</strong>，空格漏掉的话会和普通字符一样显示</p><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line"></span><br><span class="line">大标题</span><br><span class="line">===</span><br><span class="line"></span><br><span class="line">小标题</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure><p><strong>预览效果</strong></p><p>就不预览了，太难看了qaq</p><h1 id="数学公式使用"><a href="#数学公式使用" class="headerlink" title="数学公式使用"></a>数学公式使用</h1><p>转载自<a href="https://jzqt.github.io/2015/06/30/Markdown中写数学公式/" target="_blank" rel="noopener">剑紫青天</a></p><p>一些扩展的<code>Markdown</code>语法支持采用<code>LaTex</code>语法写数学公式，而在网页中使用<code>Mathjax</code>插件来显示数学公式。</p><p>本教程介绍<strong>如何在Markdown中书写数学公式</strong>。</p><h2 id="插入数学公式"><a href="#插入数学公式" class="headerlink" title="插入数学公式"></a>插入数学公式</h2><p>在Markdown中插入数学公式的语法是<script type="math/tex">数学公式</script>和$$$数学公式$$$。</p><p><strong>行内公式</strong>是可以让公式在文中与文字或其他东西混编，不独占一行。</p><ul><li><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">质能方程$E = mc^2$</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>显示</strong></p><blockquote><p>质能方程$E = mc^2$</p></blockquote></li></ul><p><strong>独立公式</strong>使公式单独占一行，不与文中其他文字等混编。</p><ul><li><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">质能方程$$E = mc^2$$</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>显示</strong></p><blockquote><p>质能方程<script type="math/tex">E = mc^2</script></p></blockquote></li></ul><h2 id="普通公式"><a href="#普通公式" class="headerlink" title="普通公式"></a>普通公式</h2><p>普通的加减乘除数学公式的输入方法与平常的书写一样。</p><ul><li><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$x = 100 * y + z - 10 / 33 + 10 % 3$$</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>显示</strong></p><blockquote><script type="math/tex; mode=display">x = 100 * y + z - 10 / 33 + 10 % 3</script></blockquote></li></ul><h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><p>使用<code>^</code>来表示上标，<code>_</code>来表示下标，同时如果上下标的内容多于一个字符，可以使用<code>{}</code>来将这些内容括起来当做一个整体。<br>与此同时，上下标是可以嵌套的。</p><ul><li><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$x = a_{1}^n + a_{2}^n + a_{3}^n$$</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>显示</strong></p><blockquote><script type="math/tex; mode=display">x = a_{1}^n + a_{2}^n + a_{3}^n</script></blockquote></li></ul><p>如果希望左右两边都能有上下标，可以使用<code>\sideset</code>语法</p><ul><li><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$\sideset{^1_2}{^3_4}A$$</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>显示</strong></p><blockquote><script type="math/tex; mode=display">\sideset{^1_2}{^3_4}A</script></blockquote></li></ul><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p><code>()</code>，<code>[]</code>和<code>|</code>都表示它们自己，但是<code>{}</code>因为有特殊作用因此当需要显示大括号时一般使用<code>\lbrace \rbrace</code>来表示。</p><ul><li><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$f(x, y) = 100 * \lbrace[(x + y) * 3] - 5\rbrace$$</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>显示</strong></p><blockquote><script type="math/tex; mode=display">f(x, y) = 100 * \lbrace[(x + y) * 3] - 5\rbrace</script></blockquote></li></ul><h2 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h2><p>分数使用<code>\frac{分母}{分子}</code>这样的语法，不过推荐使用<code>\cfrac</code>来代替<code>\frac</code>，显示公式不会太挤。</p><ul><li><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$\frac{1}{3} 与 \cfrac{1}{3}$$</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>显示</strong></p><blockquote><script type="math/tex; mode=display">\frac{1}{3} 与 \cfrac{1}{3}</script></blockquote></li></ul><h2 id="开方"><a href="#开方" class="headerlink" title="开方"></a>开方</h2><p>开方使用<code>\sqrt[次数]{被开方数}</code>这样的语法</p><ul><li><p><strong>示例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$$\sqrt[3]{X}$$</span><br><span class="line">$$\sqrt{5 - x}$$</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>显示</strong></p><blockquote><script type="math/tex; mode=display">\sqrt[3]{X}</script><script type="math/tex; mode=display">\sqrt{5 - x}</script></blockquote></li></ul><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><p>见下表</p><div class="table-container"><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">大写</th><th style="text-align:center">代码</th><th style="text-align:center">小写</th></tr></thead><tbody><tr><td style="text-align:center"><code>A</code></td><td style="text-align:center">$A$</td><td style="text-align:center"><code>\alpha</code></td><td style="text-align:center">$\alpha$</td></tr><tr><td style="text-align:center"><code>B</code></td><td style="text-align:center">$B$</td><td style="text-align:center"><code>\beta</code></td><td style="text-align:center">$\beta$</td></tr><tr><td style="text-align:center"><code>\Gamma</code></td><td style="text-align:center">$\Gamma$</td><td style="text-align:center"><code>\gamma</code></td><td style="text-align:center">$\gamma$</td></tr><tr><td style="text-align:center"><code>\Delta</code></td><td style="text-align:center">$\Delta$</td><td style="text-align:center"><code>\delta</code></td><td style="text-align:center">$\delta$</td></tr><tr><td style="text-align:center"><code>E</code></td><td style="text-align:center">$E$</td><td style="text-align:center"><code>\epsilon</code></td><td style="text-align:center">$\epsilon$</td></tr><tr><td style="text-align:center"><code>Z</code></td><td style="text-align:center">$Z$</td><td style="text-align:center"><code>\zeta</code></td><td style="text-align:center">$\zeta$</td></tr><tr><td style="text-align:center"><code>H</code></td><td style="text-align:center">$H$</td><td style="text-align:center"><code>\eta</code></td><td style="text-align:center">$\eta$</td></tr><tr><td style="text-align:center"><code>\Theta</code></td><td style="text-align:center">$\Theta$</td><td style="text-align:center"><code>\theta</code></td><td style="text-align:center">$\theta$</td></tr><tr><td style="text-align:center"><code>I</code></td><td style="text-align:center">$I$</td><td style="text-align:center"><code>\iota</code></td><td style="text-align:center">$\iota$</td></tr><tr><td style="text-align:center"><code>K</code></td><td style="text-align:center">$K$</td><td style="text-align:center"><code>\kappa</code></td><td style="text-align:center">$\kappa$</td></tr><tr><td style="text-align:center"><code>\Lambda</code></td><td style="text-align:center">$\Lambda$</td><td style="text-align:center"><code>\lambda</code></td><td style="text-align:center">$\lambda$</td></tr><tr><td style="text-align:center"><code>M</code></td><td style="text-align:center">$M$</td><td style="text-align:center"><code>\mu</code></td><td style="text-align:center">$\mu$</td></tr><tr><td style="text-align:center"><code>N</code></td><td style="text-align:center">$N$</td><td style="text-align:center"><code>\nu</code></td><td style="text-align:center">$\nu$</td></tr><tr><td style="text-align:center"><code>\Xi</code></td><td style="text-align:center">$\Xi$</td><td style="text-align:center"><code>\xi</code></td><td style="text-align:center">$\xi$</td></tr><tr><td style="text-align:center"><code>O</code></td><td style="text-align:center">$O$</td><td style="text-align:center"><code>\omicron</code></td><td style="text-align:center">$\omicron$</td></tr><tr><td style="text-align:center"><code>\Pi</code></td><td style="text-align:center">$\Pi$</td><td style="text-align:center"><code>\pi</code></td><td style="text-align:center">$\pi$</td></tr><tr><td style="text-align:center"><code>P</code></td><td style="text-align:center">$P$</td><td style="text-align:center"><code>\rho</code></td><td style="text-align:center">$\rho$</td></tr><tr><td style="text-align:center"><code>\Sigma</code></td><td style="text-align:center">$\Sigma$</td><td style="text-align:center"><code>\sigma</code></td><td style="text-align:center">$\sigma$</td></tr><tr><td style="text-align:center"><code>T</code></td><td style="text-align:center">$T$</td><td style="text-align:center"><code>\tau</code></td><td style="text-align:center">$\tau$</td></tr><tr><td style="text-align:center"><code>\Upsilon</code></td><td style="text-align:center">$\Upsilon$</td><td style="text-align:center"><code>\upsilon</code></td><td style="text-align:center">$\upsilon$</td></tr><tr><td style="text-align:center"><code>\Phi</code></td><td style="text-align:center">$\Phi$</td><td style="text-align:center"><code>\phi</code></td><td style="text-align:center">$\phi$</td></tr><tr><td style="text-align:center"><code>X</code></td><td style="text-align:center">$X$</td><td style="text-align:center"><code>\chi</code></td><td style="text-align:center">$\chi$</td></tr><tr><td style="text-align:center"><code>\Psi</code></td><td style="text-align:center">$\Psi$</td><td style="text-align:center"><code>\psi</code></td><td style="text-align:center">$\psi$</td></tr><tr><td style="text-align:center"><code>\Omega</code></td><td style="text-align:center">$\Omega$</td><td style="text-align:center"><code>\omega</code></td><td style="text-align:center">$\omega$</td></tr></tbody></table></div><h2 id="其他字符"><a href="#其他字符" class="headerlink" title="其他字符"></a>其他字符</h2><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">代码</th></tr></thead><tbody><tr><td style="text-align:center">$\pm$</td><td style="text-align:left"><code>\pm</code></td></tr><tr><td style="text-align:center">$\times$</td><td style="text-align:left"><code>\times</code></td></tr><tr><td style="text-align:center">$\div$</td><td style="text-align:left"><code>\div</code></td></tr><tr><td style="text-align:center">$\mid$</td><td style="text-align:left"><code>\mid</code></td></tr><tr><td style="text-align:center">$\nmid$</td><td style="text-align:left"><code>\nmid</code></td></tr><tr><td style="text-align:center">$\cdot$</td><td style="text-align:left"><code>\cdot</code></td></tr><tr><td style="text-align:center">$\circ$</td><td style="text-align:left"><code>\circ</code></td></tr><tr><td style="text-align:center">$\ast$</td><td style="text-align:left"><code>\ast</code></td></tr><tr><td style="text-align:center">$\bigodot$</td><td style="text-align:left"><code>\bigodot</code></td></tr><tr><td style="text-align:center">$\bigotimes$</td><td style="text-align:left"><code>\bigotimes</code></td></tr><tr><td style="text-align:center">$\bigoplus$</td><td style="text-align:left"><code>\bigoplus</code></td></tr><tr><td style="text-align:center">$\leq$</td><td style="text-align:left"><code>\leq</code></td></tr><tr><td style="text-align:center">$\geq$</td><td style="text-align:left"><code>\geq</code></td></tr><tr><td style="text-align:center">$\neq$</td><td style="text-align:left"><code>\neq</code></td></tr><tr><td style="text-align:center">$\approx$</td><td style="text-align:left"><code>\approx</code></td></tr><tr><td style="text-align:center">$\equiv$</td><td style="text-align:left"><code>\equiv</code></td></tr><tr><td style="text-align:center">$\sum$</td><td style="text-align:left"><code>\sum</code></td></tr><tr><td style="text-align:center">$\prod$</td><td style="text-align:left"><code>\prod</code></td></tr><tr><td style="text-align:center">$\coprod$</td><td style="text-align:left"><code>\coprod</code></td></tr></tbody></table></div><h3 id="集合运算符"><a href="#集合运算符" class="headerlink" title="集合运算符"></a>集合运算符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">代码</th></tr></thead><tbody><tr><td style="text-align:center">$\emptyset$</td><td style="text-align:left"><code>\emptyset</code></td></tr><tr><td style="text-align:center">$\in$</td><td style="text-align:left"><code>\in</code></td></tr><tr><td style="text-align:center">$\notin$</td><td style="text-align:left"><code>\notin</code></td></tr><tr><td style="text-align:center">$\subset$</td><td style="text-align:left"><code>\subset</code></td></tr><tr><td style="text-align:center">$\supset$</td><td style="text-align:left"><code>\supset</code></td></tr><tr><td style="text-align:center">$\subseteq$</td><td style="text-align:left"><code>\subseteq</code></td></tr><tr><td style="text-align:center">$\supseteq$</td><td style="text-align:left"><code>\supseteq</code></td></tr><tr><td style="text-align:center">$\bigcap$</td><td style="text-align:left"><code>\bigcap</code></td></tr><tr><td style="text-align:center">$\bigcup$</td><td style="text-align:left"><code>\bigcup</code></td></tr><tr><td style="text-align:center">$\bigvee$</td><td style="text-align:left"><code>\bigvee</code></td></tr><tr><td style="text-align:center">$\bigwedge$</td><td style="text-align:left"><code>\bigwedge</code></td></tr><tr><td style="text-align:center">$\biguplus$</td><td style="text-align:left"><code>\biguplus</code></td></tr><tr><td style="text-align:center">$\bigsqcup$</td><td style="text-align:left"><code>\bigsqcup</code></td></tr></tbody></table></div><h3 id="对数运算符"><a href="#对数运算符" class="headerlink" title="对数运算符"></a>对数运算符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">代码</th></tr></thead><tbody><tr><td style="text-align:center">$\log$</td><td style="text-align:left"><code>\log</code></td></tr><tr><td style="text-align:center">$\lg$</td><td style="text-align:left"><code>\lg</code></td></tr><tr><td style="text-align:center">$\ln$</td><td style="text-align:left"><code>\ln</code></td></tr></tbody></table></div><h3 id="三角运算符"><a href="#三角运算符" class="headerlink" title="三角运算符"></a>三角运算符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">代码</th></tr></thead><tbody><tr><td style="text-align:center">$\bot$</td><td style="text-align:left"><code>\bot</code></td></tr><tr><td style="text-align:center">$\angle$</td><td style="text-align:left"><code>\angle</code></td></tr><tr><td style="text-align:center">$\sin$</td><td style="text-align:left"><code>\sin</code></td></tr><tr><td style="text-align:center">$\cos$</td><td style="text-align:left"><code>\cos</code></td></tr><tr><td style="text-align:center">$\tan$</td><td style="text-align:left"><code>\tan</code></td></tr><tr><td style="text-align:center">$\cot$</td><td style="text-align:left"><code>\cot</code></td></tr><tr><td style="text-align:center">$\sec$</td><td style="text-align:left"><code>\sec</code></td></tr><tr><td style="text-align:center">$\csc$</td><td style="text-align:left"><code>\csc</code></td></tr></tbody></table></div><h3 id="微积分运算符"><a href="#微积分运算符" class="headerlink" title="微积分运算符"></a>微积分运算符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">代码</th></tr></thead><tbody><tr><td style="text-align:center">$\prime$</td><td style="text-align:left"><code>\prime</code></td></tr><tr><td style="text-align:center">$\int$</td><td style="text-align:left"><code>\int</code></td></tr><tr><td style="text-align:center">$\iint$</td><td style="text-align:left"><code>\iint</code></td></tr><tr><td style="text-align:center">$\iiint$</td><td style="text-align:left"><code>\iiint</code></td></tr><tr><td style="text-align:center">$\iiiint$</td><td style="text-align:left"><code>\iiiint</code></td></tr><tr><td style="text-align:center">$\oint$</td><td style="text-align:left"><code>\oint</code></td></tr><tr><td style="text-align:center">$\lim$</td><td style="text-align:left"><code>\lim</code></td></tr><tr><td style="text-align:center">$\infty$</td><td style="text-align:left"><code>\infty</code></td></tr><tr><td style="text-align:center">$\nabla$</td><td style="text-align:left"><code>\nabla</code></td></tr><tr><td style="text-align:center">$\mathrm{d}$</td><td style="text-align:left"><code>\mathrm{d}</code></td></tr></tbody></table></div><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>感觉还是挂在自己博客上比较好看（手动狗头），还是建议大家去看原帖，侵权删除。</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自&lt;a href=&quot;https://siriusq.top/Markdown写作语法.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;siriusq&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;编写博客需要使用Markdown，因此需要熟记语法规则，虽然Markdown语法比较少，但是一个一个查起来也是很蛋疼的&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/MaverickTang/Zh-Blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="小工具" scheme="https://github.com/MaverickTang/Zh-Blog/tags/%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>尽管我们的手中一无所有——美国留学告别篇</title>
    <link href="https://github.com/MaverickTang/Zh-Blog/2020/03/21/American-Memory/"/>
    <id>https://github.com/MaverickTang/Zh-Blog/2020/03/21/American-Memory/</id>
    <published>2020-03-21T00:28:12.000Z</published>
    <updated>2021-01-02T10:04:32.533Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h2><p>​        关于记忆，我一直都很欣赏刘慈欣在三体里说的话：过去就像攥在手中的一把干沙，自以为攥得很紧，其实早就从指缝中流光了。这就是为什么会有回忆录，总要有一些东西来帮助人们记住一些重要的时刻，特别是对我来说，这重要的时刻竟然有接近一年之长。去年8月我离开成都来到Pasadena求学，今年三月因为Coronavirus回国，历时7个月（手动狗头好像和一年有些差距qaq）。不管怎样，我走得之匆忙甚至没空与朋友们好好告别，不过好在我走前搭建好了博客，还能写篇博客留给大家看看（还得写英语qaq）。</p><iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/bokuranoteniha-nanimonaikedo/1204763777?i=1204764497"></iframe><a id="more"></a><p>从前，少年有一个美国梦</p><p>于是少年登上飞机，来到了这个陌生的国土，当少年下飞机的时候。。。</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGoby6.png" alt></p><p>（误）</p><p>出国学习当然是为了日后回国帮助祖国进行建设，<strong>师夷长技以制夷</strong></p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGoho4.jpg" alt></p><p>其实去年八月我并不是第一次来美国（是前年第一次），所以并没有给我太多新鲜感，除了对即将开学感到激动与新奇，其他就没什么了，很多国内的朋友都不知道pasadena，所以我就给他们说我在Los Angeles。。。qaq    </p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGUGgx.jpg" alt></p><p>实际上在Pasadena，其实也没差啦 > 。<</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGo0oQ.jpg" alt></p><h2 id="照片集"><a href="#照片集" class="headerlink" title="照片集"></a>照片集</h2><p>当我走近学校的时候，草（中日双语），学校还能这么搞</p><p>我们有神奇的mol鬼计算机老师Lartuno</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGoUL8.jpg" alt></p><p>我们还有更加神奇的英语老V</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGoWeU.jpg" alt></p><p>老师都比较和蔼<del>可亲</del>,学校则更加<del>随意</del></p><p>学校的party</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGosWn.jpg" alt></p><p>Football 比赛</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGUiNj.jpg" alt></p><p>Cross country的teamdinner</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGozYd.jpg" alt></p><p>Science bowl</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGUUbD.jpg" alt></p><p>Soccer game</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGTiOf.gif" alt></p><p>在这里才真的是德智体美劳全面发展（误），猛的想起在中国社会实践扫大街的<del>光辉岁月</del>。 </p><h2 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h2><h3 id="炸裂的开局"><a href="#炸裂的开局" class="headerlink" title="炸裂的开局"></a>炸裂的开局</h3><p>来到这边是十升十，语言上应该是全校最差的，特别是我在国内小学英语课跟老师对线，十年级还不是国际学校，</p><p>“我不知道你有多聪明，因为你的英语听起来像是这边小学生，就像我的中文在你家人面前一样，他们觉得我很傻（逃）”这是我姐夫（米国人）对我说的原话</p><p>于是我能怎么办？</p><p>只有molmol自闭然后苦练英语鸭。。。</p><p>英语练不下去了只有用<strong>脸皮</strong>与别人交流</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGaSR1.jpg" alt></p><p>还好这边数学还有科学极其简单（结果还是拿了A- ≧︿≦），所以还能支撑</p><p>但是我还是太年轻了，开学几天晚交的作业数不胜数，于是这些作业都只有50%</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGogyV.jpg" alt></p><p>到了后来才知道作业还有quiz这类东西的重要性。还有学校Announcement的事情要记清，大部分时候我没听清楚就给自己带来了很多麻烦</p><h3 id="稳定的中场"><a href="#稳定的中场" class="headerlink" title="稳定的中场"></a>稳定的中场</h3><p>在适应学校生活之后感觉瞬间轻松很多了，就开始参加各种课外活动，不得不说美国的课外活动是真的<strong>丰富多彩</strong>，而且都包含在学费里面（不去参加感觉<strong>学费多交</strong>了一半）</p><p>好像开头就把图片放完了qaq（这跟开头丢一个王炸有什么区别啊喂）</p><p>没事我可以展开说</p><p>我在中国就喜欢踢球，但是美国这边运动是看赛季。。。</p><p>开学的时候赛季就只有橄榄球和Cross country</p><p>所以我先参加了<strong>cross country</strong></p><p>说白了就是长跑，就是好奇为什么这个不叫cross countryside</p><p>因为我们都是在<strong>countryside</strong>跑步,没有一次有机会在城里面跑（逃</p><p>（图是女var比赛</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGo3id.gif" alt></p><p>幸好我从初三开始因为^%^&**% 开始了自己的跑步减肥之旅，所以运气很好地进了varsity</p><p>（Varsity可以理解为中国的一队，与之相对的JV相当于是二队）</p><p>在cross country中也结交了一帮好友，Jonathan, Joshua, James, Yuming, Daniel, David, Liana…..</p><p>排名不分先后</p><p>我们这一届的Cross country在我与几个沙雕的带领下</p><p>日常跑步大概是这样</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGodeS.jpg" alt></p><p>还有这里第一次参赛</p><p>感觉没有长发的自己太淦了qaq</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGUF4s.jpg" alt></p><p>这个长跑一次比赛要求跑 3 miles，相当于5 km，真是对<strong>意志♂</strong>的考验</p><p>看得出来我的意志♂还不错</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGUJv6.jpg" alt></p><p>（Rookie of the year也就是年度最佳新人）</p><p>说好的德智体美劳</p><p>我到美国来还是要搞搞竞赛</p><p>我在国内水NOIP，来这边就水USACO吧。。。</p><p>结果我这个铁憨憨把比赛日期给错过了qaq</p><p>于是我在Math club里面和另外三个华裔把学校<strong>AMC10</strong>（美国数学奥林匹克竞赛）的<strong>前三</strong>给占完了。。。</p><p>顺便再参加一手<strong>Science bowl</strong></p><p>不亏</p><p>然后继续搞体育</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGoIY9.png" alt></p><p>心心恋恋的足球赛季终于开始了</p><p>教练看我比较溴，觉得JV需要我这种人才</p><p>来到JV，我吃苦耐劳,永争<strong>一</strong>流</p><p>创建了队史上多个第一第二</p><p>队内第一个助攻</p><p>队内第二个进球</p><p>队内第一张<strong>黄牌</strong></p><p>队内第二张<strong>黄牌</strong></p><p>别的不说，光黄牌我就给了教练两张</p><p>教练：</p><p>在我的执教生涯中，你是我遇到的唯一一个以一己之力给将我罚下的球员，我教练愿称你为最强！</p><p>并表示下学年一定送我去Varsity，他不敢再执教我了</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGooWR.gif" alt></p><p>（注：为什么我犯规教练拿到黄牌是因为着装问题是罚教练</p><p>我一次没带护腿板，一次带了手表参赛）</p><p>虽然作为球队最强。。。</p><p>的中国人（逃），但是我并不寂寞</p><p>毕竟还有一群傻屌的小伙汁</p><p>高糊画质</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGUXa4.jpg" alt></p><p>在队里我学到了团队合作（不合作队友不传球qaq）</p><p>这也是为什么我有队里接近50%的助攻</p><p>学会了与队友合作，也见证了球队从被别人打成5:0到把别人打成8:2的转变</p><p>其中的很多细节现在回想也依旧能<strong>笑出猪叫</strong></p><p><strong>包括但不限于</strong></p><p>边后卫精准传中（给对面），中后卫大脚解围<strong>痛击我的队友</strong>，中卫空中<strong>暴扣</strong>足球（记住这是足球比赛），前锋失球疯狂自虐。。。。</p><p>为什么没有边锋？</p><p>因为<strong>边疯</strong>是我啊哈哈哈哈哈哈哈</p><p>明年还想继续快乐足球</p><p>PS.美国的球场真特么好，是真草球场</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGojTe.jpg" alt></p><p>只可惜再也没有明年了。。。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>因为我实在太菜了，GPA（<strong>grade point average</strong>）只有4.29</p><p>然后也没搞出什么好点的项目</p><p>再加上coronavirus的影响</p><p>被迫结束了自己为期7个月的留学生活</p><p>不得不说留学生活还是听充实的</p><p>搞了搞数竞，计算机也有所精进</p><p>比如搞了这个博客</p><p>还有python爬虫的<a href="https://mavericreate.top/Blogs/2020/02/23/爬取进击的巨人漫画/" target="_blank" rel="noopener">实践</a>，在走之前还搞了搞3D建模</p><p>本来打出来想送给国内朋友的结果学校关了不能用3D打印机qaq</p><p>Laser cutting</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGolIH.jpg" alt></p><p>3D建模</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGo2LT.png" alt></p><p>总的来说</p><p>在这里自己动手实践的机会很多</p><p>同学们和老师都很友好</p><p>但是U一S一</p><p>课程太简单以及学校老师的教法参差不齐也是值得诟病的地方</p><p>还是回国老老实实地做一个理科狗吧</p><p>最后还是要感谢我姐还有姐夫在美国对我的照顾</p><p>朋友们的关照</p><p>还有家人对我的关爱</p><p>当然还有</p><p>主子。。。</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGofwF.jpg" alt></p><p>都看到这了，确定不<strong>打赏</strong>一波吗？</p><p>我回国一定要把没喝的奶茶补回来！！！</p><p>算了再放一张福利吧</p><p>来张初二与现在的对比</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGUubF.jpg" alt></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前序&quot;&gt;&lt;a href=&quot;#前序&quot; class=&quot;headerlink&quot; title=&quot;前序&quot;&gt;&lt;/a&gt;前序&lt;/h2&gt;&lt;p&gt;​        关于记忆，我一直都很欣赏刘慈欣在三体里说的话：过去就像攥在手中的一把干沙，自以为攥得很紧，其实早就从指缝中流光了。这就是为什么会有回忆录，总要有一些东西来帮助人们记住一些重要的时刻，特别是对我来说，这重要的时刻竟然有接近一年之长。去年8月我离开成都来到Pasadena求学，今年三月因为Coronavirus回国，历时7个月（手动狗头好像和一年有些差距qaq）。不管怎样，我走得之匆忙甚至没空与朋友们好好告别，不过好在我走前搭建好了博客，还能写篇博客留给大家看看（还得写英语qaq）。&lt;/p&gt;
&lt;iframe allow=&quot;autoplay *; encrypted-media *;&quot; frameborder=&quot;0&quot; height=&quot;150&quot; style=&quot;width:100%;max-width:660px;overflow:hidden;background:transparent;&quot; sandbox=&quot;allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation&quot; src=&quot;https://embed.music.apple.com/us/album/bokuranoteniha-nanimonaikedo/1204763777?i=1204764497&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/MaverickTang/Zh-Blog/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://github.com/MaverickTang/Zh-Blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>爬取进击的巨人漫画</title>
    <link href="https://github.com/MaverickTang/Zh-Blog/2020/02/24/Crawl-Attack-on%20t-titan/"/>
    <id>https://github.com/MaverickTang/Zh-Blog/2020/02/24/Crawl-Attack-on%20t-titan/</id>
    <published>2020-02-23T23:13:57.000Z</published>
    <updated>2021-02-08T00:01:27.290Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="使用Scrapy爬取进击的巨人漫画"><a href="#使用Scrapy爬取进击的巨人漫画" class="headerlink" title="使用Scrapy爬取进击的巨人漫画"></a>使用Scrapy爬取进击的巨人漫画</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>​        自己看到网上有两个大牛分别爬取了<strong>合法</strong>(Naruto)与<strong>非法</strong>(<del>你懂的</del>)的漫画，十分感叹，便也想借鉴借鉴，结果大牛的的代码在博主的电脑上运行不了(<del>丧尽天良</del>),所以就只有自己写了一个算是结合版的代码，爬取了这个<a href="https://www.fzdm.com/" target="_blank" rel="noopener">网站</a>。在此分享给大家，授人以both🐟。</p><p>​        代码已经挂在GitHub上面了，想下漫画的可以滑到最下面观看下载方法，这个方法不仅可以下载进击的巨人，整个网站的漫画都可以爬，建议大家别乱改我设置的延迟，爬的太快了可能会被网站锁IP。</p><a id="more"></a><h2 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h2><p>博主的环境如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mavericks-MacBook-Pro:~ maverick$</span><br><span class="line">Python 2.7.10 (default, Feb 22 2019, 21:55:15) </span><br><span class="line">Scrapy 1.8.0 - no active project</span><br></pre></td></tr></tbody></table></figure><p>在这里我默认大家都已经安装好了scrapy，<a href="https://www.osgeo.cn/scrapy/intro/install.html#intro-install" target="_blank" rel="noopener">传送门</a></p><p>不知道大家会遇到什么麻烦，博主只用了这一句代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Scrapy</span><br></pre></td></tr></tbody></table></figure><h2 id="三、基础准备"><a href="#三、基础准备" class="headerlink" title="三、基础准备"></a>三、基础准备</h2><h3 id="Scrapy简介（大牛的文章）"><a href="#Scrapy简介（大牛的文章）" class="headerlink" title="Scrapy简介（大牛的文章）"></a>Scrapy简介（<a href="https://blog.csdn.net/c406495762/article/details/72858983" target="_blank" rel="noopener">大牛的文章</a>）</h3><pre><code>  Scrapy Engine(Scrapy核心) 负责数据流在各个组件之间的流。Spiders(爬虫)发出Requests请求，经由Scrapy Engine(Scrapy核心) 交给Scheduler(调度器)，Downloader(下载器)Scheduler(调度器) 获得Requests请求，然后根据Requests请求，从网络下载数据。Downloader(下载器)的Responses响应再传递给Spiders进行分析。根据需求提取出Items，交给Item Pipeline进行下载。Spiders和Item Pipeline是需要用户根据响应的需求进行编写的。除此之外，还有两个中间件，Downloaders Mddlewares和Spider Middlewares，这两个中间件为用户提供方面，通过插入自定义代码扩展Scrapy的功能，例如去重等。</code></pre><p><img data-src="https://s1.ax1x.com/2020/04/02/GGY3Ct.png" alt="Scrapy"></p><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>注意！这篇文章并不是official文章，一切还以<a href="https://www.osgeo.cn/scrapy/intro/tutorial.html" target="_blank" rel="noopener">官方教程</a>为准。这里只讲本次操作用到的知识。</p><ul><li>创建一个Scrapy项目；</li><li>定义提取的Item；</li><li>编写爬取网站的 spider 并提取 Item；</li><li>利用python自带的request库莱下载漫画</li></ul><h2 id="四、第二次准备"><a href="#四、第二次准备" class="headerlink" title="四、第二次准备"></a>四、第二次准备</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject Titan</span><br></pre></td></tr></tbody></table></figure><p>然后我们可以观察项目内涉及的文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">|____Titan</span><br><span class="line">| |____.DS_Store</span><br><span class="line">| |____scrapy.cfg</span><br><span class="line">| |____Titan</span><br><span class="line">| | |____.DS_Store</span><br><span class="line">| | |____spiders</span><br><span class="line">| | | |____titan_spider.py</span><br><span class="line">| | | |______init__.py</span><br><span class="line">| | | |______pycache__</span><br><span class="line">| | | | |______init__.cpython-38.pyc</span><br><span class="line">| | | | |____titan_spider.cpython-38.pyc</span><br><span class="line">| | | | |____titan_spider.cpython-37.pyc</span><br><span class="line">| | | | |______init__.cpython-37.pyc</span><br><span class="line">| | |______init__.py</span><br><span class="line">| | |______pycache__</span><br><span class="line">| | | |______init__.cpython-38.pyc</span><br><span class="line">| | | |____settings.cpython-38.pyc</span><br><span class="line">| | | |____settings.cpython-37.pyc</span><br><span class="line">| | | |______init__.cpython-37.pyc</span><br><span class="line">| | |____middlewares.py</span><br><span class="line">| | |____settings.py</span><br><span class="line">| | |____items.py</span><br><span class="line">| | |____pipelines.py</span><br></pre></td></tr></tbody></table></figure><p>大部分都没啥用，重点是我们要在spider里面添加一个自己编写的python文件，可以是任意名字，像我就叫他巨人蜘蛛</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titan_spider.py</span><br></pre></td></tr></tbody></table></figure><h3 id="创建spider类"><a href="#创建spider类" class="headerlink" title="创建spider类"></a>创建spider类</h3><p>创建一个用来实现具体爬取功能的类，我们所有的处理实现都会在这个类中进行，它必须为 <code>scrapy.Spider</code> 的子类。</p><p>在 <code>Titan/spiders</code> 文件路径下创建 <code>titan_spider.py</code> 文件。在里面就开始我们蜘蛛（<del>只猪</del>）的初始化</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#上面code是为了让其支持中文</span></span><br><span class="line"><span class="keyword">import</span> scrapy<span class="comment">#scrapy本尊</span></span><br><span class="line"><span class="keyword">import</span> re<span class="comment">#保存文件的library</span></span><br><span class="line"><span class="keyword">import</span> time<span class="comment">#设置延时</span></span><br><span class="line"><span class="keyword">import</span> requests<span class="comment">#从网络下载图片</span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitanSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">name = <span class="string">"titan"</span><span class="comment">#定义spider的名字</span></span><br><span class="line">start_urls = [<span class="string">'https://manhua.fzdm.com/132/'</span>]<span class="comment">#起始页面</span></span><br><span class="line">allowed_domains = [<span class="string">'https://manhua.fzdm.com'</span>,<span class="string">'http://p2.manhuapan.com/'</span>]<span class="comment">#允许范围</span></span><br><span class="line">  <span class="comment">#上面的名字都是official的名字千万别改</span></span><br></pre></td></tr></tbody></table></figure><h3 id="shell分析"><a href="#shell分析" class="headerlink" title="shell分析"></a>shell分析</h3><p>在command line里面输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell 'https://manhua.fzdm.com/39'</span><br></pre></td></tr></tbody></table></figure><p>然后你会得到这一堆东西（别🐦它）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">2020-02-23 20:14:47 [scrapy.utils.log] INFO: Scrapy 1.8.0 started (bot: scrapybot)</span><br><span class="line">2020-02-23 20:14:47 [scrapy.utils.log] INFO: Versions: lxml 4.4.2.0, libxml2 2.9.4, cssselect 1.1.0, parsel 1.5.2, w3lib 1.21.0, Twisted 19.10.0, Python 3.8.1 (v3.8.1:1b293b6006, Dec 18 2019, 14:08:53) - [Clang 6.0 (clang-600.0.57)], pyOpenSSL 19.1.0 (OpenSSL 1.1.1d  10 Sep 2019), cryptography 2.8, Platform macOS-10.14.6-x86_64-i386-64bit</span><br><span class="line">2020-02-23 20:14:47 [scrapy.crawler] INFO: Overridden settings: {'DUPEFILTER_CLASS': 'scrapy.dupefilters.BaseDupeFilter', 'LOGSTATS_INTERVAL': 0}</span><br><span class="line">2020-02-23 20:14:47 [scrapy.extensions.telnet] INFO: Telnet Password: e3528447494d6c3d</span><br><span class="line">2020-02-23 20:14:47 [scrapy.middleware] INFO: Enabled extensions:</span><br><span class="line">...中间省略...</span><br><span class="line">[s] Available Scrapy objects:</span><br><span class="line">[s]   scrapy     scrapy module (contains scrapy.Request, scrapy.Selector, etc)</span><br><span class="line">[s]   crawler    <scrapy.crawler.Crawler object at 0x10d0cd760></span><br><span class="line">[s]   item       {}</span><br><span class="line">[s]   request    <GET https://manhua.fzdm.com/39></span><br><span class="line">[s]   response   <200 https://manhua.fzdm.com/39//></span><br><span class="line">[s]   settings   <scrapy.settings.Settings object at 0x10d0cd460></span><br><span class="line">[s]   spider     <DefaultSpider 'default' at 0x10d573400></span><br><span class="line">[s] Useful shortcuts:</span><br><span class="line">[s]   fetch(url[, redirect=True]) Fetch URL and update local objects (by default, redirects are followed)</span><br><span class="line">[s]   fetch(req)                  Fetch a scrapy.Request and update local objects </span><br><span class="line">[s]   shelp()           Shell help (print this help)</span><br><span class="line">[s]   view(response)    View response in a browser</span><br><span class="line">>>></span><br></pre></td></tr></tbody></table></figure><p>然后我们就要使用xpath或者是css去寻找指定的页面内容（<del>奥利给干它</del>）</p><p>博主也学习了一些时间，建议各位去康康这个<a href="https://www.jianshu.com/p/489c5d21cdc7" target="_blank" rel="noopener">教程</a>(<del>求作者给广告费恰饭</del>)</p><p>理清思路，现在我们要找到各话的url，通过观察发现这些url都在<a>标签下</a></p><a><p>观察方法：鼠标右键然后点击inspect，再点一下左上角的选择器就可以查看页面元素的所在位置了</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGNf91.png" alt="Inspect"></p><p>于是输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.xpath('//li/a[1]/@href').extract()</span><br></pre></td></tr></tbody></table></figure><p>获取到所有符合这种特征的herf</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">>>> response.xpath('//li/a[1]/@href').extract()</span><br><span class="line">['//www.fzdm.com', '//news.fzdm.com', '//manhua.fzdm.com', '126/', '125/', '124/', '123/', '122/', '121/', '120/', '119/', '118/', '117/', '116/', 'qc65/', '115/', 'qc64/', '114/', 'qc63/', '113/', 'qc62/', '112/', '前传61/', '111/', '前传60/', '110/', '前传59/', '109/', '108/', '前传57/', '107/', '前传56/', '106/', '前传55/', '105/', '前传54/', '104/', '103/', '102/', 'qz51/', '101/', '100/', 'qz49/', '99/', 'qz48/', '98/', 'qz47/', '97/', 'thf46/', '096/', 'wp45/', '95/', 'qz44/', '94/', 'qz43/', '93/', 'qz42/', '92/', 'qz41/', '91/', 'qz40/', 'qz40/', 'qz39/', 'qz38/', '90/', '89/', '88/', 'qz37/', '87/', ' before-the-fall-36/', '86/', '85/', '84/', '83/', '82/', '81/', '80/', '079/', '078/', '77/', '76/', '75/', 'd74/', '73/', '72/', '71/', '70/', '69/', 'd68/', '67/', '66/', 'dxj52/', '65/', '64/', '63/', '62/', '61/', '60/', '59/', 'wc08/', '58/', 'wc07/', 'qc07/', '57/', 'wc06/', '56/', 'qc06/', '55/', '54/', 'wc04/', '53/', 'wc02/', '52/', 'wc01/', '51/', '50/', 'wc00/', '49/', 'xz/', 'qc01/', '48/', 'fwp/', '47/', 'sgp/', '46/', '45/', '44/', 'fwp02/', 'fwp01/', '043/', '042/', '041/', '040/', '039/', '038/', '037/', '036/', '035/', '034/', '033/', '032/', '031/', '030/', '029/', '028/', '027/', '026/', '025/', '024/', '023/', '022/', '021/', '020/', '019/', '018/', '017/', '016/', '015/', '014/', '013/', '012/', '011/', '010/', '009/', '008/', '007/', '006/', '005/', '004/', '003/', '002/', '001/']</span><br></pre></td></tr></tbody></table></figure><p>我们发现又有几个浑水<strong>摸鱼</strong>的url混了进来，不过咱们先把这个放在一边，等会在python里面用字符串操作把它们给筛掉（<del>博主不会一步找到正确url的方法qaq</del>），如果有更好的方法请大神指出（带我带我！）</p><p> 使用ctrl+d退出之前的shell，分析章节页面。这次我们需要找到图片的url以及下一页的url</p></a><h3 id="再次分析"><a></a><a href="#再次分析" class="headerlink" title="再次分析"></a>再次分析</h3><p><img data-src="https://raw.githubusercontent.com/MaverickTang/Images/master/%E7%88%AC%E5%8F%96%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%E6%BC%AB%E7%94%BB/Inspect2.png" alt="Inspect"></p><p>手动@风车动漫的广告商到我这里来把广告费结一下，【手动狗头】</p><p>这次我们找一下下一页的url（这个网站他图片的url放的比较日怪）</p><p>在command line里面输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell 'https://manhua.fzdm.com/39//126/'</span><br></pre></td></tr></tbody></table></figure><p>然后我们需要再次找到 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><a href="index_0.html" class="pure-button button-success">第1页</a></span><br></pre></td></tr></tbody></table></figure><p>然后老套路</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">>>> response.xpath('//a[contains(@href, "index")]/@href').extract()</span><br><span class="line">['index_0.html', 'index_1.html', 'index_2.html', 'index_3.html', 'index_4.html', 'index_5.html', 'index_6.html', 'index_1.html']</span><br></pre></td></tr></tbody></table></figure><p>我们知道最后一个url就是咱们的next page了</p><p><strong>但是！！！</strong></p><p>我们这么才能知道这一章什么时候结束呢？</p><p><img data-src="https://raw.githubusercontent.com/MaverickTang/Images/master/%E7%88%AC%E5%8F%96%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%E6%BC%AB%E7%94%BB/Inspect3.png" alt="Inspect"></p><p>这是我们的最后一页的代码，看起来从url上一点头绪都没有，但是从旁边的文字上我们又有了新的线索，一般它会给出如：下一页这样的信息，最后一页则没有这样的信息，只要我们知道是否有“下一页”，我们就能知道是否为最后一页</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGN2N9.png" alt="Inspect"></p><p>所以要获取上面的文字，使用如下方法：</p><p>请看第一页与最后一页的对比</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">>>> response.xpath('//a[contains(@href, "index")]/text()').extract()</span><br><span class="line">['第1页', '2', '3', '4', '5', '6', '7', '下一页']</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">>>> response.xpath('//a[contains(@href, "index")]/text()').extract()</span><br><span class="line">['上一页', '40', '41', '42', '43', '44', '第45页']</span><br></pre></td></tr></tbody></table></figure><p>然后既然我们已经知道了判断下一页的方法，接下来就是获取图片链接了</p><h3 id="获取图片链接"><a href="#获取图片链接" class="headerlink" title="获取图片链接"></a>获取图片链接</h3><p><img data-src="https://raw.githubusercontent.com/MaverickTang/Images/master/%E7%88%AC%E5%8F%96%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%E6%BC%AB%E7%94%BB/pic.png" alt="Inspect"></p><p>再次选择我们找到了图片的url</p><p><strong>但是</strong>。。。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">>>> response.xpath('//img/@src').extract()</span><br><span class="line">['https://static.fzdm.com/css/logo.png', 'https://cdn.jsdelivr.net/gh/fzdm/st@75839ec8feb53ac89fe52134fc648a17bd1bd31f/img/loading.gif']</span><br></pre></td></tr></tbody></table></figure><p>woc居然找不到图片的url？？？</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGNsnU.jpg" alt="Inspect"></p><p>于是康康这个蜘蛛获取到的整个html代码</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">>>> response.body</span><br><span class="line">b'<!DOCTYPE html><html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><meta http-equiv="Content-Language" content="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1"><meta http-equiv="x-dns-prefetch-control" content="on"><link rel="dns-prefetch" href="//www.fzdm.com"><link rel="dns-prefetch" href="//manhua.fzdm.com"><link rel="dns-prefetch" href="//p1.manhuapan.com"><link rel="dns-prefetch" href="//p2.manhuapan.com"><link rel="dns-prefetch" href="//p5.manhuapan.com"><link rel="dns-prefetch" href="//p17.manhuapan.com"><meta content="all" name="robots"><title>\xe8\xbf\x9b\xe5\x87\xbb\xe7\x9a\x84\xe5\xb7\xa8\xe4\xba\xba126\xe8\xaf\x9d </span><br><span class="line">……以下省略</span><br></pre></td></tr></tbody></table></figure><p>我们复制之后打开任意代码编译器然后<code>Command+f</code>寻找这个“2020/02/08055441539556.jpg”url在哪里。</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGN7He.png" alt="Inspect"></p><p>我们发现这个url放在javascript里面，使用<code>document.write()</code>。。。</p><p>你以为我有什么骚操作？？？</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGUpDS.gif" alt="Inspect"></p><p>我还真没有。。。</p><p>找到script</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">>>> response.xpath('//script/text()').extract()</span><br><span class="line">["if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register('/sw.js', { scope: '/' }).then(function (registration) {\n        // registration.unregister().then(function(boolean) {\n        // if boolean = true, unregister is successful\n        // });\n        // 注册成功\n        /*\n      var serviceWorker;\n      if (registration.installing) {\n        console.log('installing');\n      } else if (registration.waiting) {\n        console.log('waiting');\n      } else if (registration.active) {\n        console.log('active');\n      }\n      */\n        console.log('ServiceWorker registration successful with scope: ', registration.scope);\n      }).catch(function (err) {\n        // 注册失败 :(\n        console.log('ServiceWorker registration failed: ', err);\n        let refreshing = false\n        navigator.serviceWorker.addEventListener('controllerchange', () => {\n          if (refreshing) {\n            return\n</span><br><span class="line">……以下省略</span><br></pre></td></tr></tbody></table></figure><p>于是我们获得了一个很大的array which有我们需要的url</p><p>博主是个铁憨憨，强行用python的正则表达式找到了这个url</p><p>正则表达式不会的可以走<a href="https://www.runoob.com/python/python-reg-expressions.html" target="_blank" rel="noopener">这里</a></p><p>在编程的时候，我们就先记录下这些script，然后再继续操作</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pre_img_url = response.xpath(<span class="string">'//script/text()'</span>).extract()<span class="comment">#记录script</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(pre_img_url)):<span class="comment">#记录的时候是以array存储的</span></span><br><span class="line">matchObj = re.search( <span class="string">r'url=\"()\s*(.*)jpg'</span>, pre_img_url[i], re.M|re.I)<span class="comment">#正则表达式寻找</span></span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">ppreimgurl = matchObj.group()<span class="comment">#里面就包含了我们要找的url（本例是“2020/02/08055441539556.jpg”）</span></span><br><span class="line">img_url= <span class="string">'http://p2.manhuapan.com/'</span> + ppreimgurl[<span class="number">5</span>:len(ppreimgurl)]<span class="comment">#在前面加上存储图片的网址</span></span><br></pre></td></tr></tbody></table></figure><h2 id="五、开始编写"><a href="#五、开始编写" class="headerlink" title="五、开始编写"></a>五、开始编写</h2><p>还记得我们最开始的<code>parse()</code>吗？我们现在给他添加一点东西</p><p>解释都在代码里面</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">link_urls = response.xpath(<span class="string">'//li/a[1]/@href'</span>).extract()<span class="comment">#找到各话的url</span></span><br><span class="line">names = response.xpath(<span class="string">'//li/a[1]/@title'</span>).extract()<span class="comment">#找到各话的名字，方便命名文件夹</span></span><br><span class="line">    <span class="comment"># 下面的variable可以不管</span></span><br><span class="line">x=<span class="number">-1</span></span><br><span class="line">h=<span class="number">0</span></span><br><span class="line">comics_url_list = []</span><br><span class="line">rnames = []</span><br><span class="line">base = <span class="string">'https://manhua.fzdm.com/132/'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(link_urls)):</span><br><span class="line">h=bool(re.search(<span class="string">r'\d'</span>, link_urls[i]))</span><br><span class="line"><span class="keyword">if</span>(h==<span class="literal">True</span>):</span><br><span class="line">x=x+<span class="number">1</span></span><br><span class="line">name=names[x]</span><br><span class="line">url=base + link_urls[i]<span class="comment">#它的url只有base后面的部分，所以要把base加上</span></span><br><span class="line">rnames.append(name)<span class="comment">#将各话的名字加入一个新的array</span></span><br><span class="line">comics_url_list.append(url)<span class="comment">#将url加入array</span></span><br><span class="line"><span class="comment">#print("%s :https://www.manhuadui.com %s"%(names[4+x],link_urls[i]))</span></span><br><span class="line"><span class="comment">#print("%s : %s"%(rnames[x],comics_url_list[x]))</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n>>>>>>>>>>>>>>>>>>> current page comics list <<<<<<<<<<<<<<<<<<<<'</span>)</span><br><span class="line">print(comics_url_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> comics_url_list:</span><br><span class="line"><span class="keyword">yield</span> scrapy.Request(url=url, callback=self.comics_parse, dont_filter=<span class="literal">True</span>)<span class="comment">#通过特殊的scrapy传递将url传到下一个函数对下一层网页进行爬取</span></span><br><span class="line">      <span class="comment">#一定要加入dont_filter=True，不然会出bug（不进入下个函数）</span></span><br><span class="line">print(<span class="string">'>>>>>>>>  parse comics:'</span> + url)</span><br></pre></td></tr></tbody></table></figure><p>接下来我们编写<code>comics_parse(self, response)</code>函数来处理各话的url</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comics_parse</span><span class="params">(self, response)</span>:</span><span class="comment">#另一个函数爬取下层页面</span></span><br><span class="line">pre_img_url = response.xpath(<span class="string">'//script/text()'</span>).extract()<span class="comment">#获取script</span></span><br><span class="line">img_url = <span class="string">''</span></span><br><span class="line">ptitle=response.xpath(<span class="string">'//title/text()'</span>).extract()<span class="comment">#获取章节名称</span></span><br><span class="line">prepage_num=response.xpath(<span class="string">'//a[contains(@href, "index")]/text()'</span>).extract()<span class="comment">#获取页面名字</span></span><br><span class="line">page_num=<span class="string">''</span></span><br><span class="line">a=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,len(prepage_num)):<span class="comment">#寻找page number来作为文件名</span></span><br><span class="line"><span class="keyword">for</span> _char <span class="keyword">in</span> prepage_num[j]:<span class="comment">#判断中文字符来找到当前页码（它会是“第n页”）</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'\u4e00'</span> <= _char <= <span class="string">'\u9fa5'</span>:</span><br><span class="line">page_num=prepage_num[j]</span><br><span class="line"><span class="keyword">if</span> page_num == <span class="string">'下一页'</span>:<span class="comment">#如果是‘下一页’叫表示它漏过了‘第一页’</span></span><br><span class="line">page_num=<span class="string">'第1页'</span></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">1</span>):</span><br><span class="line"><span class="keyword">break</span> </span><br><span class="line">t=ptitle[<span class="number">0</span>]</span><br><span class="line">index=ptitle[<span class="number">0</span>].find(<span class="string">'话'</span>)<span class="comment">#通过找到‘话’来找到章节的名字</span></span><br><span class="line">title=t[<span class="number">0</span>:(index+<span class="number">1</span>)]<span class="comment">#截取章节名字</span></span><br><span class="line"><span class="comment">#matchObj = re.search( r'url=\"()\s*(.*)jpg', line, re.M|re.I)</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(pre_img_url)):<span class="comment">#记录的时候是以array存储的      </span></span><br><span class="line">   matchObj = re.search( <span class="string">r'url=\"()\s*(.*)jpg'</span>, pre_img_url[i], re.M|re.I)<span class="comment">#正则表达式寻找      </span></span><br><span class="line">    <span class="keyword">if</span> matchObj:        </span><br><span class="line">      ppreimgurl = matchObj.group()<span class="comment">#里面就包含了我们要找的url（本例是“2020/02/08055441539556.jpg”）        img_url= 'http://p2.manhuapan.com/' + ppreimgurl[5:len(ppreimgurl)]#在前面加上存储图片的网址</span></span><br><span class="line">self.log(<span class="string">'>>>>>>>>>>>开始下载<<<<<<<<<<<<<'</span>)</span><br><span class="line"><span class="comment">#self.save_img(page_num[len(page_num)], title, img_url)</span></span><br><span class="line">document = <span class="string">'/Users/maverick/Desktop/test/One punch'</span></span><br><span class="line">comics_path = document + <span class="string">'/'</span> + title</span><br><span class="line">exists = os.path.exists(comics_path)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> exists:<span class="comment">#如果没有创建过文件夹</span></span><br><span class="line"><span class="comment">#self.log('create document: ' + title)</span></span><br><span class="line">os.makedirs(comics_path)</span><br><span class="line">pic_name = comics_path + <span class="string">'/'</span> + page_num + <span class="string">'.jpg'</span></span><br><span class="line">exists = os.path.exists(pic_name)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> exists:</span><br><span class="line">time.sleep(<span class="number">0.1</span>)<span class="comment">#延时防止锁ip</span></span><br><span class="line">urlretrieve(img_url, pic_name)<span class="comment">#下载图片</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">pages_urls = response.xpath(<span class="string">'//a[contains(@href, "index")]/@href'</span>).extract()<span class="comment">#找到下一页的url</span></span><br><span class="line">page_situation = response.xpath(<span class="string">'//a[contains(@href, "index")]/text()'</span>).extract()<span class="comment">#与是否为最后一页有关</span></span><br><span class="line">ans=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _char <span class="keyword">in</span> page_situation[len(page_situation)<span class="number">-1</span>]:<span class="comment">#还是通过中文来判断是否为最后一页</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="string">'\u4e00'</span> <= _char <= <span class="string">'\u9fa5'</span>:</span><br><span class="line">ans=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">0</span>):</span><br><span class="line">premyfront = response.request.url<span class="comment">#找到当前页面的url，再通过字符串操作得到基础页</span></span><br><span class="line">fenge = premyfront.split(<span class="string">'/'</span>)</span><br><span class="line">myfont=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">myfont=myfont+fenge[i]+<span class="string">'/'</span></span><br><span class="line">next_page = myfont+pages_urls[len(pages_urls)<span class="number">-1</span>]<span class="comment">#得到下一页</span></span><br><span class="line">self.log(next_page)</span><br><span class="line"><span class="keyword">yield</span> scrapy.Request(next_page, callback=self.comics_parse, dont_filter=<span class="literal">True</span>)<span class="comment">#递归自己</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self.log(<span class="string">'parse comics:'</span> + title + <span class="string">'finished.'</span>)</span><br></pre></td></tr></tbody></table></figure><p>然后我们就可以欣赏它爬取的漫画了。因为整个网站的机制是一样的，所以我们只需要修改url地址，就可以任意爬取自己想看的漫画了。</p><h2 id="五、后记"><a href="#五、后记" class="headerlink" title="五、后记"></a>五、后记</h2><p>如果是自己想用的话，代码已经在<a href="https://github.com/MaverickTang/Attack-on-titan-download">GitHub</a>上面了，下载下来就可以直接用。</p><p>不仅是巨人，这个爬虫还可以爬取整个网站上的其他漫画，比如：</p><p>一拳超人，火影忍者，海贼王,鬼灭之刃等。</p><p>请求星星✨</p><p>使用terminalcd到根目录然后运行以下代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl titan</span><br></pre></td></tr></tbody></table></figure><p>记得把保存的本机地址还有想爬取的漫画地址改一下</p><p>当然只要编程的速度够快，这种下载速度绝对比某网盘快得多，最关键的是方便并且可以装B。。。</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGNvgP.gif" alt="Inspect"></p><p>放上自己爬到的兵长帅照哈哈哈哈哈</p><p><img data-src="https://s1.ax1x.com/2020/04/02/GGNX9I.jpg" alt="Inspect"></p><h2 id="六、参考链接及版权说明"><a href="#六、参考链接及版权说明" class="headerlink" title="六、参考链接及版权说明"></a>六、参考链接及版权说明</h2><p>博主是第一次写博客，如果侵权请联系我删除，还有对两个大佬写的博客表示诚挚感谢，链接第一与第二个为两个大佬的博客。</p><p>参考链接：</p><p>1(合法).<a href="https://blog.csdn.net/c406495762/article/details/72858983" target="_blank" rel="noopener">https://blog.csdn.net/c406495762/article/details/72858983</a></p><p>2(非法).<a href="https://moshuqi.github.io/2016/09/27/Python爬虫-Scrapy框架/" target="_blank" rel="noopener">https://moshuqi.github.io/2016/09/27/Python%E7%88%AC%E8%99%AB-Scrapy%E6%A1%86%E6%9E%B6/</a></p><p>3(正则表达式).<a href="https://www.runoob.com/python/python-reg-expressions.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-reg-expressions.html</a></p><p>4(xpath与css学习).<a href="https://www.jianshu.com/p/489c5d21cdc7" target="_blank" rel="noopener">https://www.jianshu.com/p/489c5d21cdc7</a></p><p>5(下载图片方法).<a href="https://morvanzhou.github.io/tutorials/data-manipulation/scraping/3-02-download/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/data-manipulation/scraping/3-02-download/</a></p><p>6(进击的巨人在线观看).<a href="https://manhua.fzdm.com/39/" target="_blank" rel="noopener">https://manhua.fzdm.com/39/</a></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Scrapy爬取进击的巨人漫画&quot;&gt;&lt;a href=&quot;#使用Scrapy爬取进击的巨人漫画&quot; class=&quot;headerlink&quot; title=&quot;使用Scrapy爬取进击的巨人漫画&quot;&gt;&lt;/a&gt;使用Scrapy爬取进击的巨人漫画&lt;/h1&gt;&lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;​        自己看到网上有两个大牛分别爬取了&lt;strong&gt;合法&lt;/strong&gt;(Naruto)与&lt;strong&gt;非法&lt;/strong&gt;(&lt;del&gt;你懂的&lt;/del&gt;)的漫画，十分感叹，便也想借鉴借鉴，结果大牛的的代码在博主的电脑上运行不了(&lt;del&gt;丧尽天良&lt;/del&gt;),所以就只有自己写了一个算是结合版的代码，爬取了这个&lt;a href=&quot;https://www.fzdm.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网站&lt;/a&gt;。在此分享给大家，授人以both🐟。&lt;/p&gt;
&lt;p&gt;​        代码已经挂在GitHub上面了，想下漫画的可以滑到最下面观看下载方法，这个方法不仅可以下载进击的巨人，整个网站的漫画都可以爬，建议大家别乱改我设置的延迟，爬的太快了可能会被网站锁IP。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/MaverickTang/Zh-Blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://github.com/MaverickTang/Zh-Blog/tags/Python/"/>
    
  </entry>
  
</feed>
