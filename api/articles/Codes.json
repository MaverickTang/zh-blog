{"title":"代码集","slug":"Codes","date":"2020-03-30T02:35:14.000Z","updated":"2021-02-08T00:01:19.290Z","comments":true,"path":"api/articles/Codes.json","excerpt":"简介博主我隔离期间实在无聊于是无聊到整理代码模版从入门到放弃","covers":["https://i.loli.net/2020/04/02/q8CSv6jAZefsXaE.png","https://i.loli.net/2020/04/02/9opqN7LVQXCaEPz.png","https://i.loli.net/2020/04/02/LiM8J95WDxcpCd6.png"],"content":"<html><head></head><body><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>博主我隔离期间实在无聊于是无聊到整理代码模版</p>\n<p>从入门到放弃</p>\n<a id=\"more\"></a>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"输入类\"><a href=\"#输入类\" class=\"headerlink\" title=\"输入类\"></a>输入类</h3><p>读入优化</p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rd</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c><span class=\"string\">'9'</span>||c<<span class=\"string\">'0'</span>){</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\tc=getchar();</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c>=<span class=\"string\">'0'</span>&&c<=<span class=\"string\">'9'</span>){</span><br><span class=\"line\">\t\tx=x*<span class=\"number\">10</span>+c-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t\tc=getchar();</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"高精度\"><a href=\"#高精度\" class=\"headerlink\" title=\"高精度\"></a>高精度</h3><p>高精度真的是mol鬼，到现在听到要打高精度觉得自己还是打不出来</p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bign</span> {</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len, s[mx];<span class=\"comment\">//高精度长度和存放数值</span></span><br><span class=\"line\">\tbign() { <span class=\"built_in\">memset</span>(s,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(s)),len=<span class=\"number\">1</span>;} <span class=\"comment\">//构造函数初始化</span></span><br><span class=\"line\">\tbign (<span class=\"keyword\">int</span> num) { *<span class=\"keyword\">this</span> = num; }<span class=\"comment\">//低精度赋值</span></span><br><span class=\"line\">\tbign (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *num) { *<span class=\"keyword\">this</span> = num; } <span class=\"comment\">//字符串赋值</span></span><br><span class=\"line\">\tbign <span class=\"keyword\">operator</span> = (<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> num) {<span class=\"comment\">//低精度转换成高精度</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> st[mx]; <span class=\"built_in\">sprintf</span>(st,<span class=\"string\">\"%d\"</span>,num);\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>=st;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\tbign <span class=\"keyword\">operator</span> = (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *num) {<span class=\"comment\">//将字符串转成高精度值</span></span><br><span class=\"line\">\t\tlen=<span class=\"built_in\">strlen</span>(num);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i<len; i++) s[i]=num[len-i<span class=\"number\">-1</span>]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clean</span><span class=\"params\">()</span> </span>{<span class=\"comment\">//清除高位 0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(len><span class=\"number\">1</span> && s[len<span class=\"number\">-1</span>]==<span class=\"number\">0</span>) len--;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\tbign <span class=\"keyword\">operator</span> + (<span class=\"keyword\">const</span> bign &b) { <span class=\"comment\">//重载运算符 +</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> l=<span class=\"built_in\">max</span>(len,b.len),i;</span><br><span class=\"line\">\t\tbign c;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i<l; i++) {</span><br><span class=\"line\">\t\t\tc.s[i]+=(s[i]+b.s[i]);<span class=\"comment\">//当前位</span></span><br><span class=\"line\">\t\t\tc.s[i+<span class=\"number\">1</span>]+=c.s[i]/<span class=\"number\">10</span>;<span class=\"comment\">//进位位</span></span><br><span class=\"line\">\t\t\tc.s[i]%=<span class=\"number\">10</span>;<span class=\"comment\">//调整本位</span></span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\tc.len=l+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tc.clean();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\tbign <span class=\"keyword\">operator</span> - (<span class=\"keyword\">const</span> bign &x) {<span class=\"comment\">//重载运算符-</span></span><br><span class=\"line\">\t\tbign c=*<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i<len; i++) {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(x.s[i]>c.s[i]) {</span><br><span class=\"line\">\t\t\t\tc.s[i+<span class=\"number\">1</span>]--;<span class=\"comment\">//从前借一位</span></span><br><span class=\"line\">\t\t\t\tc.s[i]+=<span class=\"number\">10</span>;<span class=\"comment\">//当前位加10</span></span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t\tc.s[i]-=x.s[i];<span class=\"comment\">//直接减</span></span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\tc.clean();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\tbign <span class=\"keyword\">operator</span> * (<span class=\"keyword\">const</span> bign &b) {<span class=\"comment\">//重载运算符*</span></span><br><span class=\"line\">\t\tbign c;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i<len; i++) {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j<b.len; j++) {</span><br><span class=\"line\">\t\t\t\tc.s[i+j]+=s[i]*b.s[j];<span class=\"comment\">//本位</span></span><br><span class=\"line\">\t\t\t\tc.s[i+j+<span class=\"number\">1</span>]+=c.s[i+j]/<span class=\"number\">10</span>;<span class=\"comment\">//进位</span></span><br><span class=\"line\">\t\t\t\tc.s[i+j]%=<span class=\"number\">10</span>;<span class=\"comment\">//调整本位</span></span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\tc.len=len+b.len+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tc.clean();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\tbign <span class=\"keyword\">operator</span> / (<span class=\"keyword\">const</span> bign &b) {</span><br><span class=\"line\">        bign c, f = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = len - <span class=\"number\">1</span>; i >= <span class=\"number\">0</span>; i--) {</span><br><span class=\"line\">            f =f*<span class=\"number\">10</span>;</span><br><span class=\"line\">            f.s[<span class=\"number\">0</span>] = s[i];</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(f >= b) {</span><br><span class=\"line\">                f =f- b;</span><br><span class=\"line\">                c.s[i]++;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        c.len = len;</span><br><span class=\"line\">        c.clean();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> > (<span class=\"keyword\">const</span> bign &b) {<span class=\"comment\">//重载运算符 ></span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(len!=b.len) <span class=\"keyword\">return</span> len>b.len;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=len<span class=\"number\">-1</span>; i>=<span class=\"number\">0</span>; i--) { <span class=\"comment\">//从高位开始对比</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(s[i]!=b.s[i]) <span class=\"keyword\">return</span> s[i]>b.s[i];</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> < (<span class=\"keyword\">const</span> bign &b) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(len!=b.len) <span class=\"keyword\">return</span> len<b.len;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=len<span class=\"number\">-1</span>; i>=<span class=\"number\">0</span>; i--) {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(s[i]!=b.s[i]) <span class=\"keyword\">return</span> s[i]<b.s[i];</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (<span class=\"keyword\">const</span> bign &b) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> !(*<span class=\"keyword\">this</span>>b) && !(*<span class=\"keyword\">this</span><b);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> >= (<span class=\"keyword\">const</span> bign &b) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>>b || *<span class=\"keyword\">this</span>==b;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">str</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>{<span class=\"comment\">//将高度精值转换成字符</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> re=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i<len; i++) re=(<span class=\"keyword\">char</span>)(s[i]+<span class=\"string\">'0'</span>)+re;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> re;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">};</span><br><span class=\"line\">istream& <span class=\"keyword\">operator</span> >> (istream &in, bign &x) {<span class=\"comment\">//使高精度支持输入>></span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s;</span><br><span class=\"line\">\tin>>s;\tx=s.c_str(); <span class=\"keyword\">return</span> in;</span><br><span class=\"line\">}</span><br><span class=\"line\">ostream& <span class=\"keyword\">operator</span> << (ostream &out, <span class=\"keyword\">const</span> bign &x) {<span class=\"comment\">//使高精度支持输出</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=x.len<span class=\"number\">-1</span>; i>=<span class=\"number\">0</span>; i--) out<<x.s[i];</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><h4 id=\"真香排序\"><a href=\"#真香排序\" class=\"headerlink\" title=\"真香排序\"></a>真香排序</h4><p>不论会什么高级模版，总会想用它</p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>{</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a<b;<span class=\"comment\">//从低到高</span></span><br><span class=\"line\">}</span><br><span class=\"line\">sort(a,a+n+<span class=\"number\">1</span>,cmp);</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"桶排\"><a href=\"#桶排\" class=\"headerlink\" title=\"桶排\"></a>桶排</h4><p>简单来说就是记录后找下标</p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x,n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>>>n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">100</span>]= {<span class=\"number\">0</span>};</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i<n; i++) {</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>>>x;</span><br><span class=\"line\">\t\ta[x]++;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i<<span class=\"number\">100</span>; i++) </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m=<span class=\"number\">1</span>;m<=a[i];m++)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span><<i<<<span class=\"string\">\" \"</span>;</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><p>相邻元素若不按照顺序则替换</p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> n)</span></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j,t;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i<=n;i++){</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(j=i+<span class=\"number\">1</span>;j<=n;j++){</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(a[i]<a[j]){</span><br><span class=\"line\">             swap(a[i],a[j]);</span><br><span class=\"line\">          }</span><br><span class=\"line\">      }</span><br><span class=\"line\">   }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h4><p>递归拆分子序列</p>\n<p><img data-src=\"https://i.loli.net/2020/04/02/q8CSv6jAZefsXaE.png\" alt=\"image-20200329201857057.png\"></p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r , <span class=\"keyword\">int</span> *t)</span></span>{<span class=\"comment\">//要排序数组a,起始l，终止r，暂存空间t</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(r-l><span class=\"number\">1</span>){    </span><br><span class=\"line\">       <span class=\"keyword\">int</span> m=(l+r)>><span class=\"number\">1</span>;<span class=\"comment\">//中间进行划分</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> p=l, q=m, i= l;</span><br><span class=\"line\">   \t\t merge_sort(a,l,m,t);<span class=\"comment\">//划分</span></span><br><span class=\"line\">    \t merge_sort(a,m,r,t);<span class=\"comment\">//划分</span></span><br><span class=\"line\">       <span class=\"keyword\">while</span>(p<m ||q<r){         </span><br><span class=\"line\">         <span class=\"keyword\">if</span>(q>=r || (p<m && a[p]<a[q]))</span><br><span class=\"line\">              \tt[i++] = a[p++];</span><br><span class=\"line\">              <span class=\"comment\">//将左则暂存至临时空间         </span></span><br><span class=\"line\">         <span class=\"keyword\">else</span> </span><br><span class=\"line\">               t[i++] = a[q++];  </span><br><span class=\"line\">               <span class=\"comment\">//将右则暂存至临时空间\t</span></span><br><span class=\"line\">       }</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=l; i<r; i++)a[i]= t[i];</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><p>基本思想是通过一趟排序将待排记录分割成独立的两部分,其中一部分记录的均比另一部分小,则可分别对这两部分记录继续进行排序,以达到整个序列有序.</p>\n<p>假定待排序列为{r[s],r[s+1],…..r[t]},首先选取一个记录作为枢轴(pivot),然后按下述原则重新排列其余记录.</p>\n<p>将所有较它小的记录安置在它之前,将所有较它大的记录安置在它之后.由此可见此”枢轴”记录最后所落的位置I作分界线,将原序列分割成两个{r[s],r[s+1],…r[i-1]}和{r[i],r[i+1],…r[t]}.这个过程称做一趟快速排序(或一次划分).</p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">part</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> a[])</span> </span>{ </span><br><span class=\"line\">    <span class=\"keyword\">int</span> p=a[l];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(l<r) {<span class=\"comment\">//保证没有重叠</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(l<r && a[r]>=p) r--;</span><br><span class=\"line\">\t\ta[l]=a[r];<span class=\"comment\">//将右边不适宜的数字放到左边</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(l<r && a[l]<=p) l++;</span><br><span class=\"line\">\t\ta[r]=a[l];</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\ta[l]=p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> l;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">qsort</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> a[])</span> </span>{</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l<r) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> p=part(l,r,a);</span><br><span class=\"line\">\t\tqsort(l,p,a);</span><br><span class=\"line\">\t\tqsort(p+<span class=\"number\">1</span>,r,a);</span><br><span class=\"line\">\t} </span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p><img data-src=\"https://i.loli.net/2020/04/02/9opqN7LVQXCaEPz.png\" alt=\"排序对比\"></p>\n<h3 id=\"进制转换\"><a href=\"#进制转换\" class=\"headerlink\" title=\"进制转换\"></a>进制转换</h3><figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tenout</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> m)</span></span>{<span class=\"comment\">//十进制转任意进制</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x){a[++n]=x%m;x/=m;}</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n;i>=<span class=\"number\">1</span>;--i)</span><br><span class=\"line\">        (a[i]<<span class=\"number\">10</span>)?(<span class=\"built_in\">cout</span><<a[i]):(<span class=\"built_in\">cout</span><<<span class=\"keyword\">char</span>(a[i]+(<span class=\"string\">'A'</span><span class=\"number\">-10</span>)));<span class=\"comment\">//如果小于10就直接输出，else输出字母</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getten</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">char</span> s[])</span></span>{<span class=\"comment\">//任意进制转十进制</span></span><br><span class=\"line\">    ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i<<span class=\"built_in\">strlen</span>(s);i++) </span><br><span class=\"line\">        ans=ans*x+(<span class=\"built_in\">isdigit</span>(s[i])?(s[i]^<span class=\"string\">'0'</span>):(s[i]-<span class=\"string\">'A'</span>+<span class=\"number\">10</span>));</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"提高\"><a href=\"#提高\" class=\"headerlink\" title=\"提高\"></a>提高</h2><h3 id=\"图论\"><a href=\"#图论\" class=\"headerlink\" title=\"图论\"></a>图论</h3><h4 id=\"默认存储及加边\"><a href=\"#默认存储及加边\" class=\"headerlink\" title=\"默认存储及加边\"></a>默认存储及加边</h4><figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>{</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> dest;<span class=\"comment\">//destination</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> val;<span class=\"comment\">//edge's value</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> next;<span class=\"comment\">//next edge</span></span><br><span class=\"line\">  }eg[mx*<span class=\"number\">2</span>];<span class=\"comment\">//mx is the numer of the edges, if it is undirected you need to double</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;<span class=\"comment\">//nomber of point in the graph，number of edge in the graph </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> head[MAX]={<span class=\"number\">0</span>};<span class=\"comment\">//The head in the graph</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> top=<span class=\"number\">0</span>;<span class=\"comment\">//The exact number of the edeges</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> val)</span></span>{ </span><br><span class=\"line\">    eg[++top].dest=v;<span class=\"comment\">//v is the tail of the edge(destination)</span></span><br><span class=\"line\">    eg[top].val=val;<span class=\"comment\">//edge's value</span></span><br><span class=\"line\">    eg[top].next=head[u];<span class=\"comment\">//next edge's number</span></span><br><span class=\"line\">    head[u]=top;<span class=\"comment\">//Remeber this edge as another edge for the head u.</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h4><figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> vis[mx]={<span class=\"number\">0</span>};<span class=\"comment\">//To make sure you won't travel through the same edge over and over again</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>{</span><br><span class=\"line\">\tvis[s]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[s];i;i=eg[i].next){<span class=\"comment\">//travel</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!vis[eg[i].dest]){<span class=\"comment\">//haven't travel through</span></span><br><span class=\"line\">\t\t\tdfs(eg[i].dest);<span class=\"comment\">//Then travel</span></span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"BFS\"><a href=\"#BFS\" class=\"headerlink\" title=\"BFS\"></a>BFS</h4><figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\"><queue>//Import queue libaray</span></span></span><br><span class=\"line\"><span class=\"built_in\">queue</span><<span class=\"keyword\">int</span>>q;<span class=\"comment\">//Declare queue</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>{</span><br><span class=\"line\">\tq.push(s);vis[s]=<span class=\"number\">1</span>;<span class=\"comment\">//push s into the queue and vis</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!q.empty()){<span class=\"comment\">//As long as there is still elements in the queue</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> u=q.front();<span class=\"comment\">//Get the front of the queue</span></span><br><span class=\"line\">\t\tq.pop();<span class=\"comment\">//Get the front of the queue out</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[u];i;i=eg[i].next){<span class=\"comment\">//Same old story</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> v=eg[i].dest;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!vis[v]){</span><br><span class=\"line\">\t\t\t\tq.push(v),vis[v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"Dijkstra\"><a href=\"#Dijkstra\" class=\"headerlink\" title=\"Dijkstra\"></a>Dijkstra</h4><figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>{</span><span class=\"comment\">//Declare another struct to restore the information for the point</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> dis,pos;<span class=\"comment\">//pos means the number of the point</span></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> <( <span class=\"keyword\">const</span> node &x )<span class=\"keyword\">const</span>{<span class=\"comment\">//declare the operator '<' by our own function</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x.dis < dis;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">};</span><br><span class=\"line\"><span class=\"built_in\">std</span>::priority_queue<node> q;<span class=\"comment\">//priority queue</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[mx],vis[mx];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>{</span><br><span class=\"line\">\tdis[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tq.push((node){<span class=\"number\">0</span>,s});<span class=\"comment\">//push into queue as struct node</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!q.empty()){</span><br><span class=\"line\">\t\tnode tmp=q.top();q.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x=tmp.pos,d=tmp.dis;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!vis[x]){<span class=\"comment\">//Got to the tail, if we didn't visit it</span></span><br><span class=\"line\">\t\tvis[x]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[x];i;i=eg[i].next){</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> y=eg[i].dest;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(dis[y]>dis[x]+eg[i].val){</span><br><span class=\"line\">\t\t\t\tdis[y]=dis[x]+eg[i].val;<span class=\"comment\">//The core of the code, to replace for smaller</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!vis[y])<span class=\"comment\">//Got to the head, if we didn't visit it</span></span><br><span class=\"line\">\t\t\t\t\tq.push((node){dis[y],y});</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"Floyd\"><a href=\"#Floyd\" class=\"headerlink\" title=\"Floyd\"></a>Floyd</h4><figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">floyd</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k<=n;k++) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i<=n; i++) {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j<=n; j++) {</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(g[i][k]<inf&&g[k][j]<inf&&g[i][j]>g[i][k]+g[k][j])</span><br><span class=\"line\">\t\t\t\t\tg[i][j]=g[i][k]+g[k][j];</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"SPFA\"><a href=\"#SPFA\" class=\"headerlink\" title=\"SPFA\"></a>SPFA</h4><figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">spfa</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>{</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> u,v;    <span class=\"built_in\">memset</span>(dist,<span class=\"number\">0x3f</span>,<span class=\"keyword\">sizeof</span>(dist));<span class=\"comment\">//Initialize dist</span></span><br><span class=\"line\">\tdist[s]=<span class=\"number\">0</span>;<span class=\"comment\">//Get start point as 0</span></span><br><span class=\"line\">\tinque[s]=<span class=\"number\">1</span>;<span class=\"comment\">//Memorize the s is in the queue</span></span><br><span class=\"line\">\tq.push(s);<span class=\"comment\">//in queue</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!q.empty()){</span><br><span class=\"line\">\t\tu=q.front(), q.pop();  inque[u]=<span class=\"number\">0</span>;<span class=\"comment\">//Get the front of queue out</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[u]; i; i=eg[i].next){</span><br><span class=\"line\">\t\t\t  v=eg[i].dest;</span><br><span class=\"line\">\t\t\t  <span class=\"keyword\">if</span>(dist[v]>dist[u]+eg[i].val){<span class=\"comment\">//If find a route with smaller value</span></span><br><span class=\"line\">\t\t\t\t  dist[v]= dist[u]+eg[i].val;<span class=\"comment\">//change it </span></span><br><span class=\"line\">\t\t\t\t  fa[v]=u;<span class=\"comment\">//Memorize the tail of v</span></span><br><span class=\"line\">\t\t\t\t  <span class=\"keyword\">if</span>(!inque[v]){</span><br><span class=\"line\">\t\t\t\t\t  q.push(v), inque[v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t  }</span><br><span class=\"line\">\t\t\t  }</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"Difference-between-Dij-heap-and-SPFA\"><a href=\"#Difference-between-Dij-heap-and-SPFA\" class=\"headerlink\" title=\"Difference between Dij+heap and SPFA!!!\"></a>Difference between Dij+heap and SPFA!!!</h4><p>Dij:</p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(!q.empty()){</span><br><span class=\"line\">  <span class=\"comment\">//If priority queue is not empty</span></span><br><span class=\"line\">\t\tnode tmp=q.top();q.pop();</span><br><span class=\"line\">  <span class=\"comment\">//get top out</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x=tmp.pos,d=tmp.dis;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!vis[x]){<span class=\"comment\">//Got to the tail, if we didn't visit it</span></span><br><span class=\"line\">\t\tvis[x]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[x];i;i=eg[i].next){</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> y=eg[i].dest;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(dis[y]>dis[x]+eg[i].val){</span><br><span class=\"line\">        <span class=\"comment\">//Relax</span></span><br><span class=\"line\">\t\t\t\tdis[y]=dis[x]+eg[i].val;<span class=\"comment\">//The core of the code, to replace for smaller</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!vis[y])<span class=\"comment\">//Got to the head, if we didn't visit it</span></span><br><span class=\"line\">\t\t\t\t\tq.push((node){dis[y],y});</span><br><span class=\"line\">        <span class=\"comment\">//New distance and new point into the queue</span></span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br></pre></td></tr></tbody></table></figure>\n<p>SPFA:</p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(!q.empty()){</span><br><span class=\"line\">   <span class=\"comment\">//if regular queue is not empty</span></span><br><span class=\"line\">\tu=q.front(), q.pop();  inque[u]=<span class=\"number\">0</span>;<span class=\"comment\">//Get the front of queue out</span></span><br><span class=\"line\">   <span class=\"comment\">//Get top out</span></span><br><span class=\"line\">   <span class=\"comment\">//And Remember!!!</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[u]; i; i=eg[i].next){</span><br><span class=\"line\">\t\t  v=eg[i].dest;</span><br><span class=\"line\">\t\t  <span class=\"keyword\">if</span>(dist[v]>dist[u]+eg[i].val){<span class=\"comment\">//If find a route with smaller value</span></span><br><span class=\"line\">         <span class=\"comment\">//Relax</span></span><br><span class=\"line\">\t\t\t  dist[v]= dist[u]+eg[i].val;<span class=\"comment\">//change it </span></span><br><span class=\"line\">\t\t\t  fa[v]=u;<span class=\"comment\">//Memorize the tail of v</span></span><br><span class=\"line\">\t\t\t  <span class=\"keyword\">if</span>(!inque[v]){</span><br><span class=\"line\">           <span class=\"comment\">//the points that are Relaxed but not in queue get into the queue</span></span><br><span class=\"line\">\t\t\t\t  q.push(v), inque[v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t  }</span><br><span class=\"line\">\t\t  }</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>So the difference is clear enough:</p>\n<p>Dji+heap: <strong>Small root pile</strong>, every time get the shortest distance, for this point, the shortest distance <strong>won’t change</strong>! </p>\n<p>SPFA: Use <strong>queue</strong>. Get the front out of queue, might be renew in the future, it is <strong>won’t be always the same</strong>. </p>\n<h4 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h4><h4 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Shortest-PathsProblem</th>\n<th style=\"text-align:center\">Sparse Graph</th>\n<th style=\"text-align:center\">Dense Graph</th>\n<th style=\"text-align:center\">With negative value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Single-Source</td>\n<td style=\"text-align:center\">Dijkstra+heap</td>\n<td style=\"text-align:center\">SPFA/Dijkstra+heap</td>\n<td style=\"text-align:center\">SPFA</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">APSP(Undirected graph)</td>\n<td style=\"text-align:center\">SPFA/Floyd</td>\n<td style=\"text-align:center\">SPFA</td>\n<td style=\"text-align:center\">SPFA</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">APSP(Directed graph)</td>\n<td style=\"text-align:center\">Floyd</td>\n<td style=\"text-align:center\">SPFA/Dijkstra+heap</td>\n<td style=\"text-align:center\">SPFA</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>​                                                                        APSP((All Pairs Shortest Path))</p>\n<h4 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Solving ways</th>\n<th style=\"text-align:center\">Time Complexity</th>\n<th style=\"text-align:center\">Space Complexity</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Dijkstra+heap</td>\n<td style=\"text-align:center\">O(E*lgV)</td>\n<td style=\"text-align:center\">O(n^2)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SPFA</td>\n<td style=\"text-align:center\">O(kE) (Not stable)</td>\n<td style=\"text-align:center\">O(n)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Floyd</td>\n<td style=\"text-align:center\">O(n^3)</td>\n<td style=\"text-align:center\">O(n)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"树论\"><a href=\"#树论\" class=\"headerlink\" title=\"树论\"></a>树论</h2><h3 id=\"线段树\"><a href=\"#线段树\" class=\"headerlink\" title=\"线段树\"></a>线段树</h3><figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\"><iostream></span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\"><cstdio></span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 100010</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span>  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> {</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l,r;<span class=\"comment\">//区间左右端点</span></span><br><span class=\"line\">\tll value;<span class=\"comment\">//区间和值</span></span><br><span class=\"line\">\tll add,time;<span class=\"comment\">//区间同时增加或乘一个数的延迟标记</span></span><br><span class=\"line\">};</span><br><span class=\"line\">Node tr[MAX<<<span class=\"number\">2</span>]= {<span class=\"number\">0</span>};</span><br><span class=\"line\">ll aa[MAX]= {<span class=\"number\">0</span>};</span><br><span class=\"line\">ll N,M,P;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Read</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">\tll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c<<span class=\"string\">'0'</span>||c><span class=\"string\">'9'</span>) {\t<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;\tc=getchar(); }</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c>=<span class=\"string\">'0'</span>&&c<=<span class=\"string\">'9'</span>)x=x*<span class=\"number\">10</span>+c-<span class=\"string\">'0'</span>,c=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">//初始化线段树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span> </span>{</span><br><span class=\"line\">\ttr[i].l=l,tr[i].r=r,tr[i].value=<span class=\"number\">0</span>,tr[i].time=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l==r) {</span><br><span class=\"line\">\t\ttr[i].value=aa[l];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\tbuild(i<<<span class=\"number\">1</span>,l,(l+r)>><span class=\"number\">1</span>);<span class=\"comment\">//建立左子树区间</span></span><br><span class=\"line\">\tbuild(i<<<span class=\"number\">1</span>|<span class=\"number\">1</span>,((l+r)>><span class=\"number\">1</span>)+<span class=\"number\">1</span>,r);<span class=\"comment\">//建立右子树区间</span></span><br><span class=\"line\">\ttr[i].value=tr[i<<<span class=\"number\">1</span>].value+tr[i<<<span class=\"number\">1</span>|<span class=\"number\">1</span>].value;<span class=\"comment\">//更新编号为i的区间和(由左右儿子来)</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">//向下更新</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>{</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(tr[i].add==<span class=\"number\">0</span>&&tr[i].time==<span class=\"number\">1</span>) <span class=\"keyword\">return</span>;<span class=\"comment\">//无需向下更新</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( tr[i].l==tr[i].r ) {<span class=\"comment\">//避免访问无效内存(叶子没有儿子)</span></span><br><span class=\"line\">\t\ttr[i].add=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\ttr[i].time=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\ttr[i<<<span class=\"number\">1</span>].value=(tr[i<<<span class=\"number\">1</span>].value*tr[i].time+tr[i].add*(tr[i<<<span class=\"number\">1</span>].r-tr[i<<<span class=\"number\">1</span>].l+<span class=\"number\">1</span>))%P;</span><br><span class=\"line\">\t<span class=\"comment\">//左儿子区间值</span></span><br><span class=\"line\">\ttr[i<<<span class=\"number\">1</span>|<span class=\"number\">1</span>].value=(tr[i<<<span class=\"number\">1</span>|<span class=\"number\">1</span>].value*tr[i].time+tr[i].add*(tr[i<<<span class=\"number\">1</span>|<span class=\"number\">1</span>].r-tr[i<<<span class=\"number\">1</span>|<span class=\"number\">1</span>].l+<span class=\"number\">1</span>))%P;</span><br><span class=\"line\">\t<span class=\"comment\">//右儿子区间值</span></span><br><span class=\"line\">\ttr[i<<<span class=\"number\">1</span>].time=tr[i<<<span class=\"number\">1</span>].time*tr[i].time%P;<span class=\"comment\">//左儿子更新倍数</span></span><br><span class=\"line\">\ttr[i<<<span class=\"number\">1</span>].add=(tr[i<<<span class=\"number\">1</span>].add*tr[i].time+tr[i].add)%P;<span class=\"comment\">//左儿子更新增加数</span></span><br><span class=\"line\">\ttr[i<<<span class=\"number\">1</span>|<span class=\"number\">1</span>].time=tr[i<<<span class=\"number\">1</span>|<span class=\"number\">1</span>].time*tr[i].time%P;<span class=\"comment\">//右儿子更新倍数</span></span><br><span class=\"line\">\ttr[i<<<span class=\"number\">1</span>|<span class=\"number\">1</span>].add=(tr[i<<<span class=\"number\">1</span>|<span class=\"number\">1</span>].add*tr[i].time+tr[i].add)%P;<span class=\"comment\">//右儿子更新增加数</span></span><br><span class=\"line\">\ttr[i].add=<span class=\"number\">0</span>;<span class=\"comment\">//add延迟标记复0</span></span><br><span class=\"line\">\ttr[i].time=<span class=\"number\">1</span>;<span class=\"comment\">//time倍增延迟标记恢复1</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">//区间求和 (区间查询)</span></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span> </span>{</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l<=tr[i].l&&r>=tr[i].r) {<span class=\"comment\">//刚好罩着区间</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> tr[i].value;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l>tr[i].r||r<tr[i].l) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//不相关区间</span></span><br><span class=\"line\">\tpushdown(i);<span class=\"comment\">//向下更新延迟标记值</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (query(i<<<span class=\"number\">1</span>,l,r)+query(i<<<span class=\"number\">1</span>|<span class=\"number\">1</span>,l,r));<span class=\"comment\">//返回左右儿子区间和值</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">//区间更新(将区间增加一个值k)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateadd</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> k)</span> </span>{</span><br><span class=\"line\">\tpushdown(i);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l<=tr[i].l&&r>=tr[i].r) {</span><br><span class=\"line\">\t\ttr[i].value+=(tr[i].r-tr[i].l+<span class=\"number\">1</span>)*k%P;</span><br><span class=\"line\">\t\ttr[i].add=k%P;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(r<tr[i].l||l>tr[i].r) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\tupdateadd(i<<<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">\tupdateadd(i<<<span class=\"number\">1</span>|<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">\ttr[i].value=(tr[i<<<span class=\"number\">1</span>].value+tr[i<<<span class=\"number\">1</span>|<span class=\"number\">1</span>].value)%P;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">//区间更新(将区间每个值*上一个值k)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updatetime</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> k)</span> </span>{</span><br><span class=\"line\">\tpushdown(i);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l<=tr[i].l&&r>=tr[i].r) {<span class=\"comment\">//此处对照区间增加一个值</span></span><br><span class=\"line\">\t\ttr[i].value=tr[i].value*k%P;</span><br><span class=\"line\">\t\ttr[i].time=k%P;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(r<tr[i].l||l>tr[i].r) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\tupdatetime(i<<<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">\tupdatetime(i<<<span class=\"number\">1</span>|<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">\ttr[i].value=(tr[i<<<span class=\"number\">1</span>].value+tr[i<<<span class=\"number\">1</span>|<span class=\"number\">1</span>].value)%P;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">\t<span class=\"comment\">//freopen(\"data.txt\",\"r\",stdin);</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> o,a,b,k;</span><br><span class=\"line\">\tN=Read(),M=Read(),P=Read();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i<=N; i++)\taa[i]=Read();</span><br><span class=\"line\">\tbuild(<span class=\"number\">1</span>,<span class=\"number\">1</span>,N);<span class=\"comment\">//将数据离散到线段树上</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(M--) {</span><br><span class=\"line\">\t\to=Read(),a=Read(),b=Read();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(o==<span class=\"number\">1</span>) {<span class=\"comment\">//区间倍增k</span></span><br><span class=\"line\">\t\t\tk=Read();</span><br><span class=\"line\">\t\t\tupdatetime(<span class=\"number\">1</span>,a,b,k);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(o==<span class=\"number\">2</span>) {<span class=\"comment\">//区间增加k</span></span><br><span class=\"line\">\t\t\tk=Read();</span><br><span class=\"line\">\t\t\tupdateadd(<span class=\"number\">1</span>,a,b,k);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(o==<span class=\"number\">3</span>) {<span class=\"comment\">//区间查询</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,query(<span class=\"number\">1</span>,a,b)%P);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"树状数组\"><a href=\"#树状数组\" class=\"headerlink\" title=\"树状数组\"></a>树状数组</h3><p><img data-src=\"https://i.loli.net/2020/04/02/LiM8J95WDxcpCd6.png\" alt></p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">bit</span>[mx+<span class=\"number\">1</span>], n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>{</span><br><span class=\"line\">   <span class=\"keyword\">return</span> x & -x;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>{<span class=\"comment\">//Calculate the sum</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> s =<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i><span class=\"number\">0</span>){</span><br><span class=\"line\">    s+=<span class=\"built_in\">bit</span>[i];  i-=lowbit(i);</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> x)</span></span>{<span class=\"comment\">//Add x to i</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i<=n){</span><br><span class=\"line\">       <span class=\"built_in\">bit</span>[i]+=x; i+=lowbit(i);</span><br><span class=\"line\">   }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"重链剖分-lca\"><a href=\"#重链剖分-lca\" class=\"headerlink\" title=\"重链剖分+lca\"></a>重链剖分+lca</h3><figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\"><iostream></span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\"><cstdio></span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,s;<span class=\"comment\">//分别表示树的结点个数、询问的个数和树根结点的序号</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mx=<span class=\"number\">500005</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span> {</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> d;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> w;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> next;</span><br><span class=\"line\">} eg[mx<<<span class=\"number\">1</span>]= {<span class=\"number\">0</span>};</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[mx]={<span class=\"number\">0</span>};</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt=<span class=\"number\">0</span>,head[mx]= {<span class=\"number\">0</span>},dep[mx]= {<span class=\"number\">0</span>},siz[mx]= {<span class=\"number\">0</span>};</span><br><span class=\"line\"><span class=\"keyword\">int</span> son[mx]= {<span class=\"number\">0</span>},fa[mx]= {<span class=\"number\">0</span>},top[mx]= {<span class=\"number\">0</span>};</span><br><span class=\"line\"><span class=\"comment\">//增加边</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Read</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c<<span class=\"string\">'0'</span>||c><span class=\"string\">'9'</span>) c=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c<=<span class=\"string\">'9'</span>&&c>=<span class=\"string\">'0'</span>) x=x*<span class=\"number\">10</span>+c-<span class=\"string\">'0'</span>,c=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> w)</span> </span>{</span><br><span class=\"line\">\teg[++cnt].d=v,eg[cnt].w=w,eg[cnt].next=head[u],head[u]=cnt;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>{</span><br><span class=\"line\">\tsiz[u]=<span class=\"number\">1</span>, son[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i=head[u]; i; i=eg[i].next ) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> v=eg[i].d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(v!=fa[u]) {</span><br><span class=\"line\">\t\t\tdep[v]=dep[u]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tfa[v]=u;</span><br><span class=\"line\">\t\t\tdfs1(v);</span><br><span class=\"line\">\t\t\tsiz[u]+=siz[v];<span class=\"comment\">//计算儿子节点个数</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!son[u] || siz[v]>siz[son[u]]) son[u]=v;<span class=\"comment\">//记录重儿子结点编号</span></span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> tp)</span> </span>{</span><br><span class=\"line\">\ttop[u]=tp;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(son[u]) dfs2(son[u],tp);<span class=\"comment\">//拉重链</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i=head[u]; i; i=eg[i].next ) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> v=eg[i].d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( v!=fa[u] && v!=son[u] ) dfs2(v,v);<span class=\"comment\">//拉轻链</span></span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span> </span>{\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(top[x]!=top[y]){</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(dep[top[x]]>=dep[top[y]])\tx=fa[top[x]];</span><br><span class=\"line\">       <span class=\"keyword\">else</span> y=fa[top[y]];</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dep[x]<dep[y]? x : y;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&n,&m,&s);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i<n; ++i) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x,y; </span><br><span class=\"line\">\t\tx=Read(), y=Read();</span><br><span class=\"line\">\t\taddEdge(x,y,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\taddEdge(y,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\tdfs1(s);</span><br><span class=\"line\">\tdfs2(s,s);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i<=m; ++i) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x,y; </span><br><span class=\"line\">\t\tx=Read(), y=Read();</span><br><span class=\"line\">\t    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,lca(x,y));</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"离散化\"><a href=\"#离散化\" class=\"headerlink\" title=\"离散化\"></a>离散化</h3><p>离散化后只能知道数据之间的相对大小，但无法确定它们的真实值；</p>\n<p>离散化的三个步骤：</p>\n<p>1 sort排序</p>\n<p>2 unique去重</p>\n<p>3 lower_bound索引</p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i<=n; i++){</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&a[i]);</span><br><span class=\"line\">    b[i]=a[i];    <span class=\"comment\">//b[]是a[]的副本</span></span><br><span class=\"line\">}</span><br><span class=\"line\">sort(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>);  <span class=\"comment\">//排序</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sum=unique(b+<span class=\"number\">1</span>,b+<span class=\"number\">1</span>+n)-b<span class=\"number\">-1</span>;  <span class=\"comment\">//去重</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i<=n; i++)</span><br><span class=\"line\">    a[i]=lower_bound(b+<span class=\"number\">1</span>,b+<span class=\"number\">1</span>+sum,a[i])-b;<span class=\"comment\">//索引</span></span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h3><figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">set</span>[mx];<span class=\"comment\">//集合</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>{</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x==<span class=\"built_in\">set</span>[x]?x:<span class=\"built_in\">set</span>[x]=<span class=\"built_in\">find</span>(<span class=\"built_in\">set</span>[x]);<span class=\"comment\">//到顶就return，没有就继续往上递归</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unionset</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>{<span class=\"comment\">//合并集合</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> xx=<span class=\"built_in\">find</span>(x),yy=<span class=\"built_in\">find</span>(y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xx!=yy){</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xx>yy)swap(xx,yy);</span><br><span class=\"line\">        <span class=\"built_in\">set</span>[yy]=xx;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i<=n;i++)<span class=\"built_in\">set</span>[i]=i;<span class=\"comment\">//在主函数中初始化（各为一个集合）</span></span><br></pre></td></tr></tbody></table></figure>\n</body></html>","more":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"输入类\"><a href=\"#输入类\" class=\"headerlink\" title=\"输入类\"></a>输入类</h3><p>读入优化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rd</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&gt;<span class=\"string\">'9'</span>||c&lt;<span class=\"string\">'0'</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\tc=getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>)&#123;</span><br><span class=\"line\">\t\tx=x*<span class=\"number\">10</span>+c-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t\tc=getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"高精度\"><a href=\"#高精度\" class=\"headerlink\" title=\"高精度\"></a>高精度</h3><p>高精度真的是mol鬼，到现在听到要打高精度觉得自己还是打不出来</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bign</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len, s[mx];<span class=\"comment\">//高精度长度和存放数值</span></span><br><span class=\"line\">\tbign() &#123; <span class=\"built_in\">memset</span>(s,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(s)),len=<span class=\"number\">1</span>;&#125; <span class=\"comment\">//构造函数初始化</span></span><br><span class=\"line\">\tbign (<span class=\"keyword\">int</span> num) &#123; *<span class=\"keyword\">this</span> = num; &#125;<span class=\"comment\">//低精度赋值</span></span><br><span class=\"line\">\tbign (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *num) &#123; *<span class=\"keyword\">this</span> = num; &#125; <span class=\"comment\">//字符串赋值</span></span><br><span class=\"line\">\tbign <span class=\"keyword\">operator</span> = (<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> num) &#123;<span class=\"comment\">//低精度转换成高精度</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> st[mx]; <span class=\"built_in\">sprintf</span>(st,<span class=\"string\">\"%d\"</span>,num);\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>=st;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbign <span class=\"keyword\">operator</span> = (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *num) &#123;<span class=\"comment\">//将字符串转成高精度值</span></span><br><span class=\"line\">\t\tlen=<span class=\"built_in\">strlen</span>(num);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;len; i++) s[i]=num[len-i<span class=\"number\">-1</span>]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clean</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//清除高位 0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(len&gt;<span class=\"number\">1</span> &amp;&amp; s[len<span class=\"number\">-1</span>]==<span class=\"number\">0</span>) len--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbign <span class=\"keyword\">operator</span> + (<span class=\"keyword\">const</span> bign &amp;b) &#123; <span class=\"comment\">//重载运算符 +</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> l=<span class=\"built_in\">max</span>(len,b.len),i;</span><br><span class=\"line\">\t\tbign c;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;l; i++) &#123;</span><br><span class=\"line\">\t\t\tc.s[i]+=(s[i]+b.s[i]);<span class=\"comment\">//当前位</span></span><br><span class=\"line\">\t\t\tc.s[i+<span class=\"number\">1</span>]+=c.s[i]/<span class=\"number\">10</span>;<span class=\"comment\">//进位位</span></span><br><span class=\"line\">\t\t\tc.s[i]%=<span class=\"number\">10</span>;<span class=\"comment\">//调整本位</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tc.len=l+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tc.clean();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbign <span class=\"keyword\">operator</span> - (<span class=\"keyword\">const</span> bign &amp;x) &#123;<span class=\"comment\">//重载运算符-</span></span><br><span class=\"line\">\t\tbign c=*<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;len; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(x.s[i]&gt;c.s[i]) &#123;</span><br><span class=\"line\">\t\t\t\tc.s[i+<span class=\"number\">1</span>]--;<span class=\"comment\">//从前借一位</span></span><br><span class=\"line\">\t\t\t\tc.s[i]+=<span class=\"number\">10</span>;<span class=\"comment\">//当前位加10</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tc.s[i]-=x.s[i];<span class=\"comment\">//直接减</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tc.clean();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbign <span class=\"keyword\">operator</span> * (<span class=\"keyword\">const</span> bign &amp;b) &#123;<span class=\"comment\">//重载运算符*</span></span><br><span class=\"line\">\t\tbign c;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;len; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;b.len; j++) &#123;</span><br><span class=\"line\">\t\t\t\tc.s[i+j]+=s[i]*b.s[j];<span class=\"comment\">//本位</span></span><br><span class=\"line\">\t\t\t\tc.s[i+j+<span class=\"number\">1</span>]+=c.s[i+j]/<span class=\"number\">10</span>;<span class=\"comment\">//进位</span></span><br><span class=\"line\">\t\t\t\tc.s[i+j]%=<span class=\"number\">10</span>;<span class=\"comment\">//调整本位</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tc.len=len+b.len+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tc.clean();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbign <span class=\"keyword\">operator</span> / (<span class=\"keyword\">const</span> bign &amp;b) &#123;</span><br><span class=\"line\">        bign c, f = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            f =f*<span class=\"number\">10</span>;</span><br><span class=\"line\">            f.s[<span class=\"number\">0</span>] = s[i];</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(f &gt;= b) &#123;</span><br><span class=\"line\">                f =f- b;</span><br><span class=\"line\">                c.s[i]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c.len = len;</span><br><span class=\"line\">        c.clean();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (<span class=\"keyword\">const</span> bign &amp;b) &#123;<span class=\"comment\">//重载运算符 &gt;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(len!=b.len) <span class=\"keyword\">return</span> len&gt;b.len;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=len<span class=\"number\">-1</span>; i&gt;=<span class=\"number\">0</span>; i--) &#123; <span class=\"comment\">//从高位开始对比</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(s[i]!=b.s[i]) <span class=\"keyword\">return</span> s[i]&gt;b.s[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> bign &amp;b) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(len!=b.len) <span class=\"keyword\">return</span> len&lt;b.len;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=len<span class=\"number\">-1</span>; i&gt;=<span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(s[i]!=b.s[i]) <span class=\"keyword\">return</span> s[i]&lt;b.s[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (<span class=\"keyword\">const</span> bign &amp;b) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> !(*<span class=\"keyword\">this</span>&gt;b) &amp;&amp; !(*<span class=\"keyword\">this</span>&lt;b);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt;= (<span class=\"keyword\">const</span> bign &amp;b) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>&gt;b || *<span class=\"keyword\">this</span>==b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">str</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;<span class=\"comment\">//将高度精值转换成字符</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> re=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;len; i++) re=(<span class=\"keyword\">char</span>)(s[i]+<span class=\"string\">'0'</span>)+re;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> re;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">istream&amp; <span class=\"keyword\">operator</span> &gt;&gt; (istream &amp;in, bign &amp;x) &#123;<span class=\"comment\">//使高精度支持输入&gt;&gt;</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s;</span><br><span class=\"line\">\tin&gt;&gt;s;\tx=s.c_str(); <span class=\"keyword\">return</span> in;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ostream&amp; <span class=\"keyword\">operator</span> &lt;&lt; (ostream &amp;out, <span class=\"keyword\">const</span> bign &amp;x) &#123;<span class=\"comment\">//使高精度支持输出</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=x.len<span class=\"number\">-1</span>; i&gt;=<span class=\"number\">0</span>; i--) out&lt;&lt;x.s[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><h4 id=\"真香排序\"><a href=\"#真香排序\" class=\"headerlink\" title=\"真香排序\"></a>真香排序</h4><p>不论会什么高级模版，总会想用它</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a&lt;b;<span class=\"comment\">//从低到高</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sort(a,a+n+<span class=\"number\">1</span>,cmp);</span><br></pre></td></tr></table></figure>\n<h4 id=\"桶排\"><a href=\"#桶排\" class=\"headerlink\" title=\"桶排\"></a>桶排</h4><p>简单来说就是记录后找下标</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x,n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">100</span>]= &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;x;</span><br><span class=\"line\">\t\ta[x]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; i++) </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m=<span class=\"number\">1</span>;m&lt;=a[i];m++)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"string\">\" \"</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><p>相邻元素若不按照顺序则替换</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j,t;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(j=i+<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(a[i]&lt;a[j])&#123;</span><br><span class=\"line\">             swap(a[i],a[j]);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h4><p>递归拆分子序列</p>\n<p><img data-src=\"https://i.loli.net/2020/04/02/q8CSv6jAZefsXaE.png\" alt=\"image-20200329201857057.png\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r , <span class=\"keyword\">int</span> *t)</span></span>&#123;<span class=\"comment\">//要排序数组a,起始l，终止r，暂存空间t</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(r-l&gt;<span class=\"number\">1</span>)&#123;    </span><br><span class=\"line\">       <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;<span class=\"comment\">//中间进行划分</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> p=l, q=m, i= l;</span><br><span class=\"line\">   \t\t merge_sort(a,l,m,t);<span class=\"comment\">//划分</span></span><br><span class=\"line\">    \t merge_sort(a,m,r,t);<span class=\"comment\">//划分</span></span><br><span class=\"line\">       <span class=\"keyword\">while</span>(p&lt;m ||q&lt;r)&#123;         </span><br><span class=\"line\">         <span class=\"keyword\">if</span>(q&gt;=r || (p&lt;m &amp;&amp; a[p]&lt;a[q]))</span><br><span class=\"line\">              \tt[i++] = a[p++];</span><br><span class=\"line\">              <span class=\"comment\">//将左则暂存至临时空间         </span></span><br><span class=\"line\">         <span class=\"keyword\">else</span> </span><br><span class=\"line\">               t[i++] = a[q++];  </span><br><span class=\"line\">               <span class=\"comment\">//将右则暂存至临时空间\t</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=l; i&lt;r; i++)a[i]= t[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><p>基本思想是通过一趟排序将待排记录分割成独立的两部分,其中一部分记录的均比另一部分小,则可分别对这两部分记录继续进行排序,以达到整个序列有序.</p>\n<p>假定待排序列为{r[s],r[s+1],…..r[t]},首先选取一个记录作为枢轴(pivot),然后按下述原则重新排列其余记录.</p>\n<p>将所有较它小的记录安置在它之前,将所有较它大的记录安置在它之后.由此可见此”枢轴”记录最后所落的位置I作分界线,将原序列分割成两个{r[s],r[s+1],…r[i-1]}和{r[i],r[i+1],…r[t]}.这个过程称做一趟快速排序(或一次划分).</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">part</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> a[])</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> p=a[l];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(l&lt;r) &#123;<span class=\"comment\">//保证没有重叠</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(l&lt;r &amp;&amp; a[r]&gt;=p) r--;</span><br><span class=\"line\">\t\ta[l]=a[r];<span class=\"comment\">//将右边不适宜的数字放到左边</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(l&lt;r &amp;&amp; a[l]&lt;=p) l++;</span><br><span class=\"line\">\t\ta[r]=a[l];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta[l]=p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">qsort</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> a[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l&lt;r) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> p=part(l,r,a);</span><br><span class=\"line\">\t\tqsort(l,p,a);</span><br><span class=\"line\">\t\tqsort(p+<span class=\"number\">1</span>,r,a);</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://i.loli.net/2020/04/02/9opqN7LVQXCaEPz.png\" alt=\"排序对比\"></p>\n<h3 id=\"进制转换\"><a href=\"#进制转换\" class=\"headerlink\" title=\"进制转换\"></a>进制转换</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tenout</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> m)</span></span>&#123;<span class=\"comment\">//十进制转任意进制</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x)&#123;a[++n]=x%m;x/=m;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n;i&gt;=<span class=\"number\">1</span>;--i)</span><br><span class=\"line\">        (a[i]&lt;<span class=\"number\">10</span>)?(<span class=\"built_in\">cout</span>&lt;&lt;a[i]):(<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"keyword\">char</span>(a[i]+(<span class=\"string\">'A'</span><span class=\"number\">-10</span>)));<span class=\"comment\">//如果小于10就直接输出，else输出字母</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getten</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">char</span> s[])</span></span>&#123;<span class=\"comment\">//任意进制转十进制</span></span><br><span class=\"line\">    ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">strlen</span>(s);i++) </span><br><span class=\"line\">        ans=ans*x+(<span class=\"built_in\">isdigit</span>(s[i])?(s[i]^<span class=\"string\">'0'</span>):(s[i]-<span class=\"string\">'A'</span>+<span class=\"number\">10</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"提高\"><a href=\"#提高\" class=\"headerlink\" title=\"提高\"></a>提高</h2><h3 id=\"图论\"><a href=\"#图论\" class=\"headerlink\" title=\"图论\"></a>图论</h3><h4 id=\"默认存储及加边\"><a href=\"#默认存储及加边\" class=\"headerlink\" title=\"默认存储及加边\"></a>默认存储及加边</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> dest;<span class=\"comment\">//destination</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> val;<span class=\"comment\">//edge's value</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> next;<span class=\"comment\">//next edge</span></span><br><span class=\"line\">  &#125;eg[mx*<span class=\"number\">2</span>];<span class=\"comment\">//mx is the numer of the edges, if it is undirected you need to double</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;<span class=\"comment\">//nomber of point in the graph，number of edge in the graph </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> head[MAX]=&#123;<span class=\"number\">0</span>&#125;;<span class=\"comment\">//The head in the graph</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> top=<span class=\"number\">0</span>;<span class=\"comment\">//The exact number of the edeges</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> val)</span></span>&#123; </span><br><span class=\"line\">    eg[++top].dest=v;<span class=\"comment\">//v is the tail of the edge(destination)</span></span><br><span class=\"line\">    eg[top].val=val;<span class=\"comment\">//edge's value</span></span><br><span class=\"line\">    eg[top].next=head[u];<span class=\"comment\">//next edge's number</span></span><br><span class=\"line\">    head[u]=top;<span class=\"comment\">//Remeber this edge as another edge for the head u.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> vis[mx]=&#123;<span class=\"number\">0</span>&#125;;<span class=\"comment\">//To make sure you won't travel through the same edge over and over again</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">\tvis[s]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[s];i;i=eg[i].next)&#123;<span class=\"comment\">//travel</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!vis[eg[i].dest])&#123;<span class=\"comment\">//haven't travel through</span></span><br><span class=\"line\">\t\t\tdfs(eg[i].dest);<span class=\"comment\">//Then travel</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"BFS\"><a href=\"#BFS\" class=\"headerlink\" title=\"BFS\"></a>BFS</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;//Import queue libaray</span></span></span><br><span class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;q;<span class=\"comment\">//Declare queue</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">\tq.push(s);vis[s]=<span class=\"number\">1</span>;<span class=\"comment\">//push s into the queue and vis</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!q.empty())&#123;<span class=\"comment\">//As long as there is still elements in the queue</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> u=q.front();<span class=\"comment\">//Get the front of the queue</span></span><br><span class=\"line\">\t\tq.pop();<span class=\"comment\">//Get the front of the queue out</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[u];i;i=eg[i].next)&#123;<span class=\"comment\">//Same old story</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> v=eg[i].dest;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!vis[v])&#123;</span><br><span class=\"line\">\t\t\t\tq.push(v),vis[v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Dijkstra\"><a href=\"#Dijkstra\" class=\"headerlink\" title=\"Dijkstra\"></a>Dijkstra</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span><span class=\"comment\">//Declare another struct to restore the information for the point</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> dis,pos;<span class=\"comment\">//pos means the number of the point</span></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;( <span class=\"keyword\">const</span> node &amp;x )<span class=\"keyword\">const</span>&#123;<span class=\"comment\">//declare the operator '&lt;' by our own function</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x.dis &lt; dis;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::priority_queue&lt;node&gt; q;<span class=\"comment\">//priority queue</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[mx],vis[mx];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">\tdis[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tq.push((node)&#123;<span class=\"number\">0</span>,s&#125;);<span class=\"comment\">//push into queue as struct node</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">\t\tnode tmp=q.top();q.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x=tmp.pos,d=tmp.dis;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!vis[x])&#123;<span class=\"comment\">//Got to the tail, if we didn't visit it</span></span><br><span class=\"line\">\t\tvis[x]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[x];i;i=eg[i].next)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> y=eg[i].dest;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(dis[y]&gt;dis[x]+eg[i].val)&#123;</span><br><span class=\"line\">\t\t\t\tdis[y]=dis[x]+eg[i].val;<span class=\"comment\">//The core of the code, to replace for smaller</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!vis[y])<span class=\"comment\">//Got to the head, if we didn't visit it</span></span><br><span class=\"line\">\t\t\t\t\tq.push((node)&#123;dis[y],y&#125;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Floyd\"><a href=\"#Floyd\" class=\"headerlink\" title=\"Floyd\"></a>Floyd</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">floyd</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=n;k++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=n; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(g[i][k]&lt;inf&amp;&amp;g[k][j]&lt;inf&amp;&amp;g[i][j]&gt;g[i][k]+g[k][j])</span><br><span class=\"line\">\t\t\t\t\tg[i][j]=g[i][k]+g[k][j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"SPFA\"><a href=\"#SPFA\" class=\"headerlink\" title=\"SPFA\"></a>SPFA</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">spfa</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> u,v;    <span class=\"built_in\">memset</span>(dist,<span class=\"number\">0x3f</span>,<span class=\"keyword\">sizeof</span>(dist));<span class=\"comment\">//Initialize dist</span></span><br><span class=\"line\">\tdist[s]=<span class=\"number\">0</span>;<span class=\"comment\">//Get start point as 0</span></span><br><span class=\"line\">\tinque[s]=<span class=\"number\">1</span>;<span class=\"comment\">//Memorize the s is in the queue</span></span><br><span class=\"line\">\tq.push(s);<span class=\"comment\">//in queue</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">\t\tu=q.front(), q.pop();  inque[u]=<span class=\"number\">0</span>;<span class=\"comment\">//Get the front of queue out</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[u]; i; i=eg[i].next)&#123;</span><br><span class=\"line\">\t\t\t  v=eg[i].dest;</span><br><span class=\"line\">\t\t\t  <span class=\"keyword\">if</span>(dist[v]&gt;dist[u]+eg[i].val)&#123;<span class=\"comment\">//If find a route with smaller value</span></span><br><span class=\"line\">\t\t\t\t  dist[v]= dist[u]+eg[i].val;<span class=\"comment\">//change it </span></span><br><span class=\"line\">\t\t\t\t  fa[v]=u;<span class=\"comment\">//Memorize the tail of v</span></span><br><span class=\"line\">\t\t\t\t  <span class=\"keyword\">if</span>(!inque[v])&#123;</span><br><span class=\"line\">\t\t\t\t\t  q.push(v), inque[v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t  &#125;</span><br><span class=\"line\">\t\t\t  &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Difference-between-Dij-heap-and-SPFA\"><a href=\"#Difference-between-Dij-heap-and-SPFA\" class=\"headerlink\" title=\"Difference between Dij+heap and SPFA!!!\"></a>Difference between Dij+heap and SPFA!!!</h4><p>Dij:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">  <span class=\"comment\">//If priority queue is not empty</span></span><br><span class=\"line\">\t\tnode tmp=q.top();q.pop();</span><br><span class=\"line\">  <span class=\"comment\">//get top out</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x=tmp.pos,d=tmp.dis;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!vis[x])&#123;<span class=\"comment\">//Got to the tail, if we didn't visit it</span></span><br><span class=\"line\">\t\tvis[x]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[x];i;i=eg[i].next)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> y=eg[i].dest;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(dis[y]&gt;dis[x]+eg[i].val)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Relax</span></span><br><span class=\"line\">\t\t\t\tdis[y]=dis[x]+eg[i].val;<span class=\"comment\">//The core of the code, to replace for smaller</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!vis[y])<span class=\"comment\">//Got to the head, if we didn't visit it</span></span><br><span class=\"line\">\t\t\t\t\tq.push((node)&#123;dis[y],y&#125;);</span><br><span class=\"line\">        <span class=\"comment\">//New distance and new point into the queue</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>SPFA:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">   <span class=\"comment\">//if regular queue is not empty</span></span><br><span class=\"line\">\tu=q.front(), q.pop();  inque[u]=<span class=\"number\">0</span>;<span class=\"comment\">//Get the front of queue out</span></span><br><span class=\"line\">   <span class=\"comment\">//Get top out</span></span><br><span class=\"line\">   <span class=\"comment\">//And Remember!!!</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[u]; i; i=eg[i].next)&#123;</span><br><span class=\"line\">\t\t  v=eg[i].dest;</span><br><span class=\"line\">\t\t  <span class=\"keyword\">if</span>(dist[v]&gt;dist[u]+eg[i].val)&#123;<span class=\"comment\">//If find a route with smaller value</span></span><br><span class=\"line\">         <span class=\"comment\">//Relax</span></span><br><span class=\"line\">\t\t\t  dist[v]= dist[u]+eg[i].val;<span class=\"comment\">//change it </span></span><br><span class=\"line\">\t\t\t  fa[v]=u;<span class=\"comment\">//Memorize the tail of v</span></span><br><span class=\"line\">\t\t\t  <span class=\"keyword\">if</span>(!inque[v])&#123;</span><br><span class=\"line\">           <span class=\"comment\">//the points that are Relaxed but not in queue get into the queue</span></span><br><span class=\"line\">\t\t\t\t  q.push(v), inque[v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t  &#125;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>So the difference is clear enough:</p>\n<p>Dji+heap: <strong>Small root pile</strong>, every time get the shortest distance, for this point, the shortest distance <strong>won’t change</strong>! </p>\n<p>SPFA: Use <strong>queue</strong>. Get the front out of queue, might be renew in the future, it is <strong>won’t be always the same</strong>. </p>\n<h4 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h4><h4 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Shortest-PathsProblem</th>\n<th style=\"text-align:center\">Sparse Graph</th>\n<th style=\"text-align:center\">Dense Graph</th>\n<th style=\"text-align:center\">With negative value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Single-Source</td>\n<td style=\"text-align:center\">Dijkstra+heap</td>\n<td style=\"text-align:center\">SPFA/Dijkstra+heap</td>\n<td style=\"text-align:center\">SPFA</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">APSP(Undirected graph)</td>\n<td style=\"text-align:center\">SPFA/Floyd</td>\n<td style=\"text-align:center\">SPFA</td>\n<td style=\"text-align:center\">SPFA</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">APSP(Directed graph)</td>\n<td style=\"text-align:center\">Floyd</td>\n<td style=\"text-align:center\">SPFA/Dijkstra+heap</td>\n<td style=\"text-align:center\">SPFA</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>​                                                                        APSP((All Pairs Shortest Path))</p>\n<h4 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Solving ways</th>\n<th style=\"text-align:center\">Time Complexity</th>\n<th style=\"text-align:center\">Space Complexity</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Dijkstra+heap</td>\n<td style=\"text-align:center\">O(E*lgV)</td>\n<td style=\"text-align:center\">O(n^2)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SPFA</td>\n<td style=\"text-align:center\">O(kE) (Not stable)</td>\n<td style=\"text-align:center\">O(n)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Floyd</td>\n<td style=\"text-align:center\">O(n^3)</td>\n<td style=\"text-align:center\">O(n)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"树论\"><a href=\"#树论\" class=\"headerlink\" title=\"树论\"></a>树论</h2><h3 id=\"线段树\"><a href=\"#线段树\" class=\"headerlink\" title=\"线段树\"></a>线段树</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 100010</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span>  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l,r;<span class=\"comment\">//区间左右端点</span></span><br><span class=\"line\">\tll value;<span class=\"comment\">//区间和值</span></span><br><span class=\"line\">\tll add,time;<span class=\"comment\">//区间同时增加或乘一个数的延迟标记</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Node tr[MAX&lt;&lt;<span class=\"number\">2</span>]= &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">ll aa[MAX]= &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">ll N,M,P;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>) &#123;\t<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;\tc=getchar(); &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>)x=x*<span class=\"number\">10</span>+c-<span class=\"string\">'0'</span>,c=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化线段树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\ttr[i].l=l,tr[i].r=r,tr[i].value=<span class=\"number\">0</span>,tr[i].time=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l==r) &#123;</span><br><span class=\"line\">\t\ttr[i].value=aa[l];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbuild(i&lt;&lt;<span class=\"number\">1</span>,l,(l+r)&gt;&gt;<span class=\"number\">1</span>);<span class=\"comment\">//建立左子树区间</span></span><br><span class=\"line\">\tbuild(i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,((l+r)&gt;&gt;<span class=\"number\">1</span>)+<span class=\"number\">1</span>,r);<span class=\"comment\">//建立右子树区间</span></span><br><span class=\"line\">\ttr[i].value=tr[i&lt;&lt;<span class=\"number\">1</span>].value+tr[i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].value;<span class=\"comment\">//更新编号为i的区间和(由左右儿子来)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//向下更新</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(tr[i].add==<span class=\"number\">0</span>&amp;&amp;tr[i].time==<span class=\"number\">1</span>) <span class=\"keyword\">return</span>;<span class=\"comment\">//无需向下更新</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( tr[i].l==tr[i].r ) &#123;<span class=\"comment\">//避免访问无效内存(叶子没有儿子)</span></span><br><span class=\"line\">\t\ttr[i].add=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\ttr[i].time=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttr[i&lt;&lt;<span class=\"number\">1</span>].value=(tr[i&lt;&lt;<span class=\"number\">1</span>].value*tr[i].time+tr[i].add*(tr[i&lt;&lt;<span class=\"number\">1</span>].r-tr[i&lt;&lt;<span class=\"number\">1</span>].l+<span class=\"number\">1</span>))%P;</span><br><span class=\"line\">\t<span class=\"comment\">//左儿子区间值</span></span><br><span class=\"line\">\ttr[i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].value=(tr[i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].value*tr[i].time+tr[i].add*(tr[i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].r-tr[i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].l+<span class=\"number\">1</span>))%P;</span><br><span class=\"line\">\t<span class=\"comment\">//右儿子区间值</span></span><br><span class=\"line\">\ttr[i&lt;&lt;<span class=\"number\">1</span>].time=tr[i&lt;&lt;<span class=\"number\">1</span>].time*tr[i].time%P;<span class=\"comment\">//左儿子更新倍数</span></span><br><span class=\"line\">\ttr[i&lt;&lt;<span class=\"number\">1</span>].add=(tr[i&lt;&lt;<span class=\"number\">1</span>].add*tr[i].time+tr[i].add)%P;<span class=\"comment\">//左儿子更新增加数</span></span><br><span class=\"line\">\ttr[i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].time=tr[i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].time*tr[i].time%P;<span class=\"comment\">//右儿子更新倍数</span></span><br><span class=\"line\">\ttr[i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].add=(tr[i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].add*tr[i].time+tr[i].add)%P;<span class=\"comment\">//右儿子更新增加数</span></span><br><span class=\"line\">\ttr[i].add=<span class=\"number\">0</span>;<span class=\"comment\">//add延迟标记复0</span></span><br><span class=\"line\">\ttr[i].time=<span class=\"number\">1</span>;<span class=\"comment\">//time倍增延迟标记恢复1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//区间求和 (区间查询)</span></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l&lt;=tr[i].l&amp;&amp;r&gt;=tr[i].r) &#123;<span class=\"comment\">//刚好罩着区间</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> tr[i].value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l&gt;tr[i].r||r&lt;tr[i].l) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//不相关区间</span></span><br><span class=\"line\">\tpushdown(i);<span class=\"comment\">//向下更新延迟标记值</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (query(i&lt;&lt;<span class=\"number\">1</span>,l,r)+query(i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,l,r));<span class=\"comment\">//返回左右儿子区间和值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//区间更新(将区间增加一个值k)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateadd</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">\tpushdown(i);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l&lt;=tr[i].l&amp;&amp;r&gt;=tr[i].r) &#123;</span><br><span class=\"line\">\t\ttr[i].value+=(tr[i].r-tr[i].l+<span class=\"number\">1</span>)*k%P;</span><br><span class=\"line\">\t\ttr[i].add=k%P;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(r&lt;tr[i].l||l&gt;tr[i].r) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tupdateadd(i&lt;&lt;<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">\tupdateadd(i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">\ttr[i].value=(tr[i&lt;&lt;<span class=\"number\">1</span>].value+tr[i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].value)%P;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//区间更新(将区间每个值*上一个值k)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updatetime</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">\tpushdown(i);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l&lt;=tr[i].l&amp;&amp;r&gt;=tr[i].r) &#123;<span class=\"comment\">//此处对照区间增加一个值</span></span><br><span class=\"line\">\t\ttr[i].value=tr[i].value*k%P;</span><br><span class=\"line\">\t\ttr[i].time=k%P;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(r&lt;tr[i].l||l&gt;tr[i].r) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tupdatetime(i&lt;&lt;<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">\tupdatetime(i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,l,r,k);</span><br><span class=\"line\">\ttr[i].value=(tr[i&lt;&lt;<span class=\"number\">1</span>].value+tr[i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].value)%P;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//freopen(\"data.txt\",\"r\",stdin);</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> o,a,b,k;</span><br><span class=\"line\">\tN=Read(),M=Read(),P=Read();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=N; i++)\taa[i]=Read();</span><br><span class=\"line\">\tbuild(<span class=\"number\">1</span>,<span class=\"number\">1</span>,N);<span class=\"comment\">//将数据离散到线段树上</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(M--) &#123;</span><br><span class=\"line\">\t\to=Read(),a=Read(),b=Read();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(o==<span class=\"number\">1</span>) &#123;<span class=\"comment\">//区间倍增k</span></span><br><span class=\"line\">\t\t\tk=Read();</span><br><span class=\"line\">\t\t\tupdatetime(<span class=\"number\">1</span>,a,b,k);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(o==<span class=\"number\">2</span>) &#123;<span class=\"comment\">//区间增加k</span></span><br><span class=\"line\">\t\t\tk=Read();</span><br><span class=\"line\">\t\t\tupdateadd(<span class=\"number\">1</span>,a,b,k);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(o==<span class=\"number\">3</span>) &#123;<span class=\"comment\">//区间查询</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,query(<span class=\"number\">1</span>,a,b)%P);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"树状数组\"><a href=\"#树状数组\" class=\"headerlink\" title=\"树状数组\"></a>树状数组</h3><p><img data-src=\"https://i.loli.net/2020/04/02/LiM8J95WDxcpCd6.png\" alt=\"\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">bit</span>[mx+<span class=\"number\">1</span>], n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> x &amp; -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;<span class=\"comment\">//Calculate the sum</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> s =<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    s+=<span class=\"built_in\">bit</span>[i];  i-=lowbit(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"comment\">//Add x to i</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=n)&#123;</span><br><span class=\"line\">       <span class=\"built_in\">bit</span>[i]+=x; i+=lowbit(i);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重链剖分-lca\"><a href=\"#重链剖分-lca\" class=\"headerlink\" title=\"重链剖分+lca\"></a>重链剖分+lca</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,s;<span class=\"comment\">//分别表示树的结点个数、询问的个数和树根结点的序号</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mx=<span class=\"number\">500005</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> d;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> w;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> next;</span><br><span class=\"line\">&#125; eg[mx&lt;&lt;<span class=\"number\">1</span>]= &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[mx]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt=<span class=\"number\">0</span>,head[mx]= &#123;<span class=\"number\">0</span>&#125;,dep[mx]= &#123;<span class=\"number\">0</span>&#125;,siz[mx]= &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> son[mx]= &#123;<span class=\"number\">0</span>&#125;,fa[mx]= &#123;<span class=\"number\">0</span>&#125;,top[mx]= &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//增加边</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>) c=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(c&lt;=<span class=\"string\">'9'</span>&amp;&amp;c&gt;=<span class=\"string\">'0'</span>) x=x*<span class=\"number\">10</span>+c-<span class=\"string\">'0'</span>,c=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">\teg[++cnt].d=v,eg[cnt].w=w,eg[cnt].next=head[u],head[u]=cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">\tsiz[u]=<span class=\"number\">1</span>, son[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i=head[u]; i; i=eg[i].next ) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> v=eg[i].d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(v!=fa[u]) &#123;</span><br><span class=\"line\">\t\t\tdep[v]=dep[u]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tfa[v]=u;</span><br><span class=\"line\">\t\t\tdfs1(v);</span><br><span class=\"line\">\t\t\tsiz[u]+=siz[v];<span class=\"comment\">//计算儿子节点个数</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!son[u] || siz[v]&gt;siz[son[u]]) son[u]=v;<span class=\"comment\">//记录重儿子结点编号</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> tp)</span> </span>&#123;</span><br><span class=\"line\">\ttop[u]=tp;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(son[u]) dfs2(son[u],tp);<span class=\"comment\">//拉重链</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i=head[u]; i; i=eg[i].next ) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> v=eg[i].d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( v!=fa[u] &amp;&amp; v!=son[u] ) dfs2(v,v);<span class=\"comment\">//拉轻链</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span> </span>&#123;\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(top[x]!=top[y])&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(dep[top[x]]&gt;=dep[top[y]])\tx=fa[top[x]];</span><br><span class=\"line\">       <span class=\"keyword\">else</span> y=fa[top[y]];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dep[x]&lt;dep[y]? x : y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;n,&amp;m,&amp;s);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x,y; </span><br><span class=\"line\">\t\tx=Read(), y=Read();</span><br><span class=\"line\">\t\taddEdge(x,y,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\taddEdge(y,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdfs1(s);</span><br><span class=\"line\">\tdfs2(s,s);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x,y; </span><br><span class=\"line\">\t\tx=Read(), y=Read();</span><br><span class=\"line\">\t    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,lca(x,y));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"离散化\"><a href=\"#离散化\" class=\"headerlink\" title=\"离散化\"></a>离散化</h3><p>离散化后只能知道数据之间的相对大小，但无法确定它们的真实值；</p>\n<p>离散化的三个步骤：</p>\n<p>1 sort排序</p>\n<p>2 unique去重</p>\n<p>3 lower_bound索引</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a[i]);</span><br><span class=\"line\">    b[i]=a[i];    <span class=\"comment\">//b[]是a[]的副本</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sort(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>);  <span class=\"comment\">//排序</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sum=unique(b+<span class=\"number\">1</span>,b+<span class=\"number\">1</span>+n)-b<span class=\"number\">-1</span>;  <span class=\"comment\">//去重</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++)</span><br><span class=\"line\">    a[i]=lower_bound(b+<span class=\"number\">1</span>,b+<span class=\"number\">1</span>+sum,a[i])-b;<span class=\"comment\">//索引</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">set</span>[mx];<span class=\"comment\">//集合</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x==<span class=\"built_in\">set</span>[x]?x:<span class=\"built_in\">set</span>[x]=<span class=\"built_in\">find</span>(<span class=\"built_in\">set</span>[x]);<span class=\"comment\">//到顶就return，没有就继续往上递归</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unionset</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;<span class=\"comment\">//合并集合</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> xx=<span class=\"built_in\">find</span>(x),yy=<span class=\"built_in\">find</span>(y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xx!=yy)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xx&gt;yy)swap(xx,yy);</span><br><span class=\"line\">        <span class=\"built_in\">set</span>[yy]=xx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"built_in\">set</span>[i]=i;<span class=\"comment\">//在主函数中初始化（各为一个集合）</span></span><br></pre></td></tr></table></figure>","categories":[{"name":"技术","path":"api/categories/技术.json"}],"tags":[{"name":"竞赛","path":"api/tags/竞赛.json"}]}